

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Tue Dec 12 10:36:06 2023

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=3
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=3
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=3
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=2
    39                           	psect	text19,global,reloc=2,class=CODE,delta=1
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1
    41                           	psect	text21,global,reloc=2,class=CODE,delta=1
    42                           	psect	text22,global,reloc=2,class=CODE,delta=1
    43                           	psect	text23,global,reloc=2,class=CODE,delta=1
    44                           	psect	text24,global,reloc=2,class=CODE,delta=1
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1
    50                           	psect	text30,global,reloc=2,class=CODE,delta=1
    51                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=2
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1
    58                           	psect	text38,global,reloc=2,class=CODE,delta=1
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=3
    63                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=2
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=2
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1
    66                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    67                           	psect	text47,global,reloc=2,class=CODE,delta=1
    68                           	psect	text48,global,reloc=2,class=CODE,delta=1
    69                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    70                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    71                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    72                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    73   000000                     
    74                           ; Generated 21/07/2023 GMT
    75                           ; 
    76                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    77                           ; All rights reserved.
    78                           ; 
    79                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    80                           ; 
    81                           ; Redistribution and use in source and binary forms, with or without modification, are
    82                           ; permitted provided that the following conditions are met:
    83                           ; 
    84                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    85                           ;        conditions and the following disclaimer.
    86                           ; 
    87                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    88                           ;        of conditions and the following disclaimer in the documentation and/or other
    89                           ;        materials provided with the distribution. Publication is not required when
    90                           ;        this file is used in an embedded application.
    91                           ; 
    92                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    93                           ;        software without specific prior written permission.
    94                           ; 
    95                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    96                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    97                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    98                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    99                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   100                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   101                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   102                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   103                           ; 
   104                           ; 
   105                           ; Code-generator required, PIC18F67K40 Definitions
   106                           ; 
   107                           ; SFR Addresses
   108   000000                     
   109                           	psect	idataBANK1
   110   00223A                     __pidataBANK1:
   111                           	callstack 0
   112                           
   113                           ;initializer for _whiteC
   114   00223A  77                 	db	119
   115   00223B  3F66               	dw	16230
   116   00223D  0000               	dw	0
   117   00223F  1E41               	dw	7745
   118   002241  0000               	dw	0
   119   002243  14F0               	dw	5360
   120   002245  0000               	dw	0
   121   002247  0F14               	dw	3860
   122   002249  0000               	dw	0
   123   00224B  0002               	dw	2
   124   00224D  0000               	dw	0
   125   00224F  0000               	dw	0
   126   002251  0000               	dw	0
   127                           
   128                           ;initializer for _lightBlue
   129   002253  6C                 	db	108
   130   002254  2A58               	dw	10840
   131   002256  0000               	dw	0
   132   002258  0F2D               	dw	3885
   133   00225A  0000               	dw	0
   134   00225C  109F               	dw	4255
   135   00225E  0000               	dw	0
   136   002260  0BCC               	dw	3020
   137   002262  0000               	dw	0
   138   002264  0002               	dw	2
   139   002266  0003               	dw	3
   140   002268  0001               	dw	1
   141   00226A  0000               	dw	0
   142                           
   143                           ;initializer for _orange
   144   00226C  6F                 	db	111
   145   00226D  2A1D               	dw	10781
   146   00226F  0000               	dw	0
   147   002271  1AC6               	dw	6854
   148   002273  0000               	dw	0
   149   002275  0A00               	dw	2560
   150   002277  0000               	dw	0
   151   002279  07B2               	dw	1970
   152   00227B  0000               	dw	0
   153   00227D  0002               	dw	2
   154   00227F  0003               	dw	3
   155   002281  0000               	dw	0
   156   002283  0000               	dw	0
   157                           
   158                           ;initializer for _pink
   159   002285  70                 	db	112
   160   002286  2EFE               	dw	12030
   161   002288  0000               	dw	0
   162   00228A  1886               	dw	6278
   163   00228C  0000               	dw	0
   164   00228E  0E04               	dw	3588
   165   002290  0000               	dw	0
   166   002292  0AAB               	dw	2731
   167   002294  0000               	dw	0
   168   002296  0000               	dw	0
   169   002298  0002               	dw	2
   170   00229A  0001               	dw	1
   171   00229C  0001               	dw	1
   172                           
   173                           ;initializer for _yellow
   174   00229E  79                 	db	121
   175   00229F  35CF               	dw	13775
   176   0022A1  0000               	dw	0
   177   0022A3  1DE4               	dw	7652
   178   0022A5  0000               	dw	0
   179   0022A7  10BD               	dw	4285
   180   0022A9  0000               	dw	0
   181   0022AB  09D6               	dw	2518
   182   0022AD  0000               	dw	0
   183   0022AF  0000               	dw	0
   184   0022B1  0002               	dw	2
   185   0022B3  0000               	dw	0
   186   0022B5  0001               	dw	1
   187                           
   188                           ;initializer for _blue
   189   0022B7  62                 	db	98
   190   0022B8  0B9F               	dw	2975
   191   0022BA  0000               	dw	0
   192   0022BC  0408               	dw	1032
   193   0022BE  0000               	dw	0
   194   0022C0  03E3               	dw	995
   195   0022C2  0000               	dw	0
   196   0022C4  03C0               	dw	960
   197   0022C6  0000               	dw	0
   198   0022C8  0002               	dw	2
   199   0022CA  0004               	dw	4
   200   0022CC  0000               	dw	0
   201   0022CE  0000               	dw	0
   202                           
   203                           ;initializer for _green
   204   0022D0  67                 	db	103
   205   0022D1  20A3               	dw	8355
   206   0022D3  0000               	dw	0
   207   0022D5  0CE7               	dw	3303
   208   0022D7  0000               	dw	0
   209   0022D9  0DD4               	dw	3540
   210   0022DB  0000               	dw	0
   211   0022DD  06CC               	dw	1740
   212   0022DF  0000               	dw	0
   213   0022E1  0002               	dw	2
   214   0022E3  0002               	dw	2
   215   0022E5  0001               	dw	1
   216   0022E7  0000               	dw	0
   217                           
   218                           ;initializer for _red
   219   0022E9  72                 	db	114
   220   0022EA  19D7               	dw	6615
   221   0022EC  0000               	dw	0
   222   0022EE  1504               	dw	5380
   223   0022F0  0000               	dw	0
   224   0022F2  0307               	dw	775
   225   0022F4  0000               	dw	0
   226   0022F6  03D4               	dw	980
   227   0022F8  0000               	dw	0
   228   0022FA  0002               	dw	2
   229   0022FC  0002               	dw	2
   230   0022FE  0000               	dw	0
   231   002300  0000               	dw	0
   232                           
   233                           ;initializer for _minPow
   234   002302  000F               	dw	15
   235                           
   236                           ;initializer for _maxPowR
   237   002304  001F               	dw	31
   238                           
   239                           ;initializer for _maxPowL
   240   002306  001D               	dw	29
   241                           
   242                           ;initializer for _incidenceThresh
   243   002308  01F4               	dw	500
   244                           
   245                           	psect	idataBANK2
   246   002BCC                     __pidataBANK2:
   247                           	callstack 0
   248                           
   249                           ;initializer for _blackC
   250   002BCC  6B                 	db	107
   251   002BCD  0638               	dw	1592
   252   002BCF  0000               	dw	0
   253   002BD1  02F8               	dw	760
   254   002BD3  0000               	dw	0
   255   002BD5  01D3               	dw	467
   256   002BD7  0000               	dw	0
   257   002BD9  014C               	dw	332
   258   002BDB  0000               	dw	0
   259   002BDD  0002               	dw	2
   260   002BDF  0000               	dw	0
   261   002BE1  0000               	dw	0
   262   002BE3  0000               	dw	0
   263   000000                     _TX4REG	set	3812
   264   000000                     _RC4STAbits	set	3815
   265   000000                     _SP4BRGH	set	3814
   266   000000                     _TRISFbits	set	3974
   267   000000                     _LATFbits	set	3966
   268   000000                     _LATHbits	set	3968
   269   000000                     _SSP2CON2bits	set	3802
   270   000000                     _RX4PPS	set	3605
   271   000000                     _RC0PPS	set	3682
   272   000000                     _RC7PPS	set	3689
   273   000000                     _RE2PPS	set	3700
   274   000000                     _LATAbits	set	3961
   275   000000                     _LATEbits	set	3965
   276   000000                     _LATGbits	set	3967
   277   000000                     _TRISAbits	set	3969
   278   000000                     _TRISEbits	set	3973
   279   000000                     _TRISGbits	set	3975
   280   000000                     _T2PR	set	4028
   281   000000                     _T2CONbits	set	4029
   282   000000                     _TRISHbits	set	3976
   283   000000                     _CCPR2H	set	4006
   284   000000                     _CCPR1H	set	4010
   285   000000                     _TRISCbits	set	3971
   286   000000                     _TRISDbits	set	3972
   287   000000                     _LATCbits	set	3963
   288   000000                     _LATDbits	set	3964
   289   000000                     _RE4PPS	set	3702
   290   000000                     _RG6PPS	set	3720
   291   000000                     _RD5PPS	set	3695
   292   000000                     _ANSELDbits	set	3751
   293   000000                     _SSP2ADD	set	3798
   294   000000                     _SSP2CON1bits	set	3801
   295   000000                     _RC4REG	set	3811
   296   000000                     _SP4BRGL	set	3813
   297   000000                     _TX4STAbits	set	3816
   298   000000                     _BAUD4CONbits	set	3817
   299   000000                     _CCPR4H	set	3873
   300   000000                     _CCPR3H	set	3877
   301   000000                     _INTCONbits	set	4082
   302   000000                     _T2CLKCONbits	set	4031
   303   000000                     _T2HLTbits	set	4030
   304   000000                     _CCP1CONbits	set	4011
   305   000000                     _CCPTMRS0bits	set	4013
   306   000000                     _CCP2CONbits	set	4007
   307   000000                     _CCP3CONbits	set	3878
   308   000000                     _CCP4CONbits	set	3874
   309   000000                     _SSP2CLKPPS	set	3612
   310   000000                     _SSP2DATPPS	set	3613
   311   000000                     _PIE4bits	set	3629
   312   000000                     _PIR4bits	set	3639
   313   000000                     _SSP2CON2	set	3802
   314   000000                     _SSP2STAT	set	3800
   315   000000                     _SSP2BUF	set	3797
   316   000000                     _RD6PPS	set	3696
   317                           
   318                           	psect	smallconst
   319   000E00                     __psmallconst:
   320                           	callstack 0
   321   000E00  00                 	db	0
   322   000E01  43                 	db	67	;'C'
   323   000E02  61                 	db	97	;'a'
   324   000E03  6C                 	db	108	;'l'
   325   000E04  69                 	db	105	;'i'
   326   000E05  62                 	db	98	;'b'
   327   000E06  72                 	db	114	;'r'
   328   000E07  61                 	db	97	;'a'
   329   000E08  74                 	db	116	;'t'
   330   000E09  69                 	db	105	;'i'
   331   000E0A  6E                 	db	110	;'n'
   332   000E0B  67                 	db	103	;'g'
   333   000E0C  20                 	db	32
   334   000E0D  63                 	db	99	;'c'
   335   000E0E  6F                 	db	111	;'o'
   336   000E0F  6C                 	db	108	;'l'
   337   000E10  6F                 	db	111	;'o'
   338   000E11  72                 	db	114	;'r'
   339   000E12  3A                 	db	58	;':'
   340   000E13  00                 	db	0
   341   000E14                     STR_2:
   342   000E14  4E                 	db	78	;'N'
   343   000E15  61                 	db	97	;'a'
   344   000E16  6D                 	db	109	;'m'
   345   000E17  65                 	db	101	;'e'
   346   000E18  3A                 	db	58	;':'
   347   000E19  20                 	db	32
   348   000E1A  00                 	db	0
   349   000E1B                     STR_6:
   350   000E1B  47                 	db	71	;'G'
   351   000E1C  72                 	db	114	;'r'
   352   000E1D  65                 	db	101	;'e'
   353   000E1E  65                 	db	101	;'e'
   354   000E1F  6E                 	db	110	;'n'
   355   000E20  3A                 	db	58	;':'
   356   000E21  00                 	db	0
   357   000E22                     STR_10:
   358   000E22  43                 	db	67	;'C'
   359   000E23  6C                 	db	108	;'l'
   360   000E24  65                 	db	101	;'e'
   361   000E25  61                 	db	97	;'a'
   362   000E26  72                 	db	114	;'r'
   363   000E27  3A                 	db	58	;':'
   364   000E28  00                 	db	0
   365   000E29                     STR_8:
   366   000E29  42                 	db	66	;'B'
   367   000E2A  6C                 	db	108	;'l'
   368   000E2B  75                 	db	117	;'u'
   369   000E2C  65                 	db	101	;'e'
   370   000E2D  3A                 	db	58	;':'
   371   000E2E  00                 	db	0
   372   000E2F                     STR_4:
   373   000E2F  52                 	db	82	;'R'
   374   000E30  65                 	db	101	;'e'
   375   000E31  64                 	db	100	;'d'
   376   000E32  3A                 	db	58	;':'
   377   000E33  00                 	db	0
   378   000E34                     STR_3:
   379   000E34  25                 	db	37
   380   000E35  6C                 	db	108	;'l'
   381   000E36  64                 	db	100	;'d'
   382   000E37  00                 	db	0
   383   000E38                     STR_11:
   384   000E38  0A                 	db	10
   385   000E39  00                 	db	0
   386   000E3A                     STR_12:
   387   000E3A  0D                 	db	13
   388   000E3B  00                 	db	0
   389   000E3C  00                 	db	0	; dummy byte at the end
   390   000000                     
   391                           ; #config settings
   392                           
   393                           	psect	cinit
   394   0025BA                     __pcinit:
   395                           	callstack 0
   396   0025BA                     start_initialization:
   397                           	callstack 0
   398   0025BA                     __initialization:
   399                           	callstack 0
   400                           
   401                           ; Initialize objects allocated to BANK2 (25 bytes)
   402                           ; load TBLPTR registers with __pidataBANK2
   403   0025BA  0ECC               	movlw	low __pidataBANK2
   404   0025BC  6EF6               	movwf	tblptrl,c
   405   0025BE  0E2B               	movlw	high __pidataBANK2
   406   0025C0  6EF7               	movwf	tblptrh,c
   407   0025C2  0E00               	movlw	low (__pidataBANK2 shr (0+16))
   408   0025C4  6EF8               	movwf	tblptru,c
   409   0025C6  EE02  F0E1         	lfsr	0,__pdataBANK2
   410   0025CA  EE10 F019          	lfsr	1,25
   411   0025CE                     copy_data0:
   412   0025CE  0009               	tblrd		*+
   413   0025D0  CFF5 FFEE          	movff	tablat,postinc0
   414   0025D4  50E5               	movf	postdec1,w,c
   415   0025D6  50E1               	movf	fsr1l,w,c
   416   0025D8  E1FA               	bnz	copy_data0
   417                           
   418                           ; Initialize objects allocated to BANK1 (208 bytes)
   419                           ; load TBLPTR registers with __pidataBANK1
   420   0025DA  0E3A               	movlw	low __pidataBANK1
   421   0025DC  6EF6               	movwf	tblptrl,c
   422   0025DE  0E22               	movlw	high __pidataBANK1
   423   0025E0  6EF7               	movwf	tblptrh,c
   424   0025E2  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   425   0025E4  6EF8               	movwf	tblptru,c
   426   0025E6  EE01  F000         	lfsr	0,__pdataBANK1
   427   0025EA  EE10 F0D0          	lfsr	1,208
   428   0025EE                     copy_data1:
   429   0025EE  0009               	tblrd		*+
   430   0025F0  CFF5 FFEE          	movff	tablat,postinc0
   431   0025F4  50E5               	movf	postdec1,w,c
   432   0025F6  50E1               	movf	fsr1l,w,c
   433   0025F8  E1FA               	bnz	copy_data1
   434                           
   435                           ; Clear objects allocated to BANK4 (200 bytes)
   436   0025FA  EE04  F000         	lfsr	0,__pbssBANK4
   437   0025FE  0EC8               	movlw	200
   438   002600                     clear_0:
   439   002600  6AEE               	clrf	postinc0,c
   440   002602  06E8               	decf	wreg,f,c
   441   002604  E1FD               	bnz	clear_0
   442                           
   443                           ; Clear objects allocated to BANK3 (92 bytes)
   444   002606  EE03  F000         	lfsr	0,__pbssBANK3
   445   00260A  0E5C               	movlw	92
   446   00260C                     clear_1:
   447   00260C  6AEE               	clrf	postinc0,c
   448   00260E  06E8               	decf	wreg,f,c
   449   002610  E1FD               	bnz	clear_1
   450                           
   451                           ; Clear objects allocated to BANK2 (225 bytes)
   452   002612  EE02  F000         	lfsr	0,__pbssBANK2
   453   002616  0EE1               	movlw	225
   454   002618                     clear_2:
   455   002618  6AEE               	clrf	postinc0,c
   456   00261A  06E8               	decf	wreg,f,c
   457   00261C  E1FD               	bnz	clear_2
   458                           
   459                           ; Clear objects allocated to BANK1 (32 bytes)
   460   00261E  EE01  F0D0         	lfsr	0,__pbssBANK1
   461   002622  0E20               	movlw	32
   462   002624                     clear_3:
   463   002624  6AEE               	clrf	postinc0,c
   464   002626  06E8               	decf	wreg,f,c
   465   002628  E1FD               	bnz	clear_3
   466                           
   467                           ; Clear objects allocated to BANK0 (6 bytes)
   468   00262A  0100               	movlb	0
   469   00262C  6BF9               	clrf	(__pbssBANK0+5)& (0+255),b
   470   00262E  6BF8               	clrf	(__pbssBANK0+4)& (0+255),b
   471   002630  6BF7               	clrf	(__pbssBANK0+3)& (0+255),b
   472   002632  6BF6               	clrf	(__pbssBANK0+2)& (0+255),b
   473   002634  6BF5               	clrf	(__pbssBANK0+1)& (0+255),b
   474   002636  6BF4               	clrf	__pbssBANK0& (0+255),b
   475                           
   476                           ; Clear objects allocated to COMRAM (3 bytes)
   477   002638  6A59               	clrf	(__pbssCOMRAM+2)& (0+255),c
   478   00263A  6A58               	clrf	(__pbssCOMRAM+1)& (0+255),c
   479   00263C  6A57               	clrf	__pbssCOMRAM& (0+255),c
   480   00263E                     end_of_initialization:
   481                           	callstack 0
   482   00263E                     __end_of__initialization:
   483                           	callstack 0
   484   00263E  905A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   485   002640  925A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   486   002642  0100               	movlb	0
   487   002644  EF62  F013         	goto	_main	;jump to C main() function
   488                           
   489                           	psect	bssCOMRAM
   490   000057                     __pbssCOMRAM:
   491                           	callstack 0
   492   000057                     _TxBufReadCnt:
   493                           	callstack 0
   494   000057                     	ds	1
   495   000058                     _TxBufWriteCnt:
   496                           	callstack 0
   497   000058                     	ds	1
   498   000059                     _RxBufWriteCnt:
   499                           	callstack 0
   500   000059                     	ds	1
   501                           
   502                           	psect	bssBANK0
   503   0000F4                     __pbssBANK0:
   504                           	callstack 0
   505   0000F4                     _pos:
   506                           	callstack 0
   507   0000F4                     	ds	2
   508   0000F6                     _readingColor:
   509                           	callstack 0
   510   0000F6                     	ds	2
   511   0000F8                     _flags:
   512                           	callstack 0
   513   0000F8                     	ds	1
   514   0000F9                     _RxBufReadCnt:
   515                           	callstack 0
   516   0000F9                     	ds	1
   517                           
   518                           	psect	bssBANK1
   519   0001D0                     __pbssBANK1:
   520                           	callstack 0
   521   0001D0                     _EUSART4RXbuf:
   522                           	callstack 0
   523   0001D0                     	ds	20
   524   0001E4                     _width:
   525                           	callstack 0
   526   0001E4                     	ds	2
   527   0001E6                     _prec:
   528                           	callstack 0
   529   0001E6                     	ds	2
   530   0001E8                     _squaresb4:
   531                           	callstack 0
   532   0001E8                     	ds	2
   533   0001EA                     _count:
   534                           	callstack 0
   535   0001EA                     	ds	2
   536   0001EC                     _newColorFound:
   537                           	callstack 0
   538   0001EC                     	ds	2
   539   0001EE                     _finished:
   540                           	callstack 0
   541   0001EE                     	ds	2
   542                           
   543                           	psect	dataBANK1
   544   000100                     __pdataBANK1:
   545                           	callstack 0
   546   000100                     _whiteC:
   547                           	callstack 0
   548   000100                     	ds	25
   549   000119                     _lightBlue:
   550                           	callstack 0
   551   000119                     	ds	25
   552   000132                     _orange:
   553                           	callstack 0
   554   000132                     	ds	25
   555   00014B                     _pink:
   556                           	callstack 0
   557   00014B                     	ds	25
   558   000164                     _yellow:
   559                           	callstack 0
   560   000164                     	ds	25
   561   00017D                     _blue:
   562                           	callstack 0
   563   00017D                     	ds	25
   564   000196                     _green:
   565                           	callstack 0
   566   000196                     	ds	25
   567   0001AF                     _red:
   568                           	callstack 0
   569   0001AF                     	ds	25
   570   0001C8                     _minPow:
   571                           	callstack 0
   572   0001C8                     	ds	2
   573   0001CA                     _maxPowR:
   574                           	callstack 0
   575   0001CA                     	ds	2
   576   0001CC                     _maxPowL:
   577                           	callstack 0
   578   0001CC                     	ds	2
   579   0001CE                     _incidenceThresh:
   580                           	callstack 0
   581   0001CE                     	ds	2
   582                           
   583                           	psect	bssBANK2
   584   000200                     __pbssBANK2:
   585                           	callstack 0
   586   000200                     _calibColors:
   587                           	callstack 0
   588   000200                     	ds	225
   589                           
   590                           	psect	dataBANK2
   591   0002E1                     __pdataBANK2:
   592                           	callstack 0
   593   0002E1                     _blackC:
   594                           	callstack 0
   595   0002E1                     	ds	25
   596                           
   597                           	psect	bssBANK3
   598   000300                     __pbssBANK3:
   599                           	callstack 0
   600   000300                     _EUSART4TXbuf:
   601                           	callstack 0
   602   000300                     	ds	60
   603   00033C                     _dbuf:
   604                           	callstack 0
   605   00033C                     	ds	32
   606                           
   607                           	psect	bssBANK4
   608   000400                     __pbssBANK4:
   609                           	callstack 0
   610   000400                     _hist:
   611                           	callstack 0
   612   000400                     	ds	200
   613                           
   614                           	psect	cstackBANK3
   615   00035C                     __pcstackBANK3:
   616                           	callstack 0
   617   00035C                     away@currColor:
   618                           	callstack 0
   619                           
   620                           ; 25 bytes @ 0x0
   621   00035C                     	ds	25
   622                           
   623                           	psect	cstackBANK0
   624   000060                     __pcstackBANK0:
   625                           	callstack 0
   626   000060                     checkColor@currColor:
   627                           	callstack 0
   628   000060                     serialColor@testColor:
   629                           	callstack 0
   630                           
   631                           ; 50 bytes @ 0x0
   632   000060                     	ds	25
   633   000079                     checkColor@prevAbsDiff:
   634                           	callstack 0
   635                           
   636                           ; 4 bytes @ 0x19
   637   000079                     	ds	4
   638   00007D                     checkColor@absDiff:
   639                           	callstack 0
   640                           
   641                           ; 4 bytes @ 0x1D
   642   00007D                     	ds	4
   643   000081                     checkColor@i:
   644                           	callstack 0
   645                           
   646                           ; 2 bytes @ 0x21
   647   000081                     	ds	2
   648   000083                     checkColor@Vals:
   649                           	callstack 0
   650                           
   651                           ; 16 bytes @ 0x23
   652   000083                     	ds	16
   653   000093                     checkColor@colorDiff:
   654                           	callstack 0
   655                           
   656                           ; 16 bytes @ 0x33
   657   000093                     	ds	16
   658   0000A3                     color2instruction@mL:
   659                           	callstack 0
   660   0000A3                     checkWhite@tmp:
   661                           	callstack 0
   662                           
   663                           ; 25 bytes @ 0x43
   664   0000A3                     	ds	8
   665   0000AB                     color2instruction@mR:
   666                           	callstack 0
   667                           
   668                           ; 8 bytes @ 0x4B
   669   0000AB                     	ds	8
   670   0000B3                     color2instruction@currColor:
   671                           	callstack 0
   672                           
   673                           ; 25 bytes @ 0x53
   674   0000B3                     	ds	25
   675   0000CC                     color2instruction@hist:
   676                           	callstack 0
   677                           
   678                           ; 2 bytes @ 0x6C
   679   0000CC                     	ds	2
   680   0000CE                     ??_color2instruction:
   681                           
   682                           ; 1 bytes @ 0x6E
   683   0000CE                     	ds	2
   684   0000D0                     away@mL:
   685                           	callstack 0
   686                           
   687                           ; 8 bytes @ 0x70
   688   0000D0                     	ds	8
   689   0000D8                     away@mR:
   690                           	callstack 0
   691                           
   692                           ; 8 bytes @ 0x78
   693   0000D8                     	ds	8
   694   0000E0                     away@hist:
   695                           	callstack 0
   696                           
   697                           ; 2 bytes @ 0x80
   698   0000E0                     	ds	2
   699   0000E2                     ??_away:
   700                           
   701                           ; 1 bytes @ 0x82
   702   0000E2                     	ds	2
   703   0000E4                     main@mL:
   704                           	callstack 0
   705                           
   706                           ; 8 bytes @ 0x84
   707   0000E4                     	ds	8
   708   0000EC                     main@mR:
   709                           	callstack 0
   710                           
   711                           ; 8 bytes @ 0x8C
   712   0000EC                     	ds	8
   713                           
   714                           	psect	cstackCOMRAM
   715   000001                     __pcstackCOMRAM:
   716                           	callstack 0
   717   000001                     ??_getCharFromTxBuf:
   718   000001                     
   719                           ; 1 bytes @ 0x0
   720   000001                     	ds	2
   721   000003                     ??_HighISR:
   722                           
   723                           ; 1 bytes @ 0x2
   724   000003                     	ds	2
   725   000005                     ??_I2C_2_Master_Idle:
   726   000005                     ?___wmul:
   727                           	callstack 0
   728   000005                     ?___awdiv:
   729                           	callstack 0
   730   000005                     ?___almod:
   731                           	callstack 0
   732   000005                     ?_mLinit:
   733                           	callstack 0
   734   000005                     ?_mRinit:
   735                           	callstack 0
   736   000005                     triLED_tog@state:
   737                           	callstack 0
   738   000005                     storeSequence@history:
   739                           	callstack 0
   740   000005                     initDCmotorsPWM@PWMperiod:
   741                           	callstack 0
   742   000005                     sendCharSerial4@charToSend:
   743                           	callstack 0
   744   000005                     ___wmul@multiplier:
   745                           	callstack 0
   746   000005                     ___awdiv@dividend:
   747                           	callstack 0
   748   000005                     fputc@c:
   749                           	callstack 0
   750   000005                     ___almod@dividend:
   751                           	callstack 0
   752                           
   753                           ; 4 bytes @ 0x4
   754   000005                     	ds	1
   755   000006                     ??_I2C_2_Master_Read:
   756   000006                     I2C_2_Master_Write@data_byte:
   757                           	callstack 0
   758   000006                     storeSequence@angle:
   759                           	callstack 0
   760   000006                     sendStringSerial4@string:
   761                           	callstack 0
   762                           
   763                           ; 2 bytes @ 0x5
   764   000006                     	ds	1
   765   000007                     color_writetoaddr@value:
   766                           	callstack 0
   767   000007                     I2C_2_Master_Read@ack:
   768                           	callstack 0
   769   000007                     fputc@fp:
   770                           	callstack 0
   771   000007                     ___wmul@multiplicand:
   772                           	callstack 0
   773   000007                     ___awdiv@divisor:
   774                           	callstack 0
   775                           
   776                           ; 2 bytes @ 0x6
   777   000007                     	ds	1
   778   000008                     ??_fputc:
   779   000008                     color_writetoaddr@address:
   780                           	callstack 0
   781   000008                     I2C_2_Master_Read@tmp:
   782                           	callstack 0
   783   000008                     storeSequence@polarity:
   784                           	callstack 0
   785                           
   786                           ; 2 bytes @ 0x7
   787   000008                     	ds	1
   788   000009                     ??_color_click_init:
   789   000009                     color_read_all@readVals:
   790                           	callstack 0
   791   000009                     ___awdiv@counter:
   792                           	callstack 0
   793   000009                     ___wmul@product:
   794                           	callstack 0
   795   000009                     ___almod@divisor:
   796                           	callstack 0
   797                           
   798                           ; 4 bytes @ 0x8
   799   000009                     	ds	1
   800   00000A                     ??_color_read_all:
   801   00000A                     ___awdiv@sign:
   802                           	callstack 0
   803   00000A                     storeSequence@direction:
   804                           	callstack 0
   805                           
   806                           ; 2 bytes @ 0x9
   807   00000A                     	ds	1
   808   00000B                     ?___aldiv:
   809                           	callstack 0
   810   00000B                     ___awdiv@quotient:
   811                           	callstack 0
   812   00000B                     ___aldiv@dividend:
   813                           	callstack 0
   814                           
   815                           ; 4 bytes @ 0xA
   816   00000B                     	ds	1
   817   00000C                     storeSequence@squaresb4:
   818                           	callstack 0
   819                           
   820                           ; 2 bytes @ 0xB
   821   00000C                     	ds	1
   822   00000D                     setMotorPWM@m:
   823                           	callstack 0
   824   00000D                     ___almod@counter:
   825                           	callstack 0
   826   00000D                     mLinit@mL:
   827                           	callstack 0
   828   00000D                     mRinit@mR:
   829                           	callstack 0
   830                           
   831                           ; 8 bytes @ 0xC
   832   00000D                     	ds	1
   833   00000E                     ??_setMotorPWM:
   834   00000E                     ___almod@sign:
   835                           	callstack 0
   836   00000E                     storeSequence@squares:
   837                           	callstack 0
   838                           
   839                           ; 2 bytes @ 0xD
   840   00000E                     	ds	1
   841   00000F                     ?_abs:
   842                           	callstack 0
   843   00000F                     abs@a:
   844                           	callstack 0
   845   00000F                     ___aldiv@divisor:
   846                           	callstack 0
   847                           
   848                           ; 4 bytes @ 0xE
   849   00000F                     	ds	1
   850   000010                     
   851                           ; 1 bytes @ 0xF
   852   000010                     	ds	1
   853   000011                     ??_abs:
   854   000011                     setMotorPWM@posDuty:
   855                           	callstack 0
   856   000011                     color_read_all@tmp:
   857                           	callstack 0
   858                           
   859                           ; 16 bytes @ 0x10
   860   000011                     	ds	1
   861   000012                     setMotorPWM@negDuty:
   862                           	callstack 0
   863                           
   864                           ; 1 bytes @ 0x11
   865   000012                     	ds	1
   866   000013                     stop@mL:
   867                           	callstack 0
   868   000013                     turnLeft@mL:
   869                           	callstack 0
   870   000013                     turnRight@mL:
   871                           	callstack 0
   872   000013                     goStraight@mL:
   873                           	callstack 0
   874   000013                     bump@mL:
   875                           	callstack 0
   876   000013                     ___aldiv@counter:
   877                           	callstack 0
   878                           
   879                           ; 1 bytes @ 0x12
   880   000013                     	ds	1
   881   000014                     stop@mR:
   882                           	callstack 0
   883   000014                     turnLeft@mR:
   884                           	callstack 0
   885   000014                     turnRight@mR:
   886                           	callstack 0
   887   000014                     goStraight@mR:
   888                           	callstack 0
   889   000014                     bump@mR:
   890                           	callstack 0
   891   000014                     ___aldiv@sign:
   892                           	callstack 0
   893                           
   894                           ; 1 bytes @ 0x13
   895   000014                     	ds	1
   896   000015                     turnLeft@iter:
   897                           	callstack 0
   898   000015                     turnRight@iter:
   899                           	callstack 0
   900   000015                     goStraight@direction:
   901                           	callstack 0
   902   000015                     bump@direction:
   903                           	callstack 0
   904   000015                     ___aldiv@quotient:
   905                           	callstack 0
   906                           
   907                           ; 4 bytes @ 0x14
   908   000015                     	ds	2
   909   000017                     ??_bump:
   910   000017                     ??_turnLeft:
   911   000017                     ??_turnRight:
   912   000017                     goStraight@squares:
   913                           	callstack 0
   914                           
   915                           ; 2 bytes @ 0x16
   916   000017                     	ds	2
   917   000019                     ??_goStraight:
   918   000019                     vfpfcnvrt@fp:
   919                           	callstack 0
   920   000019                     turnLeft@i:
   921                           	callstack 0
   922   000019                     turnRight@i:
   923                           	callstack 0
   924                           
   925                           ; 2 bytes @ 0x18
   926   000019                     	ds	1
   927   00001A                     vfpfcnvrt@fmt:
   928                           	callstack 0
   929                           
   930                           ; 1 bytes @ 0x19
   931   00001A                     	ds	1
   932   00001B                     vfpfcnvrt@ap:
   933                           	callstack 0
   934   00001B                     goStraight@i:
   935                           	callstack 0
   936   00001B                     turn@mL:
   937                           	callstack 0
   938                           
   939                           ; 8 bytes @ 0x1A
   940   00001B                     	ds	1
   941   00001C                     ??_vfpfcnvrt:
   942                           
   943                           ; 1 bytes @ 0x1B
   944   00001C                     	ds	2
   945   00001E                     vfpfcnvrt@done:
   946                           	callstack 0
   947                           
   948                           ; 1 bytes @ 0x1D
   949   00001E                     	ds	1
   950   00001F                     vfpfcnvrt@convarg:
   951                           	callstack 0
   952                           
   953                           ; 4 bytes @ 0x1E
   954   00001F                     	ds	2
   955   000021                     ?_checkColor:
   956                           	callstack 0
   957   000021                     checkIncidence@tmp:
   958                           	callstack 0
   959                           
   960                           ; 16 bytes @ 0x20
   961   000021                     	ds	2
   962   000023                     vfpfcnvrt@cp:
   963                           	callstack 0
   964   000023                     turn@mR:
   965                           	callstack 0
   966                           
   967                           ; 8 bytes @ 0x22
   968   000023                     	ds	1
   969   000024                     vfpfcnvrt@c:
   970                           	callstack 0
   971                           
   972                           ; 1 bytes @ 0x23
   973   000024                     	ds	1
   974   000025                     ?_vfprintf:
   975                           	callstack 0
   976   000025                     vfprintf@fp:
   977                           	callstack 0
   978                           
   979                           ; 1 bytes @ 0x24
   980   000025                     	ds	1
   981   000026                     vfprintf@fmt:
   982                           	callstack 0
   983                           
   984                           ; 1 bytes @ 0x25
   985   000026                     	ds	1
   986   000027                     vfprintf@ap:
   987                           	callstack 0
   988                           
   989                           ; 1 bytes @ 0x26
   990   000027                     	ds	1
   991   000028                     vfprintf@cfmt:
   992                           	callstack 0
   993                           
   994                           ; 1 bytes @ 0x27
   995   000028                     	ds	1
   996   000029                     ?_sprintf:
   997                           	callstack 0
   998   000029                     sprintf@s:
   999                           	callstack 0
  1000                           
  1001                           ; 1 bytes @ 0x28
  1002   000029                     	ds	1
  1003   00002A                     sprintf@fmt:
  1004                           	callstack 0
  1005                           
  1006                           ; 1 bytes @ 0x29
  1007   00002A                     	ds	1
  1008   00002B                     turn@iter:
  1009                           	callstack 0
  1010                           
  1011                           ; 2 bytes @ 0x2A
  1012   00002B                     	ds	2
  1013   00002D                     turn@polarity:
  1014                           	callstack 0
  1015                           
  1016                           ; 2 bytes @ 0x2C
  1017   00002D                     	ds	2
  1018   00002F                     sprintf@ap:
  1019                           	callstack 0
  1020   00002F                     useSequence@mL:
  1021                           	callstack 0
  1022                           
  1023                           ; 8 bytes @ 0x2E
  1024   00002F                     	ds	1
  1025   000030                     sprintf@f:
  1026                           	callstack 0
  1027                           
  1028                           ; 12 bytes @ 0x2F
  1029   000030                     	ds	7
  1030   000037                     useSequence@mR:
  1031                           	callstack 0
  1032                           
  1033                           ; 8 bytes @ 0x36
  1034   000037                     	ds	3
  1035   00003A                     ??_checkColor:
  1036                           
  1037                           ; 1 bytes @ 0x39
  1038   00003A                     	ds	2
  1039   00003C                     serialColor@currColor:
  1040                           	callstack 0
  1041                           
  1042                           ; 25 bytes @ 0x3B
  1043   00003C                     	ds	3
  1044   00003F                     useSequence@history:
  1045                           	callstack 0
  1046                           
  1047                           ; 1 bytes @ 0x3E
  1048   00003F                     	ds	1
  1049   000040                     ??_useSequence:
  1050                           
  1051                           ; 1 bytes @ 0x3F
  1052   000040                     	ds	2
  1053   000042                     useSequence@i:
  1054                           	callstack 0
  1055                           
  1056                           ; 2 bytes @ 0x41
  1057   000042                     	ds	2
  1058   000044                     home@mL:
  1059                           	callstack 0
  1060                           
  1061                           ; 8 bytes @ 0x43
  1062   000044                     	ds	8
  1063   00004C                     home@mR:
  1064                           	callstack 0
  1065                           
  1066                           ; 8 bytes @ 0x4B
  1067   00004C                     	ds	8
  1068   000054                     home@hist:
  1069                           	callstack 0
  1070                           
  1071                           ; 1 bytes @ 0x53
  1072   000054                     	ds	1
  1073   000055                     ??_serialColor:
  1074   000055                     
  1075                           ; 1 bytes @ 0x54
  1076   000055                     	ds	2
  1077   000057                     
  1078                           ; 1 bytes @ 0x56
  1079 ;;
  1080 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1081 ;;
  1082 ;; *************** function _main *****************
  1083 ;; Defined at:
  1084 ;;		line 27 in file "main.c"
  1085 ;; Parameters:    Size  Location     Type
  1086 ;;		None
  1087 ;; Auto vars:     Size  Location     Type
  1088 ;;  currColor      25    0        struct color
  1089 ;;  Vals           16    0        struct RGBC
  1090 ;;  mR              8  140[BANK0 ] struct DC_motor
  1091 ;;  mL              8  132[BANK0 ] struct DC_motor
  1092 ;; Return value:  Size  Location     Type
  1093 ;;                  1    wreg      void 
  1094 ;; Registers used:
  1095 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1096 ;; Tracked objects:
  1097 ;;		On entry : 0/0
  1098 ;;		On exit  : 0/0
  1099 ;;		Unchanged: 0/0
  1100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1102 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1104 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1105 ;;Total ram usage:       16 bytes
  1106 ;; Hardware stack levels required when called: 10
  1107 ;; This function calls:
  1108 ;;		_I2C_2_Master_Init
  1109 ;;		_Interrupts_init
  1110 ;;		_away
  1111 ;;		_color_click_init
  1112 ;;		_initCalibColors
  1113 ;;		_initDCmotorsPWM
  1114 ;;		_initUSART4
  1115 ;;		_mLinit
  1116 ;;		_mRinit
  1117 ;; This function is called by:
  1118 ;;		Startup code after reset
  1119 ;; This function uses a non-reentrant model
  1120 ;;
  1121                           
  1122                           	psect	text0
  1123   0026C4                     __ptext0:
  1124                           	callstack 0
  1125   0026C4                     _main:
  1126                           	callstack 21
  1127   0026C4                     
  1128                           ;main.c: 29:     initUSART4();
  1129   0026C4  ECC5  F015         	call	_initUSART4	;wreg free
  1130   0026C8                     
  1131                           ;main.c: 31:     Interrupts_init();
  1132   0026C8  EC11  F016         	call	_Interrupts_init	;wreg free
  1133   0026CC                     
  1134                           ;main.c: 33:     I2C_2_Master_Init();
  1135   0026CC  EC75  F015         	call	_I2C_2_Master_Init	;wreg free
  1136   0026D0                     
  1137                           ;main.c: 35:     color_click_init();
  1138   0026D0  ECFA  F014         	call	_color_click_init	;wreg free
  1139   0026D4                     
  1140                           ;main.c: 37:     initCalibColors();
  1141   0026D4  EC3C  F012         	call	_initCalibColors	;wreg free
  1142   0026D8                     
  1143                           ;main.c: 39:     DC_motor mL,mR;;main.c: 41:     mL = mLinit();
  1144   0026D8  ECE0  F014         	call	_mLinit	;wreg free
  1145   0026DC  EE20  F0E4         	lfsr	2,main@mL
  1146   0026E0  0E07               	movlw	7
  1147   0026E2                     u3571:
  1148   0026E2  CFEB FFDB          	movff	plusw0,plusw2
  1149   0026E6  06E8               	decf	wreg,f,c
  1150   0026E8  E2FC               	bc	u3571
  1151   0026EA                     
  1152                           ;main.c: 42:     mR = mRinit();
  1153   0026EA  ECC6  F014         	call	_mRinit	;wreg free
  1154   0026EE  EE20  F0EC         	lfsr	2,main@mR
  1155   0026F2  0E07               	movlw	7
  1156   0026F4                     u3581:
  1157   0026F4  CFEB FFDB          	movff	plusw0,plusw2
  1158   0026F8  06E8               	decf	wreg,f,c
  1159   0026FA  E2FC               	bc	u3581
  1160   0026FC                     
  1161                           ;main.c: 44:     initDCmotorsPWM(99);
  1162   0026FC  0E63               	movlw	99
  1163   0026FE  EC8E  F012         	call	_initDCmotorsPWM
  1164   002702                     l4318:
  1165                           
  1166                           ;main.c: 77:         away(mL,mR,&hist);
  1167   002702  EE20  F0E4         	lfsr	2,main@mL
  1168   002706  EE00  F0D0         	lfsr	0,away@mL
  1169   00270A  0E07               	movlw	7
  1170   00270C                     u3591:
  1171   00270C  CFDB FFEB          	movff	plusw2,plusw0
  1172   002710  06E8               	decf	wreg,f,c
  1173   002712  E2FC               	bc	u3591
  1174   002714  EE20  F0EC         	lfsr	2,main@mR
  1175   002718  EE00  F0D8         	lfsr	0,away@mR
  1176   00271C  0E07               	movlw	7
  1177   00271E                     u3601:
  1178   00271E  CFDB FFEB          	movff	plusw2,plusw0
  1179   002722  06E8               	decf	wreg,f,c
  1180   002724  E2FC               	bc	u3601
  1181   002726  0E00               	movlw	low _hist
  1182   002728  0100               	movlb	0	; () banked
  1183   00272A  6FE0               	movwf	away@hist& (0+255),b
  1184   00272C  0E04               	movlw	high _hist
  1185   00272E  6FE1               	movwf	(away@hist+1)& (0+255),b
  1186   002730  ECD0  F013         	call	_away	;wreg free
  1187   002734  EF81  F013         	goto	l4318
  1188   002738  EF27  F000         	goto	start
  1189   00273C                     __end_of_main:
  1190                           	callstack 0
  1191                           
  1192 ;; *************** function _mRinit *****************
  1193 ;; Defined at:
  1194 ;;		line 18 in file "breakup.c"
  1195 ;; Parameters:    Size  Location     Type
  1196 ;;		None
  1197 ;; Auto vars:     Size  Location     Type
  1198 ;;  mR              8   12[COMRAM] struct DC_motor
  1199 ;; Return value:  Size  Location     Type
  1200 ;;                  8    4[COMRAM] struct DC_motor
  1201 ;; Registers used:
  1202 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
  1203 ;; Tracked objects:
  1204 ;;		On entry : 0/0
  1205 ;;		On exit  : 0/0
  1206 ;;		Unchanged: 0/0
  1207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1208 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1209 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1211 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1212 ;;Total ram usage:       16 bytes
  1213 ;; Hardware stack levels used: 1
  1214 ;; Hardware stack levels required when called: 2
  1215 ;; This function calls:
  1216 ;;		Nothing
  1217 ;; This function is called by:
  1218 ;;		_main
  1219 ;; This function uses a non-reentrant model
  1220 ;;
  1221                           
  1222                           	psect	text1
  1223   00298C                     __ptext1:
  1224                           	callstack 0
  1225   00298C                     _mRinit:
  1226                           	callstack 28
  1227   00298C                     
  1228                           ;breakup.c: 20:     DC_motor mR;;breakup.c: 21:     mR.power=0;
  1229   00298C  0E00               	movlw	0
  1230   00298E  6E0D               	movwf	mRinit@mR^0,c
  1231                           
  1232                           ;breakup.c: 22:     mR.direction=1;
  1233   002990  0E01               	movlw	1
  1234   002992  6E0E               	movwf	(mRinit@mR+1)^0,c
  1235                           
  1236                           ;breakup.c: 23:     mR.brakemode=1;
  1237   002994  0E01               	movlw	1
  1238   002996  6E0F               	movwf	(mRinit@mR+2)^0,c
  1239   002998                     
  1240                           ;breakup.c: 24:     mR.posDutyHighByte=(unsigned char *)(&CCPR3H);
  1241   002998  0E25               	movlw	37
  1242   00299A  6E11               	movwf	(mRinit@mR+4)^0,c
  1243   00299C  0E0F               	movlw	15
  1244   00299E  6E12               	movwf	(mRinit@mR+5)^0,c
  1245   0029A0                     
  1246                           ;breakup.c: 25:     mR.negDutyHighByte=(unsigned char *)(&CCPR4H);
  1247   0029A0  0E21               	movlw	33
  1248   0029A2  6E13               	movwf	(mRinit@mR+6)^0,c
  1249   0029A4  0E0F               	movlw	15
  1250   0029A6  6E14               	movwf	(mRinit@mR+7)^0,c
  1251                           
  1252                           ;breakup.c: 26:     mR.PWMperiod=99;
  1253   0029A8  0E63               	movlw	99
  1254   0029AA  6E10               	movwf	(mRinit@mR+3)^0,c
  1255   0029AC                     
  1256                           ;breakup.c: 28:     return mR;
  1257   0029AC  EE20  F00D         	lfsr	2,mRinit@mR
  1258   0029B0  EE00  F005         	lfsr	0,?_mRinit
  1259   0029B4  0E07               	movlw	7
  1260   0029B6                     u3451:
  1261   0029B6  CFDB FFEB          	movff	plusw2,plusw0
  1262   0029BA  06E8               	decf	wreg,f,c
  1263   0029BC  E2FC               	bc	u3451
  1264   0029BE  0012               	return		;funcret
  1265   0029C0                     __end_of_mRinit:
  1266                           	callstack 0
  1267                           
  1268 ;; *************** function _mLinit *****************
  1269 ;; Defined at:
  1270 ;;		line 5 in file "breakup.c"
  1271 ;; Parameters:    Size  Location     Type
  1272 ;;		None
  1273 ;; Auto vars:     Size  Location     Type
  1274 ;;  mL              8   12[COMRAM] struct DC_motor
  1275 ;; Return value:  Size  Location     Type
  1276 ;;                  8    4[COMRAM] struct DC_motor
  1277 ;; Registers used:
  1278 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
  1279 ;; Tracked objects:
  1280 ;;		On entry : 0/0
  1281 ;;		On exit  : 0/0
  1282 ;;		Unchanged: 0/0
  1283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1284 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1285 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1287 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1288 ;;Total ram usage:       16 bytes
  1289 ;; Hardware stack levels used: 1
  1290 ;; Hardware stack levels required when called: 2
  1291 ;; This function calls:
  1292 ;;		Nothing
  1293 ;; This function is called by:
  1294 ;;		_main
  1295 ;; This function uses a non-reentrant model
  1296 ;;
  1297                           
  1298                           	psect	text2
  1299   0029C0                     __ptext2:
  1300                           	callstack 0
  1301   0029C0                     _mLinit:
  1302                           	callstack 28
  1303   0029C0                     
  1304                           ;breakup.c: 7:     DC_motor mL;;breakup.c: 8:     mL.power=0;
  1305   0029C0  0E00               	movlw	0
  1306   0029C2  6E0D               	movwf	mLinit@mL^0,c
  1307                           
  1308                           ;breakup.c: 9:     mL.direction=1;
  1309   0029C4  0E01               	movlw	1
  1310   0029C6  6E0E               	movwf	(mLinit@mL+1)^0,c
  1311                           
  1312                           ;breakup.c: 10:     mL.brakemode=1;
  1313   0029C8  0E01               	movlw	1
  1314   0029CA  6E0F               	movwf	(mLinit@mL+2)^0,c
  1315   0029CC                     
  1316                           ;breakup.c: 11:     mL.posDutyHighByte=(unsigned char *)(&CCPR1H);
  1317   0029CC  0EAA               	movlw	170
  1318   0029CE  6E11               	movwf	(mLinit@mL+4)^0,c
  1319   0029D0  0E0F               	movlw	15
  1320   0029D2  6E12               	movwf	(mLinit@mL+5)^0,c
  1321   0029D4                     
  1322                           ;breakup.c: 12:     mL.negDutyHighByte=(unsigned char *)(&CCPR2H);
  1323   0029D4  0EA6               	movlw	166
  1324   0029D6  6E13               	movwf	(mLinit@mL+6)^0,c
  1325   0029D8  0E0F               	movlw	15
  1326   0029DA  6E14               	movwf	(mLinit@mL+7)^0,c
  1327                           
  1328                           ;breakup.c: 13:     mL.PWMperiod=99;
  1329   0029DC  0E63               	movlw	99
  1330   0029DE  6E10               	movwf	(mLinit@mL+3)^0,c
  1331   0029E0                     
  1332                           ;breakup.c: 15:     return mL;
  1333   0029E0  EE20  F00D         	lfsr	2,mLinit@mL
  1334   0029E4  EE00  F005         	lfsr	0,?_mLinit
  1335   0029E8  0E07               	movlw	7
  1336   0029EA                     u3441:
  1337   0029EA  CFDB FFEB          	movff	plusw2,plusw0
  1338   0029EE  06E8               	decf	wreg,f,c
  1339   0029F0  E2FC               	bc	u3441
  1340   0029F2  0012               	return		;funcret
  1341   0029F4                     __end_of_mLinit:
  1342                           	callstack 0
  1343                           
  1344 ;; *************** function _initUSART4 *****************
  1345 ;; Defined at:
  1346 ;;		line 5 in file "serial.c"
  1347 ;; Parameters:    Size  Location     Type
  1348 ;;		None
  1349 ;; Auto vars:     Size  Location     Type
  1350 ;;		None
  1351 ;; Return value:  Size  Location     Type
  1352 ;;                  1    wreg      void 
  1353 ;; Registers used:
  1354 ;;		wreg, status,2
  1355 ;; Tracked objects:
  1356 ;;		On entry : 0/0
  1357 ;;		On exit  : 0/0
  1358 ;;		Unchanged: 0/0
  1359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1363 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1364 ;;Total ram usage:        0 bytes
  1365 ;; Hardware stack levels used: 1
  1366 ;; Hardware stack levels required when called: 2
  1367 ;; This function calls:
  1368 ;;		Nothing
  1369 ;; This function is called by:
  1370 ;;		_main
  1371 ;; This function uses a non-reentrant model
  1372 ;;
  1373                           
  1374                           	psect	text3
  1375   002B8A                     __ptext3:
  1376                           	callstack 0
  1377   002B8A                     _initUSART4:
  1378                           	callstack 28
  1379   002B8A                     
  1380                           ;serial.c: 9:     TRISCbits.TRISC1 = 1;
  1381   002B8A  8283               	bsf	131,1,c	;volatile
  1382                           
  1383                           ;serial.c: 10:     TRISCbits.TRISC0 = 1;
  1384   002B8C  8083               	bsf	131,0,c	;volatile
  1385   002B8E                     
  1386                           ;serial.c: 12:     RC0PPS = 0x12;
  1387   002B8E  0E12               	movlw	18
  1388   002B90  010E               	movlb	14	; () banked
  1389   002B92  6F62               	movwf	98,b	;volatile
  1390                           
  1391                           ;serial.c: 13:     RX4PPS = 0x11;
  1392   002B94  0E11               	movlw	17
  1393   002B96  6F15               	movwf	21,b	;volatile
  1394   002B98                     
  1395                           ; BSR set to: 14
  1396                           ;serial.c: 15:     BAUD4CONbits.BRG16 = 0;
  1397   002B98  97E9               	bcf	233,3,b	;volatile
  1398   002B9A                     
  1399                           ; BSR set to: 14
  1400                           ;serial.c: 16:     TX4STAbits.BRGH = 0;
  1401   002B9A  95E8               	bcf	232,2,b	;volatile
  1402                           
  1403                           ;serial.c: 17:     SP4BRGL = 103;
  1404   002B9C  0E67               	movlw	103
  1405   002B9E  6FE5               	movwf	229,b	;volatile
  1406                           
  1407                           ;serial.c: 18:     SP4BRGH = 0;
  1408   002BA0  0E00               	movlw	0
  1409   002BA2  6FE6               	movwf	230,b	;volatile
  1410   002BA4                     
  1411                           ; BSR set to: 14
  1412                           ;serial.c: 20:     RC4STAbits.CREN = 1;
  1413   002BA4  89E7               	bsf	231,4,b	;volatile
  1414   002BA6                     
  1415                           ; BSR set to: 14
  1416                           ;serial.c: 21:     RC4STAbits.SPEN = 1;
  1417   002BA6  8FE7               	bsf	231,7,b	;volatile
  1418   002BA8                     
  1419                           ; BSR set to: 14
  1420                           ;serial.c: 22:     TX4STAbits.TXEN = 1;
  1421   002BA8  8BE8               	bsf	232,5,b	;volatile
  1422   002BAA                     
  1423                           ; BSR set to: 14
  1424   002BAA  0012               	return		;funcret
  1425   002BAC                     __end_of_initUSART4:
  1426                           	callstack 0
  1427                           
  1428 ;; *************** function _initDCmotorsPWM *****************
  1429 ;; Defined at:
  1430 ;;		line 6 in file "dc_motor.c"
  1431 ;; Parameters:    Size  Location     Type
  1432 ;;  PWMperiod       1    wreg     unsigned char 
  1433 ;; Auto vars:     Size  Location     Type
  1434 ;;  PWMperiod       1    4[COMRAM] unsigned char 
  1435 ;; Return value:  Size  Location     Type
  1436 ;;                  1    wreg      void 
  1437 ;; Registers used:
  1438 ;;		wreg, status,2
  1439 ;; Tracked objects:
  1440 ;;		On entry : 0/0
  1441 ;;		On exit  : 0/0
  1442 ;;		Unchanged: 0/0
  1443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1445 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1447 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1448 ;;Total ram usage:        1 bytes
  1449 ;; Hardware stack levels used: 1
  1450 ;; Hardware stack levels required when called: 2
  1451 ;; This function calls:
  1452 ;;		Nothing
  1453 ;; This function is called by:
  1454 ;;		_main
  1455 ;; This function uses a non-reentrant model
  1456 ;;
  1457                           
  1458                           	psect	text4
  1459   00251C                     __ptext4:
  1460                           	callstack 0
  1461   00251C                     _initDCmotorsPWM:
  1462                           	callstack 28
  1463                           
  1464                           ; BSR set to: 14
  1465                           ;incstack = 0
  1466                           ;initDCmotorsPWM@PWMperiod stored from wreg
  1467   00251C  6E05               	movwf	initDCmotorsPWM@PWMperiod^0,c
  1468   00251E                     
  1469                           ;dc_motor.c: 6: void initDCmotorsPWM(unsigned char PWMperiod);dc_motor.c: 7: {;dc_motor.
      +                          c: 10:     LATDbits.LATD4=0;
  1470   00251E  987C               	bcf	124,4,c	;volatile
  1471                           
  1472                           ;dc_motor.c: 11:     TRISDbits.TRISD4=0;
  1473   002520  9884               	bcf	132,4,c	;volatile
  1474                           
  1475                           ;dc_motor.c: 13:     LATHbits.LATH0=0;
  1476   002522  9080               	bcf	128,0,c	;volatile
  1477                           
  1478                           ;dc_motor.c: 14:     TRISHbits.TRISH0=0;
  1479   002524  9088               	bcf	136,0,c	;volatile
  1480                           
  1481                           ;dc_motor.c: 16:     LATFbits.LATF0=0;
  1482   002526  907E               	bcf	126,0,c	;volatile
  1483                           
  1484                           ;dc_motor.c: 17:     TRISFbits.TRISF0=0;
  1485   002528  9086               	bcf	134,0,c	;volatile
  1486                           
  1487                           ;dc_motor.c: 20:     LATEbits.LATE2=0;
  1488   00252A  947D               	bcf	125,2,c	;volatile
  1489                           
  1490                           ;dc_motor.c: 21:     LATEbits.LATE4=0;
  1491   00252C  987D               	bcf	125,4,c	;volatile
  1492                           
  1493                           ;dc_motor.c: 22:     LATCbits.LATC7=0;
  1494   00252E  9E7B               	bcf	123,7,c	;volatile
  1495                           
  1496                           ;dc_motor.c: 23:     LATGbits.LATG6=0;
  1497   002530  9C7F               	bcf	127,6,c	;volatile
  1498                           
  1499                           ;dc_motor.c: 25:     TRISEbits.TRISE2=0;
  1500   002532  9485               	bcf	133,2,c	;volatile
  1501                           
  1502                           ;dc_motor.c: 26:     TRISEbits.TRISE4=0;
  1503   002534  9885               	bcf	133,4,c	;volatile
  1504                           
  1505                           ;dc_motor.c: 27:     TRISCbits.TRISC7=0;
  1506   002536  9E83               	bcf	131,7,c	;volatile
  1507                           
  1508                           ;dc_motor.c: 28:     TRISGbits.TRISG6=0;
  1509   002538  9C87               	bcf	135,6,c	;volatile
  1510   00253A                     
  1511                           ;dc_motor.c: 31:     RE2PPS=0x05;
  1512   00253A  0E05               	movlw	5
  1513   00253C  010E               	movlb	14	; () banked
  1514   00253E  6F74               	movwf	116,b	;volatile
  1515                           
  1516                           ;dc_motor.c: 32:     RE4PPS=0x06;
  1517   002540  0E06               	movlw	6
  1518   002542  6F76               	movwf	118,b	;volatile
  1519                           
  1520                           ;dc_motor.c: 33:     RC7PPS=0x07;
  1521   002544  0E07               	movlw	7
  1522   002546  6F69               	movwf	105,b	;volatile
  1523                           
  1524                           ;dc_motor.c: 34:     RG6PPS=0x08;
  1525   002548  0E08               	movlw	8
  1526   00254A  6F88               	movwf	136,b	;volatile
  1527   00254C                     
  1528                           ; BSR set to: 14
  1529                           ;dc_motor.c: 37:     T2CONbits.CKPS=0b0100;
  1530   00254C  50BD               	movf	189,w,c	;volatile
  1531   00254E  0B8F               	andlw	-113
  1532   002550  0940               	iorlw	64
  1533   002552  6EBD               	movwf	189,c	;volatile
  1534   002554                     
  1535                           ; BSR set to: 14
  1536                           ;dc_motor.c: 38:     T2HLTbits.MODE=0b00000;
  1537   002554  0EE0               	movlw	-32
  1538   002556  16BE               	andwf	190,f,c	;volatile
  1539   002558                     
  1540                           ; BSR set to: 14
  1541                           ;dc_motor.c: 39:     T2CLKCONbits.CS=0b0001;
  1542   002558  50BF               	movf	191,w,c	;volatile
  1543   00255A  0BF0               	andlw	-16
  1544   00255C  0901               	iorlw	1
  1545   00255E  6EBF               	movwf	191,c	;volatile
  1546   002560                     
  1547                           ; BSR set to: 14
  1548                           ;dc_motor.c: 43:     T2PR=PWMperiod;
  1549   002560  C005  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  1550   002564                     
  1551                           ; BSR set to: 14
  1552                           ;dc_motor.c: 44:     T2CONbits.ON=1;
  1553   002564  8EBD               	bsf	189,7,c	;volatile
  1554   002566                     
  1555                           ; BSR set to: 14
  1556                           ;dc_motor.c: 48:     CCPR1H=0;
  1557   002566  0E00               	movlw	0
  1558   002568  6EAA               	movwf	170,c	;volatile
  1559   00256A                     
  1560                           ; BSR set to: 14
  1561                           ;dc_motor.c: 49:     CCPR2H=0;
  1562   00256A  0E00               	movlw	0
  1563   00256C  6EA6               	movwf	166,c	;volatile
  1564   00256E                     
  1565                           ; BSR set to: 14
  1566                           ;dc_motor.c: 50:     CCPR3H=0;
  1567   00256E  0E00               	movlw	0
  1568   002570  010F               	movlb	15	; () banked
  1569   002572  6F25               	movwf	37,b	;volatile
  1570   002574                     
  1571                           ; BSR set to: 15
  1572                           ;dc_motor.c: 51:     CCPR4H=0;
  1573   002574  0E00               	movlw	0
  1574   002576  6F21               	movwf	33,b	;volatile
  1575   002578                     
  1576                           ; BSR set to: 15
  1577                           ;dc_motor.c: 54:     CCPTMRS0bits.C1TSEL=0;
  1578   002578  0EFC               	movlw	-4
  1579   00257A  16AD               	andwf	173,f,c	;volatile
  1580   00257C                     
  1581                           ; BSR set to: 15
  1582                           ;dc_motor.c: 55:     CCPTMRS0bits.C2TSEL=0;
  1583   00257C  0EF3               	movlw	-13
  1584   00257E  16AD               	andwf	173,f,c	;volatile
  1585   002580                     
  1586                           ; BSR set to: 15
  1587                           ;dc_motor.c: 56:     CCPTMRS0bits.C3TSEL=0;
  1588   002580  0ECF               	movlw	-49
  1589   002582  16AD               	andwf	173,f,c	;volatile
  1590   002584                     
  1591                           ; BSR set to: 15
  1592                           ;dc_motor.c: 57:     CCPTMRS0bits.C4TSEL=0;
  1593   002584  0E3F               	movlw	-193
  1594   002586  16AD               	andwf	173,f,c	;volatile
  1595   002588                     
  1596                           ; BSR set to: 15
  1597                           ;dc_motor.c: 60:     CCP1CONbits.FMT=1;
  1598   002588  88AB               	bsf	171,4,c	;volatile
  1599   00258A                     
  1600                           ; BSR set to: 15
  1601                           ;dc_motor.c: 61:     CCP1CONbits.CCP1MODE=0b1100;
  1602   00258A  50AB               	movf	171,w,c	;volatile
  1603   00258C  0BF0               	andlw	-16
  1604   00258E  090C               	iorlw	12
  1605   002590  6EAB               	movwf	171,c	;volatile
  1606   002592                     
  1607                           ; BSR set to: 15
  1608                           ;dc_motor.c: 62:     CCP1CONbits.EN=1;
  1609   002592  8EAB               	bsf	171,7,c	;volatile
  1610   002594                     
  1611                           ; BSR set to: 15
  1612                           ;dc_motor.c: 64:     CCP2CONbits.FMT=1;
  1613   002594  88A7               	bsf	167,4,c	;volatile
  1614   002596                     
  1615                           ; BSR set to: 15
  1616                           ;dc_motor.c: 65:     CCP2CONbits.CCP2MODE=0b1100;
  1617   002596  50A7               	movf	167,w,c	;volatile
  1618   002598  0BF0               	andlw	-16
  1619   00259A  090C               	iorlw	12
  1620   00259C  6EA7               	movwf	167,c	;volatile
  1621   00259E                     
  1622                           ; BSR set to: 15
  1623                           ;dc_motor.c: 66:     CCP2CONbits.EN=1;
  1624   00259E  8EA7               	bsf	167,7,c	;volatile
  1625   0025A0                     
  1626                           ; BSR set to: 15
  1627                           ;dc_motor.c: 68:     CCP3CONbits.FMT=1;
  1628   0025A0  8926               	bsf	38,4,b	;volatile
  1629   0025A2                     
  1630                           ; BSR set to: 15
  1631                           ;dc_motor.c: 69:     CCP3CONbits.CCP3MODE=0b1100;
  1632   0025A2  5126               	movf	38,w,b	;volatile
  1633   0025A4  0BF0               	andlw	-16
  1634   0025A6  090C               	iorlw	12
  1635   0025A8  6F26               	movwf	38,b	;volatile
  1636   0025AA                     
  1637                           ; BSR set to: 15
  1638                           ;dc_motor.c: 70:     CCP3CONbits.EN=1;
  1639   0025AA  8F26               	bsf	38,7,b	;volatile
  1640   0025AC                     
  1641                           ; BSR set to: 15
  1642                           ;dc_motor.c: 72:     CCP4CONbits.FMT=1;
  1643   0025AC  8922               	bsf	34,4,b	;volatile
  1644   0025AE                     
  1645                           ; BSR set to: 15
  1646                           ;dc_motor.c: 73:     CCP4CONbits.CCP4MODE=0b1100;
  1647   0025AE  5122               	movf	34,w,b	;volatile
  1648   0025B0  0BF0               	andlw	-16
  1649   0025B2  090C               	iorlw	12
  1650   0025B4  6F22               	movwf	34,b	;volatile
  1651   0025B6                     
  1652                           ; BSR set to: 15
  1653                           ;dc_motor.c: 74:     CCP4CONbits.EN=1;
  1654   0025B6  8F22               	bsf	34,7,b	;volatile
  1655   0025B8                     
  1656                           ; BSR set to: 15
  1657   0025B8  0012               	return		;funcret
  1658   0025BA                     __end_of_initDCmotorsPWM:
  1659                           	callstack 0
  1660                           
  1661 ;; *************** function _initCalibColors *****************
  1662 ;; Defined at:
  1663 ;;		line 75 in file "color.c"
  1664 ;; Parameters:    Size  Location     Type
  1665 ;;		None
  1666 ;; Auto vars:     Size  Location     Type
  1667 ;;		None
  1668 ;; Return value:  Size  Location     Type
  1669 ;;                  1    wreg      void 
  1670 ;; Registers used:
  1671 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  1672 ;; Tracked objects:
  1673 ;;		On entry : 0/0
  1674 ;;		On exit  : 0/0
  1675 ;;		Unchanged: 0/0
  1676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1678 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1680 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1681 ;;Total ram usage:        0 bytes
  1682 ;; Hardware stack levels used: 1
  1683 ;; Hardware stack levels required when called: 2
  1684 ;; This function calls:
  1685 ;;		Nothing
  1686 ;; This function is called by:
  1687 ;;		_main
  1688 ;; This function uses a non-reentrant model
  1689 ;;
  1690                           
  1691                           	psect	text5
  1692   002478                     __ptext5:
  1693                           	callstack 0
  1694   002478                     _initCalibColors:
  1695                           	callstack 28
  1696   002478                     
  1697                           ;color.c: 76:  calibColors[0] = red;
  1698   002478  EE21  F0AF         	lfsr	2,_red
  1699   00247C  EE12  F000         	lfsr	1,_calibColors
  1700   002480  0E18               	movlw	24
  1701   002482                     u3321:
  1702   002482  CFDB FFE3          	movff	plusw2,plusw1
  1703   002486  06E8               	decf	wreg,f,c
  1704   002488  E2FC               	bc	u3321
  1705                           
  1706                           ;color.c: 77:     calibColors[1] = green;
  1707   00248A  EE21  F096         	lfsr	2,_green
  1708   00248E  EE12  F019         	lfsr	1,_calibColors+25
  1709   002492  0E18               	movlw	24
  1710   002494                     u3331:
  1711   002494  CFDB FFE3          	movff	plusw2,plusw1
  1712   002498  06E8               	decf	wreg,f,c
  1713   00249A  E2FC               	bc	u3331
  1714                           
  1715                           ;color.c: 78:     calibColors[2] = blue;
  1716   00249C  EE21  F07D         	lfsr	2,_blue
  1717   0024A0  EE12  F032         	lfsr	1,_calibColors+50
  1718   0024A4  0E18               	movlw	24
  1719   0024A6                     u3341:
  1720   0024A6  CFDB FFE3          	movff	plusw2,plusw1
  1721   0024AA  06E8               	decf	wreg,f,c
  1722   0024AC  E2FC               	bc	u3341
  1723                           
  1724                           ;color.c: 79:     calibColors[3] = yellow;
  1725   0024AE  EE21  F064         	lfsr	2,_yellow
  1726   0024B2  EE12  F04B         	lfsr	1,_calibColors+75
  1727   0024B6  0E18               	movlw	24
  1728   0024B8                     u3351:
  1729   0024B8  CFDB FFE3          	movff	plusw2,plusw1
  1730   0024BC  06E8               	decf	wreg,f,c
  1731   0024BE  E2FC               	bc	u3351
  1732                           
  1733                           ;color.c: 80:     calibColors[4] = pink;
  1734   0024C0  EE21  F04B         	lfsr	2,_pink
  1735   0024C4  EE12  F064         	lfsr	1,_calibColors+100
  1736   0024C8  0E18               	movlw	24
  1737   0024CA                     u3361:
  1738   0024CA  CFDB FFE3          	movff	plusw2,plusw1
  1739   0024CE  06E8               	decf	wreg,f,c
  1740   0024D0  E2FC               	bc	u3361
  1741                           
  1742                           ;color.c: 81:     calibColors[5] = orange;
  1743   0024D2  EE21  F032         	lfsr	2,_orange
  1744   0024D6  EE12  F07D         	lfsr	1,_calibColors+125
  1745   0024DA  0E18               	movlw	24
  1746   0024DC                     u3371:
  1747   0024DC  CFDB FFE3          	movff	plusw2,plusw1
  1748   0024E0  06E8               	decf	wreg,f,c
  1749   0024E2  E2FC               	bc	u3371
  1750                           
  1751                           ;color.c: 82:     calibColors[6] = lightBlue;
  1752   0024E4  EE21  F019         	lfsr	2,_lightBlue
  1753   0024E8  EE12  F096         	lfsr	1,_calibColors+150
  1754   0024EC  0E18               	movlw	24
  1755   0024EE                     u3381:
  1756   0024EE  CFDB FFE3          	movff	plusw2,plusw1
  1757   0024F2  06E8               	decf	wreg,f,c
  1758   0024F4  E2FC               	bc	u3381
  1759                           
  1760                           ;color.c: 83:     calibColors[7] = whiteC;
  1761   0024F6  EE21  F000         	lfsr	2,_whiteC
  1762   0024FA  EE12  F0AF         	lfsr	1,_calibColors+175
  1763   0024FE  0E18               	movlw	24
  1764   002500                     u3391:
  1765   002500  CFDB FFE3          	movff	plusw2,plusw1
  1766   002504  06E8               	decf	wreg,f,c
  1767   002506  E2FC               	bc	u3391
  1768                           
  1769                           ;color.c: 84:     calibColors[8] = blackC;
  1770   002508  EE22  F0E1         	lfsr	2,_blackC
  1771   00250C  EE12  F0C8         	lfsr	1,_calibColors+200
  1772   002510  0E18               	movlw	24
  1773   002512                     u3401:
  1774   002512  CFDB FFE3          	movff	plusw2,plusw1
  1775   002516  06E8               	decf	wreg,f,c
  1776   002518  E2FC               	bc	u3401
  1777   00251A  0012               	return		;funcret
  1778   00251C                     __end_of_initCalibColors:
  1779                           	callstack 0
  1780                           
  1781 ;; *************** function _color_click_init *****************
  1782 ;; Defined at:
  1783 ;;		line 10 in file "color.c"
  1784 ;; Parameters:    Size  Location     Type
  1785 ;;		None
  1786 ;; Auto vars:     Size  Location     Type
  1787 ;;		None
  1788 ;; Return value:  Size  Location     Type
  1789 ;;                  1    wreg      void 
  1790 ;; Registers used:
  1791 ;;		wreg, status,2, status,0, cstack
  1792 ;; Tracked objects:
  1793 ;;		On entry : 0/0
  1794 ;;		On exit  : 0/0
  1795 ;;		Unchanged: 0/0
  1796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1799 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1800 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1801 ;;Total ram usage:        1 bytes
  1802 ;; Hardware stack levels used: 1
  1803 ;; Hardware stack levels required when called: 5
  1804 ;; This function calls:
  1805 ;;		_I2C_2_Master_Init
  1806 ;;		_color_writetoaddr
  1807 ;; This function is called by:
  1808 ;;		_main
  1809 ;; This function uses a non-reentrant model
  1810 ;;
  1811                           
  1812                           	psect	text6
  1813   0029F4                     __ptext6:
  1814                           	callstack 0
  1815   0029F4                     _color_click_init:
  1816                           	callstack 25
  1817   0029F4                     
  1818                           ;color.c: 13:     I2C_2_Master_Init();
  1819   0029F4  EC75  F015         	call	_I2C_2_Master_Init	;wreg free
  1820   0029F8                     
  1821                           ;color.c: 16:   color_writetoaddr(0x00, 0x01);
  1822   0029F8  0E01               	movlw	1
  1823   0029FA  6E07               	movwf	color_writetoaddr@value^0,c
  1824   0029FC  0E00               	movlw	0
  1825   0029FE  ECD6  F015         	call	_color_writetoaddr
  1826   002A02                     
  1827                           ;color.c: 17:     _delay((unsigned long)((3)*(64000000/4000.0)));
  1828   002A02  0E3F               	movlw	63
  1829   002A04  6E09               	movwf	??_color_click_init^0,c
  1830   002A06  0E55               	movlw	85
  1831   002A08                     u3617:
  1832   002A08  2EE8               	decfsz	wreg,f,c
  1833   002A0A  D7FE               	bra	u3617
  1834   002A0C  2E09               	decfsz	??_color_click_init^0,f,c
  1835   002A0E  D7FC               	bra	u3617
  1836   002A10  0000               	nop	
  1837   002A12                     
  1838                           ;color.c: 20:  color_writetoaddr(0x00, 0x03);
  1839   002A12  0E03               	movlw	3
  1840   002A14  6E07               	movwf	color_writetoaddr@value^0,c
  1841   002A16  0E00               	movlw	0
  1842   002A18  ECD6  F015         	call	_color_writetoaddr
  1843   002A1C                     
  1844                           ;color.c: 23:  color_writetoaddr(0x01, 0xD5);
  1845   002A1C  0ED5               	movlw	213
  1846   002A1E  6E07               	movwf	color_writetoaddr@value^0,c
  1847   002A20  0E01               	movlw	1
  1848   002A22  ECD6  F015         	call	_color_writetoaddr
  1849   002A26  0012               	return		;funcret
  1850   002A28                     __end_of_color_click_init:
  1851                           	callstack 0
  1852                           
  1853 ;; *************** function _color_writetoaddr *****************
  1854 ;; Defined at:
  1855 ;;		line 39 in file "color.c"
  1856 ;; Parameters:    Size  Location     Type
  1857 ;;  address         1    wreg     unsigned char 
  1858 ;;  value           1    6[COMRAM] unsigned char 
  1859 ;; Auto vars:     Size  Location     Type
  1860 ;;  address         1    7[COMRAM] unsigned char 
  1861 ;; Return value:  Size  Location     Type
  1862 ;;                  1    wreg      void 
  1863 ;; Registers used:
  1864 ;;		wreg, status,2, status,0, cstack
  1865 ;; Tracked objects:
  1866 ;;		On entry : 0/0
  1867 ;;		On exit  : 0/0
  1868 ;;		Unchanged: 0/0
  1869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1870 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1871 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1873 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1874 ;;Total ram usage:        2 bytes
  1875 ;; Hardware stack levels used: 1
  1876 ;; Hardware stack levels required when called: 4
  1877 ;; This function calls:
  1878 ;;		_I2C_2_Master_Start
  1879 ;;		_I2C_2_Master_Stop
  1880 ;;		_I2C_2_Master_Write
  1881 ;; This function is called by:
  1882 ;;		_color_click_init
  1883 ;; This function uses a non-reentrant model
  1884 ;;
  1885                           
  1886                           	psect	text7
  1887   002BAC                     __ptext7:
  1888                           	callstack 0
  1889   002BAC                     _color_writetoaddr:
  1890                           	callstack 25
  1891                           
  1892                           ;incstack = 0
  1893                           ;color_writetoaddr@address stored from wreg
  1894   002BAC  6E08               	movwf	color_writetoaddr@address^0,c
  1895   002BAE                     
  1896                           ;color.c: 40:     I2C_2_Master_Start();
  1897   002BAE  EC1C  F016         	call	_I2C_2_Master_Start	;wreg free
  1898                           
  1899                           ;color.c: 41:     I2C_2_Master_Write(0x52 | 0x00);
  1900   002BB2  0E52               	movlw	82
  1901   002BB4  EC0B  F016         	call	_I2C_2_Master_Write
  1902                           
  1903                           ;color.c: 42:     I2C_2_Master_Write(0x80 | address);
  1904   002BB8  5008               	movf	color_writetoaddr@address^0,w,c
  1905   002BBA  0980               	iorlw	128
  1906   002BBC  EC0B  F016         	call	_I2C_2_Master_Write
  1907                           
  1908                           ;color.c: 43:     I2C_2_Master_Write(value);
  1909   002BC0  5007               	movf	color_writetoaddr@value^0,w,c
  1910   002BC2  EC0B  F016         	call	_I2C_2_Master_Write
  1911                           
  1912                           ;color.c: 44:     I2C_2_Master_Stop();
  1913   002BC6  EC17  F016         	call	_I2C_2_Master_Stop	;wreg free
  1914   002BCA  0012               	return		;funcret
  1915   002BCC                     __end_of_color_writetoaddr:
  1916                           	callstack 0
  1917                           
  1918 ;; *************** function _I2C_2_Master_Init *****************
  1919 ;; Defined at:
  1920 ;;		line 4 in file "i2c.c"
  1921 ;; Parameters:    Size  Location     Type
  1922 ;;		None
  1923 ;; Auto vars:     Size  Location     Type
  1924 ;;		None
  1925 ;; Return value:  Size  Location     Type
  1926 ;;                  1    wreg      void 
  1927 ;; Registers used:
  1928 ;;		wreg, status,2
  1929 ;; Tracked objects:
  1930 ;;		On entry : 0/0
  1931 ;;		On exit  : 0/0
  1932 ;;		Unchanged: 0/0
  1933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1935 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1936 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1937 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1938 ;;Total ram usage:        0 bytes
  1939 ;; Hardware stack levels used: 1
  1940 ;; Hardware stack levels required when called: 2
  1941 ;; This function calls:
  1942 ;;		Nothing
  1943 ;; This function is called by:
  1944 ;;		_color_click_init
  1945 ;;		_main
  1946 ;; This function uses a non-reentrant model
  1947 ;;
  1948                           
  1949                           	psect	text8
  1950   002AEA                     __ptext8:
  1951                           	callstack 0
  1952   002AEA                     _I2C_2_Master_Init:
  1953                           	callstack 27
  1954   002AEA                     
  1955                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  1956   002AEA  010E               	movlb	14	; () banked
  1957   002AEC  51D9               	movf	217,w,b	;volatile
  1958   002AEE  0BF0               	andlw	-16
  1959   002AF0  0908               	iorlw	8
  1960   002AF2  6FD9               	movwf	217,b	;volatile
  1961   002AF4                     
  1962                           ; BSR set to: 14
  1963                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  1964   002AF4  8BD9               	bsf	217,5,b	;volatile
  1965                           
  1966                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  1967   002AF6  0E9F               	movlw	159
  1968   002AF8  6FD6               	movwf	214,b	;volatile
  1969   002AFA                     
  1970                           ; BSR set to: 14
  1971                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  1972   002AFA  8A84               	bsf	132,5,c	;volatile
  1973   002AFC                     
  1974                           ; BSR set to: 14
  1975                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  1976   002AFC  8C84               	bsf	132,6,c	;volatile
  1977   002AFE                     
  1978                           ; BSR set to: 14
  1979                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  1980   002AFE  9BA7               	bcf	167,5,b	;volatile
  1981   002B00                     
  1982                           ; BSR set to: 14
  1983                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  1984   002B00  9DA7               	bcf	167,6,b	;volatile
  1985                           
  1986                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  1987   002B02  0E1D               	movlw	29
  1988   002B04  6F1D               	movwf	29,b	;volatile
  1989                           
  1990                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  1991   002B06  0E1E               	movlw	30
  1992   002B08  6F1C               	movwf	28,b	;volatile
  1993                           
  1994                           ;i2c.c: 18:   RD5PPS=0x1C;
  1995   002B0A  0E1C               	movlw	28
  1996   002B0C  6F6F               	movwf	111,b	;volatile
  1997                           
  1998                           ;i2c.c: 19:   RD6PPS=0x1B;
  1999   002B0E  0E1B               	movlw	27
  2000   002B10  6F70               	movwf	112,b	;volatile
  2001   002B12                     
  2002                           ; BSR set to: 14
  2003   002B12  0012               	return		;funcret
  2004   002B14                     __end_of_I2C_2_Master_Init:
  2005                           	callstack 0
  2006                           
  2007 ;; *************** function _away *****************
  2008 ;; Defined at:
  2009 ;;		line 319 in file "color.c"
  2010 ;; Parameters:    Size  Location     Type
  2011 ;;  mL              8  112[BANK0 ] struct DC_motor
  2012 ;;  mR              8  120[BANK0 ] struct DC_motor
  2013 ;;  hist            2  128[BANK0 ] PTR struct colorHistory
  2014 ;;		 -> hist(200), 
  2015 ;; Auto vars:     Size  Location     Type
  2016 ;;  currColor      25    0[BANK3 ] struct color
  2017 ;; Return value:  Size  Location     Type
  2018 ;;                  1    wreg      void 
  2019 ;; Registers used:
  2020 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2021 ;; Tracked objects:
  2022 ;;		On entry : 0/0
  2023 ;;		On exit  : 0/0
  2024 ;;		Unchanged: 0/0
  2025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2026 ;;      Params:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2027 ;;      Locals:         0       0       0       0      25       0       0       0       0       0       0       0       
      +0       0       0
  2028 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2029 ;;      Totals:         0      20       0       0      25       0       0       0       0       0       0       0       
      +0       0       0
  2030 ;;Total ram usage:       45 bytes
  2031 ;; Hardware stack levels used: 1
  2032 ;; Hardware stack levels required when called: 9
  2033 ;; This function calls:
  2034 ;;		_checkWhite
  2035 ;;		_color2instruction
  2036 ;; This function is called by:
  2037 ;;		_main
  2038 ;; This function uses a non-reentrant model
  2039 ;;
  2040                           
  2041                           	psect	text9
  2042   0027A0                     __ptext9:
  2043                           	callstack 0
  2044   0027A0                     _away:
  2045                           	callstack 21
  2046   0027A0                     
  2047                           ;color.c: 320:  color currColor;;color.c: 321:  checkWhite();
  2048   0027A0  ECB1  F00F         	call	_checkWhite	;wreg free
  2049   0027A4                     
  2050                           ;color.c: 323:  color2instruction(mL,mR,currColor,hist);
  2051   0027A4  EE20  F0D0         	lfsr	2,away@mL
  2052   0027A8  EE00  F0A3         	lfsr	0,color2instruction@mL
  2053   0027AC  0E07               	movlw	7
  2054   0027AE                     u3411:
  2055   0027AE  CFDB FFEB          	movff	plusw2,plusw0
  2056   0027B2  06E8               	decf	wreg,f,c
  2057   0027B4  E2FC               	bc	u3411
  2058   0027B6  EE20  F0D8         	lfsr	2,away@mR
  2059   0027BA  EE00  F0AB         	lfsr	0,color2instruction@mR
  2060   0027BE  0E07               	movlw	7
  2061   0027C0                     u3421:
  2062   0027C0  CFDB FFEB          	movff	plusw2,plusw0
  2063   0027C4  06E8               	decf	wreg,f,c
  2064   0027C6  E2FC               	bc	u3421
  2065   0027C8  EE23  F05C         	lfsr	2,away@currColor
  2066   0027CC  EE00  F0B3         	lfsr	0,color2instruction@currColor
  2067   0027D0  0E18               	movlw	24
  2068   0027D2                     u3431:
  2069   0027D2  CFDB FFEB          	movff	plusw2,plusw0
  2070   0027D6  06E8               	decf	wreg,f,c
  2071   0027D8  E2FC               	bc	u3431
  2072   0027DA  C0E0  F0CC         	movff	away@hist,color2instruction@hist
  2073   0027DE  C0E1  F0CD         	movff	away@hist+1,color2instruction@hist+1
  2074   0027E2  ECD0  F00A         	call	_color2instruction	;wreg free
  2075   0027E6                     
  2076                           ;color.c: 324:  _delay((unsigned long)((2000)*(64000000/4000.0)));
  2077   0027E6  0EA3               	movlw	163
  2078   0027E8  0100               	movlb	0	; () banked
  2079   0027EA  6FE3               	movwf	(??_away+1)& (0+255),b
  2080   0027EC  0E57               	movlw	87
  2081   0027EE  6FE2               	movwf	??_away& (0+255),b
  2082   0027F0  0E02               	movlw	2
  2083   0027F2                     u3627:
  2084   0027F2  2EE8               	decfsz	wreg,f,c
  2085   0027F4  D7FE               	bra	u3627
  2086   0027F6  2FE2               	decfsz	??_away& (0+255),f,b
  2087   0027F8  D7FC               	bra	u3627
  2088   0027FA  2FE3               	decfsz	(??_away+1)& (0+255),f,b
  2089   0027FC  D7FA               	bra	u3627
  2090   0027FE  0000               	nop	
  2091   002800  0012               	return		;funcret
  2092   002802                     __end_of_away:
  2093                           	callstack 0
  2094                           
  2095 ;; *************** function _color2instruction *****************
  2096 ;; Defined at:
  2097 ;;		line 212 in file "color.c"
  2098 ;; Parameters:    Size  Location     Type
  2099 ;;  mL              8   67[BANK0 ] struct DC_motor
  2100 ;;  mR              8   75[BANK0 ] struct DC_motor
  2101 ;;  currColor      25   83[BANK0 ] struct color
  2102 ;;  hist            2  108[BANK0 ] PTR struct colorHistory
  2103 ;;		 -> hist(200), 
  2104 ;; Auto vars:     Size  Location     Type
  2105 ;;		None
  2106 ;; Return value:  Size  Location     Type
  2107 ;;                  1    wreg      void 
  2108 ;; Registers used:
  2109 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2110 ;; Tracked objects:
  2111 ;;		On entry : 0/0
  2112 ;;		On exit  : 0/0
  2113 ;;		Unchanged: 0/0
  2114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2115 ;;      Params:         0      43       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2116 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2117 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2118 ;;      Totals:         0      45       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2119 ;;Total ram usage:       45 bytes
  2120 ;; Hardware stack levels used: 1
  2121 ;; Hardware stack levels required when called: 8
  2122 ;; This function calls:
  2123 ;;		_bump
  2124 ;;		_checkColor
  2125 ;;		_checkIncidence
  2126 ;;		_goStraight
  2127 ;;		_home
  2128 ;;		_serialColor
  2129 ;;		_storeSequence
  2130 ;;		_triLED_tog
  2131 ;;		_turn
  2132 ;; This function is called by:
  2133 ;;		_away
  2134 ;; This function uses a non-reentrant model
  2135 ;;
  2136                           
  2137                           	psect	text10
  2138   0015A0                     __ptext10:
  2139                           	callstack 0
  2140   0015A0                     _color2instruction:
  2141                           	callstack 21
  2142   0015A0                     
  2143                           ;color.c: 218:     currColor = checkColor();
  2144   0015A0  EC1F  F007         	call	_checkColor	;wreg free
  2145   0015A4  EE20  F0B3         	lfsr	2,color2instruction@currColor
  2146   0015A8  0E18               	movlw	24
  2147   0015AA                     u3231:
  2148   0015AA  CFEB FFDB          	movff	plusw0,plusw2
  2149   0015AE  06E8               	decf	wreg,f,c
  2150   0015B0  E2FC               	bc	u3231
  2151   0015B2                     
  2152                           ;color.c: 221:     serialColor(currColor);
  2153   0015B2  EE20  F0B3         	lfsr	2,color2instruction@currColor
  2154   0015B6  EE00  F03C         	lfsr	0,serialColor@currColor
  2155   0015BA  0E18               	movlw	24
  2156   0015BC                     u3241:
  2157   0015BC  CFDB FFEB          	movff	plusw2,plusw0
  2158   0015C0  06E8               	decf	wreg,f,c
  2159   0015C2  E2FC               	bc	u3241
  2160   0015C4  EC8B  F00D         	call	_serialColor	;wreg free
  2161   0015C8                     
  2162                           ;color.c: 224:  if(!finished){
  2163   0015C8  0101               	movlb	1	; () banked
  2164   0015CA  51EE               	movf	_finished& (0+255),w,b
  2165   0015CC  11EF               	iorwf	(_finished+1)& (0+255),w,b
  2166   0015CE  A4D8               	btfss	status,2,c
  2167   0015D0  EFEC  F00A         	goto	u3251
  2168   0015D4  EFEE  F00A         	goto	u3250
  2169   0015D8                     u3251:
  2170   0015D8  EF7E  F00B         	goto	l4144
  2171   0015DC                     u3250:
  2172   0015DC                     
  2173                           ; BSR set to: 1
  2174                           ;color.c: 227:    checkIncidence();
  2175   0015DC  EC5F  F014         	call	_checkIncidence	;wreg free
  2176   0015E0                     
  2177                           ;color.c: 229:   if(readingColor == 1){
  2178   0015E0  0100               	movlb	0	; () banked
  2179   0015E2  05F6               	decf	_readingColor& (0+255),w,b
  2180   0015E4  11F7               	iorwf	(_readingColor+1)& (0+255),w,b
  2181   0015E6  A4D8               	btfss	status,2,c
  2182   0015E8  EFF8  F00A         	goto	u3261
  2183   0015EC  EFFA  F00A         	goto	u3260
  2184   0015F0                     u3261:
  2185   0015F0  EF6B  F00B         	goto	l4140
  2186   0015F4                     u3260:
  2187   0015F4                     
  2188                           ; BSR set to: 0
  2189                           ;color.c: 230:    currColor = checkColor();
  2190   0015F4  EC1F  F007         	call	_checkColor	;wreg free
  2191   0015F8  EE20  F0B3         	lfsr	2,color2instruction@currColor
  2192   0015FC  0E18               	movlw	24
  2193   0015FE                     u3271:
  2194   0015FE  CFEB FFDB          	movff	plusw0,plusw2
  2195   001602  06E8               	decf	wreg,f,c
  2196   001604  E2FC               	bc	u3271
  2197   001606                     
  2198                           ;color.c: 231:    _delay((unsigned long)((1000)*(64000000/4000.0)));
  2199   001606  0E52               	movlw	82
  2200   001608  0100               	movlb	0	; () banked
  2201   00160A  6FCF               	movwf	(??_color2instruction+1)& (0+255),b
  2202   00160C  0E2B               	movlw	43
  2203   00160E  6FCE               	movwf	??_color2instruction& (0+255),b
  2204   001610  0E00               	movlw	0
  2205   001612                     u3637:
  2206   001612  2EE8               	decfsz	wreg,f,c
  2207   001614  D7FE               	bra	u3637
  2208   001616  2FCE               	decfsz	??_color2instruction& (0+255),f,b
  2209   001618  D7FC               	bra	u3637
  2210   00161A  2FCF               	decfsz	(??_color2instruction+1)& (0+255),f,b
  2211   00161C  D7FA               	bra	u3637
  2212   00161E  0000               	nop	
  2213   001620                     
  2214                           ;color.c: 233:    bump(&mL,&mR,0);
  2215   001620  0EA3               	movlw	low color2instruction@mL
  2216   001622  6E13               	movwf	bump@mL^0,c
  2217   001624  0EAB               	movlw	low color2instruction@mR
  2218   001626  6E14               	movwf	bump@mR^0,c
  2219   001628  0E00               	movlw	0
  2220   00162A  6E16               	movwf	(bump@direction+1)^0,c
  2221   00162C  0E00               	movlw	0
  2222   00162E  6E15               	movwf	bump@direction^0,c
  2223   001630  ECA8  F010         	call	_bump	;wreg free
  2224   001634                     
  2225                           ;color.c: 238:    goStraight(&mL,&mR,currColor.direction,currColor.squares);
  2226   001634  0EA3               	movlw	low color2instruction@mL
  2227   001636  6E13               	movwf	goStraight@mL^0,c
  2228   001638  0EAB               	movlw	low color2instruction@mR
  2229   00163A  6E14               	movwf	goStraight@mR^0,c
  2230   00163C  C0C4  F015         	movff	color2instruction@currColor+17,goStraight@direction
  2231   001640  C0C5  F016         	movff	color2instruction@currColor+18,goStraight@direction+1
  2232   001644  C0CA  F017         	movff	color2instruction@currColor+23,goStraight@squares
  2233   001648  C0CB  F018         	movff	color2instruction@currColor+24,goStraight@squares+1
  2234   00164C  EC95  F00B         	call	_goStraight	;wreg free
  2235   001650                     
  2236                           ;color.c: 240:    turn(mL,mR,currColor.angle,currColor.polarity);
  2237   001650  EE20  F0A3         	lfsr	2,color2instruction@mL
  2238   001654  EE00  F01B         	lfsr	0,turn@mL
  2239   001658  0E07               	movlw	7
  2240   00165A                     u3281:
  2241   00165A  CFDB FFEB          	movff	plusw2,plusw0
  2242   00165E  06E8               	decf	wreg,f,c
  2243   001660  E2FC               	bc	u3281
  2244   001662  EE20  F0AB         	lfsr	2,color2instruction@mR
  2245   001666  EE00  F023         	lfsr	0,turn@mR
  2246   00166A  0E07               	movlw	7
  2247   00166C                     u3291:
  2248   00166C  CFDB FFEB          	movff	plusw2,plusw0
  2249   001670  06E8               	decf	wreg,f,c
  2250   001672  E2FC               	bc	u3291
  2251   001674  C0C6  F02B         	movff	color2instruction@currColor+19,turn@iter
  2252   001678  C0C7  F02C         	movff	color2instruction@currColor+20,turn@iter+1
  2253   00167C  C0C8  F02D         	movff	color2instruction@currColor+21,turn@polarity
  2254   001680  C0C9  F02E         	movff	color2instruction@currColor+22,turn@polarity+1
  2255   001684  EC9E  F013         	call	_turn	;wreg free
  2256   001688                     
  2257                           ;color.c: 244:    triLED_tog(0);
  2258   001688  0E00               	movlw	0
  2259   00168A  EC8A  F015         	call	_triLED_tog
  2260   00168E                     
  2261                           ;color.c: 245:    readingColor =0;
  2262   00168E  0E00               	movlw	0
  2263   001690  0100               	movlb	0	; () banked
  2264   001692  6FF7               	movwf	(_readingColor+1)& (0+255),b
  2265   001694  0E00               	movlw	0
  2266   001696  6FF6               	movwf	_readingColor& (0+255),b
  2267   001698                     
  2268                           ; BSR set to: 0
  2269                           ;color.c: 247:    storeSequence(&hist,currColor.angle,currColor.polarity,currColor.direc
      +                          tion,squaresb4,currColor.squares);
  2270   001698  0ECC               	movlw	low color2instruction@hist
  2271   00169A  6E05               	movwf	storeSequence@history^0,c
  2272   00169C  C0C6  F006         	movff	color2instruction@currColor+19,storeSequence@angle
  2273   0016A0  C0C7  F007         	movff	color2instruction@currColor+20,storeSequence@angle+1
  2274   0016A4  C0C8  F008         	movff	color2instruction@currColor+21,storeSequence@polarity
  2275   0016A8  C0C9  F009         	movff	color2instruction@currColor+22,storeSequence@polarity+1
  2276   0016AC  C0C4  F00A         	movff	color2instruction@currColor+17,storeSequence@direction
  2277   0016B0  C0C5  F00B         	movff	color2instruction@currColor+18,storeSequence@direction+1
  2278   0016B4  C1E8  F00C         	movff	_squaresb4,storeSequence@squaresb4
  2279   0016B8  C1E9  F00D         	movff	_squaresb4+1,storeSequence@squaresb4+1
  2280   0016BC  C0CA  F00E         	movff	color2instruction@currColor+23,storeSequence@squares
  2281   0016C0  C0CB  F00F         	movff	color2instruction@currColor+24,storeSequence@squares+1
  2282   0016C4  EC24  F013         	call	_storeSequence	;wreg free
  2283   0016C8                     
  2284                           ;color.c: 250:    squaresb4 = 0;
  2285   0016C8  0E00               	movlw	0
  2286   0016CA  0101               	movlb	1	; () banked
  2287   0016CC  6FE9               	movwf	(_squaresb4+1)& (0+255),b
  2288   0016CE  0E00               	movlw	0
  2289   0016D0  6FE8               	movwf	_squaresb4& (0+255),b
  2290                           
  2291                           ;color.c: 251:    }
  2292   0016D2  EF94  F00B         	goto	l150
  2293   0016D6                     l4140:
  2294                           
  2295                           ; BSR set to: 0
  2296                           ;color.c: 254:    goStraight(&mL,&mR,1,1);
  2297   0016D6  0EA3               	movlw	low color2instruction@mL
  2298   0016D8  6E13               	movwf	goStraight@mL^0,c
  2299   0016DA  0EAB               	movlw	low color2instruction@mR
  2300   0016DC  6E14               	movwf	goStraight@mR^0,c
  2301   0016DE  0E00               	movlw	0
  2302   0016E0  6E16               	movwf	(goStraight@direction+1)^0,c
  2303   0016E2  0E01               	movlw	1
  2304   0016E4  6E15               	movwf	goStraight@direction^0,c
  2305   0016E6  0E00               	movlw	0
  2306   0016E8  6E18               	movwf	(goStraight@squares+1)^0,c
  2307   0016EA  0E01               	movlw	1
  2308   0016EC  6E17               	movwf	goStraight@squares^0,c
  2309   0016EE  EC95  F00B         	call	_goStraight	;wreg free
  2310   0016F2                     
  2311                           ;color.c: 255:    squaresb4++;
  2312   0016F2  0101               	movlb	1	; () banked
  2313   0016F4  4BE8               	infsnz	_squaresb4& (0+255),f,b
  2314   0016F6  2BE9               	incf	(_squaresb4+1)& (0+255),f,b
  2315   0016F8  EF94  F00B         	goto	l150
  2316   0016FC                     l4144:
  2317                           
  2318                           ; BSR set to: 1
  2319                           ;color.c: 266:   home(mL,mR,&hist);
  2320   0016FC  EE20  F0A3         	lfsr	2,color2instruction@mL
  2321   001700  EE00  F044         	lfsr	0,home@mL
  2322   001704  0E07               	movlw	7
  2323   001706                     u3301:
  2324   001706  CFDB FFEB          	movff	plusw2,plusw0
  2325   00170A  06E8               	decf	wreg,f,c
  2326   00170C  E2FC               	bc	u3301
  2327   00170E  EE20  F0AB         	lfsr	2,color2instruction@mR
  2328   001712  EE00  F04C         	lfsr	0,home@mR
  2329   001716  0E07               	movlw	7
  2330   001718                     u3311:
  2331   001718  CFDB FFEB          	movff	plusw2,plusw0
  2332   00171C  06E8               	decf	wreg,f,c
  2333   00171E  E2FC               	bc	u3311
  2334   001720  0ECC               	movlw	low color2instruction@hist
  2335   001722  6E54               	movwf	home@hist^0,c
  2336   001724  EC48  F015         	call	_home	;wreg free
  2337   001728                     l150:
  2338   001728  0012               	return		;funcret
  2339   00172A                     __end_of_color2instruction:
  2340                           	callstack 0
  2341                           
  2342 ;; *************** function _storeSequence *****************
  2343 ;; Defined at:
  2344 ;;		line 273 in file "color.c"
  2345 ;; Parameters:    Size  Location     Type
  2346 ;;  history         1    4[COMRAM] PTR struct colorHistory
  2347 ;;		 -> color2instruction@hist(2), 
  2348 ;;  angle           2    5[COMRAM] int 
  2349 ;;  polarity        2    7[COMRAM] int 
  2350 ;;  direction       2    9[COMRAM] int 
  2351 ;;  squaresb4       2   11[COMRAM] int 
  2352 ;;  squares         2   13[COMRAM] int 
  2353 ;; Auto vars:     Size  Location     Type
  2354 ;;		None
  2355 ;; Return value:  Size  Location     Type
  2356 ;;                  1    wreg      void 
  2357 ;; Registers used:
  2358 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2359 ;; Tracked objects:
  2360 ;;		On entry : 0/0
  2361 ;;		On exit  : 0/0
  2362 ;;		Unchanged: 0/0
  2363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2364 ;;      Params:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2365 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2367 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2368 ;;Total ram usage:       11 bytes
  2369 ;; Hardware stack levels used: 1
  2370 ;; Hardware stack levels required when called: 2
  2371 ;; This function calls:
  2372 ;;		Nothing
  2373 ;; This function is called by:
  2374 ;;		_color2instruction
  2375 ;; This function uses a non-reentrant model
  2376 ;;
  2377                           
  2378                           	psect	text11
  2379   002648                     __ptext11:
  2380                           	callstack 0
  2381   002648                     _storeSequence:
  2382                           	callstack 26
  2383   002648                     
  2384                           ;color.c: 276:  history -> angle[pos] = angle;
  2385   002648  0100               	movlb	0	; () banked
  2386   00264A  51F4               	movf	_pos& (0+255),w,b
  2387   00264C  0D02               	mullw	2
  2388   00264E  5005               	movf	storeSequence@history^0,w,c
  2389   002650  24F3               	addwf	243,w,c
  2390   002652  6ED9               	movwf	fsr2l,c
  2391   002654  6ADA               	clrf	fsr2h,c
  2392   002656  C006  FFDE         	movff	storeSequence@angle,postinc2
  2393   00265A  C007  FFDD         	movff	storeSequence@angle+1,postdec2
  2394                           
  2395                           ;color.c: 277:  history -> polarity[pos] = polarity;
  2396   00265E  51F4               	movf	_pos& (0+255),w,b
  2397   002660  0D02               	mullw	2
  2398   002662  5005               	movf	storeSequence@history^0,w,c
  2399   002664  24F3               	addwf	243,w,c
  2400   002666  6ED9               	movwf	fsr2l,c
  2401   002668  6ADA               	clrf	fsr2h,c
  2402   00266A  0E28               	movlw	40
  2403   00266C  26D9               	addwf	fsr2l,f,c
  2404   00266E  C008  FFDE         	movff	storeSequence@polarity,postinc2
  2405   002672  C009  FFDD         	movff	storeSequence@polarity+1,postdec2
  2406                           
  2407                           ;color.c: 278:  history -> direction[pos] = direction;
  2408   002676  51F4               	movf	_pos& (0+255),w,b
  2409   002678  0D02               	mullw	2
  2410   00267A  5005               	movf	storeSequence@history^0,w,c
  2411   00267C  24F3               	addwf	243,w,c
  2412   00267E  6ED9               	movwf	fsr2l,c
  2413   002680  6ADA               	clrf	fsr2h,c
  2414   002682  0E50               	movlw	80
  2415   002684  26D9               	addwf	fsr2l,f,c
  2416   002686  C00A  FFDE         	movff	storeSequence@direction,postinc2
  2417   00268A  C00B  FFDD         	movff	storeSequence@direction+1,postdec2
  2418                           
  2419                           ;color.c: 279:  history -> squaresb4[pos] = squaresb4;
  2420   00268E  51F4               	movf	_pos& (0+255),w,b
  2421   002690  0D02               	mullw	2
  2422   002692  5005               	movf	storeSequence@history^0,w,c
  2423   002694  24F3               	addwf	243,w,c
  2424   002696  6ED9               	movwf	fsr2l,c
  2425   002698  6ADA               	clrf	fsr2h,c
  2426   00269A  0E78               	movlw	120
  2427   00269C  26D9               	addwf	fsr2l,f,c
  2428   00269E  C00C  FFDE         	movff	storeSequence@squaresb4,postinc2
  2429   0026A2  C00D  FFDD         	movff	storeSequence@squaresb4+1,postdec2
  2430                           
  2431                           ;color.c: 280:  history -> squares[pos] = squares;
  2432   0026A6  51F4               	movf	_pos& (0+255),w,b
  2433   0026A8  0D02               	mullw	2
  2434   0026AA  5005               	movf	storeSequence@history^0,w,c
  2435   0026AC  24F3               	addwf	243,w,c
  2436   0026AE  6ED9               	movwf	fsr2l,c
  2437   0026B0  6ADA               	clrf	fsr2h,c
  2438   0026B2  0EA0               	movlw	160
  2439   0026B4  26D9               	addwf	fsr2l,f,c
  2440   0026B6  C00E  FFDE         	movff	storeSequence@squares,postinc2
  2441   0026BA  C00F  FFDD         	movff	storeSequence@squares+1,postdec2
  2442   0026BE                     
  2443                           ; BSR set to: 0
  2444                           ;color.c: 281:  pos++;
  2445   0026BE  4BF4               	infsnz	_pos& (0+255),f,b
  2446   0026C0  2BF5               	incf	(_pos+1)& (0+255),f,b
  2447   0026C2                     
  2448                           ; BSR set to: 0
  2449   0026C2  0012               	return		;funcret
  2450   0026C4                     __end_of_storeSequence:
  2451                           	callstack 0
  2452                           
  2453 ;; *************** function _serialColor *****************
  2454 ;; Defined at:
  2455 ;;		line 116 in file "serial.c"
  2456 ;; Parameters:    Size  Location     Type
  2457 ;;  currColor      25   59[COMRAM] struct color
  2458 ;; Auto vars:     Size  Location     Type
  2459 ;;  testColor      50    0[BANK0 ] unsigned char [50]
  2460 ;; Return value:  Size  Location     Type
  2461 ;;                  1    wreg      void 
  2462 ;; Registers used:
  2463 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2464 ;; Tracked objects:
  2465 ;;		On entry : 0/0
  2466 ;;		On exit  : 0/0
  2467 ;;		Unchanged: 0/0
  2468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2469 ;;      Params:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2470 ;;      Locals:         0      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2471 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2472 ;;      Totals:        27      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2473 ;;Total ram usage:       77 bytes
  2474 ;; Hardware stack levels used: 1
  2475 ;; Hardware stack levels required when called: 7
  2476 ;; This function calls:
  2477 ;;		_sendCharSerial4
  2478 ;;		_sendStringSerial4
  2479 ;;		_sprintf
  2480 ;; This function is called by:
  2481 ;;		_color2instruction
  2482 ;; This function uses a non-reentrant model
  2483 ;;
  2484                           
  2485                           	psect	text12
  2486   001B16                     __ptext12:
  2487                           	callstack 0
  2488   001B16                     _serialColor:
  2489                           	callstack 21
  2490   001B16                     
  2491                           ;serial.c: 118:     char testColor[50];;serial.c: 119:     sendStringSerial4("Name: ");
  2492   001B16  0E14               	movlw	low STR_2
  2493   001B18  6E06               	movwf	sendStringSerial4@string^0,c
  2494   001B1A  5006               	movf	sendStringSerial4@string^0,w,c
  2495   001B1C  A4D8               	btfss	status,2,c
  2496   001B1E  0E0E               	movlw	high __smallconst
  2497   001B20  6E07               	movwf	(sendStringSerial4@string+1)^0,c
  2498   001B22  EC01  F014         	call	_sendStringSerial4	;wreg free
  2499   001B26                     
  2500                           ;serial.c: 120:  sendCharSerial4(currColor.name);
  2501   001B26  503C               	movf	serialColor@currColor^0,w,c
  2502   001B28  ECF3  F015         	call	_sendCharSerial4
  2503   001B2C                     
  2504                           ;serial.c: 122:  sprintf(testColor, "%ld",currColor.red);
  2505   001B2C  0E60               	movlw	low serialColor@testColor
  2506   001B2E  6E29               	movwf	sprintf@s^0,c
  2507   001B30  0E34               	movlw	low STR_3
  2508   001B32  6E2A               	movwf	sprintf@fmt^0,c
  2509   001B34  C03D  F02B         	movff	serialColor@currColor+1,?_sprintf+2
  2510   001B38  C03E  F02C         	movff	serialColor@currColor+2,?_sprintf+3
  2511   001B3C  C03F  F02D         	movff	serialColor@currColor+3,?_sprintf+4
  2512   001B40  C040  F02E         	movff	serialColor@currColor+4,?_sprintf+5
  2513   001B44  EC14  F015         	call	_sprintf	;wreg free
  2514   001B48                     
  2515                           ;serial.c: 123:     sendStringSerial4("Red:");
  2516   001B48  0E2F               	movlw	low STR_4
  2517   001B4A  6E06               	movwf	sendStringSerial4@string^0,c
  2518   001B4C  5006               	movf	sendStringSerial4@string^0,w,c
  2519   001B4E  A4D8               	btfss	status,2,c
  2520   001B50  0E0E               	movlw	high __smallconst
  2521   001B52  6E07               	movwf	(sendStringSerial4@string+1)^0,c
  2522   001B54  EC01  F014         	call	_sendStringSerial4	;wreg free
  2523   001B58                     
  2524                           ;serial.c: 124:     sendStringSerial4(testColor);
  2525   001B58  0E60               	movlw	low serialColor@testColor
  2526   001B5A  6E06               	movwf	sendStringSerial4@string^0,c
  2527   001B5C  6A07               	clrf	(sendStringSerial4@string+1)^0,c
  2528   001B5E  EC01  F014         	call	_sendStringSerial4	;wreg free
  2529   001B62                     
  2530                           ;serial.c: 126:     sprintf(testColor, "%ld",currColor.green);
  2531   001B62  0E60               	movlw	low serialColor@testColor
  2532   001B64  6E29               	movwf	sprintf@s^0,c
  2533   001B66  0E34               	movlw	low STR_3
  2534   001B68  6E2A               	movwf	sprintf@fmt^0,c
  2535   001B6A  C041  F02B         	movff	serialColor@currColor+5,?_sprintf+2
  2536   001B6E  C042  F02C         	movff	serialColor@currColor+6,?_sprintf+3
  2537   001B72  C043  F02D         	movff	serialColor@currColor+7,?_sprintf+4
  2538   001B76  C044  F02E         	movff	serialColor@currColor+8,?_sprintf+5
  2539   001B7A  EC14  F015         	call	_sprintf	;wreg free
  2540   001B7E                     
  2541                           ;serial.c: 127:     sendStringSerial4("Green:");
  2542   001B7E  0E1B               	movlw	low STR_6
  2543   001B80  6E06               	movwf	sendStringSerial4@string^0,c
  2544   001B82  5006               	movf	sendStringSerial4@string^0,w,c
  2545   001B84  A4D8               	btfss	status,2,c
  2546   001B86  0E0E               	movlw	high __smallconst
  2547   001B88  6E07               	movwf	(sendStringSerial4@string+1)^0,c
  2548   001B8A  EC01  F014         	call	_sendStringSerial4	;wreg free
  2549   001B8E                     
  2550                           ;serial.c: 128:     sendStringSerial4(testColor);
  2551   001B8E  0E60               	movlw	low serialColor@testColor
  2552   001B90  6E06               	movwf	sendStringSerial4@string^0,c
  2553   001B92  6A07               	clrf	(sendStringSerial4@string+1)^0,c
  2554   001B94  EC01  F014         	call	_sendStringSerial4	;wreg free
  2555   001B98                     
  2556                           ;serial.c: 130:     sprintf(testColor, "%ld",currColor.blue);
  2557   001B98  0E60               	movlw	low serialColor@testColor
  2558   001B9A  6E29               	movwf	sprintf@s^0,c
  2559   001B9C  0E34               	movlw	low STR_3
  2560   001B9E  6E2A               	movwf	sprintf@fmt^0,c
  2561   001BA0  C045  F02B         	movff	serialColor@currColor+9,?_sprintf+2
  2562   001BA4  C046  F02C         	movff	serialColor@currColor+10,?_sprintf+3
  2563   001BA8  C047  F02D         	movff	serialColor@currColor+11,?_sprintf+4
  2564   001BAC  C048  F02E         	movff	serialColor@currColor+12,?_sprintf+5
  2565   001BB0  EC14  F015         	call	_sprintf	;wreg free
  2566   001BB4                     
  2567                           ;serial.c: 131:     sendStringSerial4("Blue:");
  2568   001BB4  0E29               	movlw	low STR_8
  2569   001BB6  6E06               	movwf	sendStringSerial4@string^0,c
  2570   001BB8  5006               	movf	sendStringSerial4@string^0,w,c
  2571   001BBA  A4D8               	btfss	status,2,c
  2572   001BBC  0E0E               	movlw	high __smallconst
  2573   001BBE  6E07               	movwf	(sendStringSerial4@string+1)^0,c
  2574   001BC0  EC01  F014         	call	_sendStringSerial4	;wreg free
  2575   001BC4                     
  2576                           ;serial.c: 132:     sendStringSerial4(testColor);
  2577   001BC4  0E60               	movlw	low serialColor@testColor
  2578   001BC6  6E06               	movwf	sendStringSerial4@string^0,c
  2579   001BC8  6A07               	clrf	(sendStringSerial4@string+1)^0,c
  2580   001BCA  EC01  F014         	call	_sendStringSerial4	;wreg free
  2581   001BCE                     
  2582                           ;serial.c: 134:     sprintf(testColor, "%ld",currColor.clear);
  2583   001BCE  0E60               	movlw	low serialColor@testColor
  2584   001BD0  6E29               	movwf	sprintf@s^0,c
  2585   001BD2  0E34               	movlw	low STR_3
  2586   001BD4  6E2A               	movwf	sprintf@fmt^0,c
  2587   001BD6  C049  F02B         	movff	serialColor@currColor+13,?_sprintf+2
  2588   001BDA  C04A  F02C         	movff	serialColor@currColor+14,?_sprintf+3
  2589   001BDE  C04B  F02D         	movff	serialColor@currColor+15,?_sprintf+4
  2590   001BE2  C04C  F02E         	movff	serialColor@currColor+16,?_sprintf+5
  2591   001BE6  EC14  F015         	call	_sprintf	;wreg free
  2592   001BEA                     
  2593                           ;serial.c: 135:     sendStringSerial4("Clear:");
  2594   001BEA  0E22               	movlw	low STR_10
  2595   001BEC  6E06               	movwf	sendStringSerial4@string^0,c
  2596   001BEE  5006               	movf	sendStringSerial4@string^0,w,c
  2597   001BF0  A4D8               	btfss	status,2,c
  2598   001BF2  0E0E               	movlw	high __smallconst
  2599   001BF4  6E07               	movwf	(sendStringSerial4@string+1)^0,c
  2600   001BF6  EC01  F014         	call	_sendStringSerial4	;wreg free
  2601   001BFA                     
  2602                           ;serial.c: 136:     sendStringSerial4(testColor);
  2603   001BFA  0E60               	movlw	low serialColor@testColor
  2604   001BFC  6E06               	movwf	sendStringSerial4@string^0,c
  2605   001BFE  6A07               	clrf	(sendStringSerial4@string+1)^0,c
  2606   001C00  EC01  F014         	call	_sendStringSerial4	;wreg free
  2607   001C04                     
  2608                           ;serial.c: 139:     sendStringSerial4("\n");
  2609   001C04  0E38               	movlw	low STR_11
  2610   001C06  6E06               	movwf	sendStringSerial4@string^0,c
  2611   001C08  5006               	movf	sendStringSerial4@string^0,w,c
  2612   001C0A  A4D8               	btfss	status,2,c
  2613   001C0C  0E0E               	movlw	high __smallconst
  2614   001C0E  6E07               	movwf	(sendStringSerial4@string+1)^0,c
  2615   001C10  EC01  F014         	call	_sendStringSerial4	;wreg free
  2616   001C14                     
  2617                           ;serial.c: 140:     sendStringSerial4("\r");
  2618   001C14  0E3A               	movlw	low STR_12
  2619   001C16  6E06               	movwf	sendStringSerial4@string^0,c
  2620   001C18  5006               	movf	sendStringSerial4@string^0,w,c
  2621   001C1A  A4D8               	btfss	status,2,c
  2622   001C1C  0E0E               	movlw	high __smallconst
  2623   001C1E  6E07               	movwf	(sendStringSerial4@string+1)^0,c
  2624   001C20  EC01  F014         	call	_sendStringSerial4	;wreg free
  2625   001C24                     
  2626                           ;serial.c: 141:     _delay((unsigned long)((1000)*(64000000/4000.0)));
  2627   001C24  0E52               	movlw	82
  2628   001C26  6E56               	movwf	(??_serialColor+1)^0,c
  2629   001C28  0E2B               	movlw	43
  2630   001C2A  6E55               	movwf	??_serialColor^0,c
  2631   001C2C  0E00               	movlw	0
  2632   001C2E                     u3647:
  2633   001C2E  2EE8               	decfsz	wreg,f,c
  2634   001C30  D7FE               	bra	u3647
  2635   001C32  2E55               	decfsz	??_serialColor^0,f,c
  2636   001C34  D7FC               	bra	u3647
  2637   001C36  2E56               	decfsz	(??_serialColor+1)^0,f,c
  2638   001C38  D7FA               	bra	u3647
  2639   001C3A  D000               	nop2	
  2640   001C3C  0012               	return		;funcret
  2641   001C3E                     __end_of_serialColor:
  2642                           	callstack 0
  2643                           
  2644 ;; *************** function _sprintf *****************
  2645 ;; Defined at:
  2646 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
  2647 ;; Parameters:    Size  Location     Type
  2648 ;;  s               1   40[COMRAM] PTR unsigned char 
  2649 ;;		 -> serialColor@testColor(50), 
  2650 ;;  fmt             1   41[COMRAM] PTR const unsigned char 
  2651 ;;		 -> STR_9(4), STR_7(4), STR_5(4), STR_3(4), 
  2652 ;; Auto vars:     Size  Location     Type
  2653 ;;  f              12   47[COMRAM] struct _IO_FILE
  2654 ;;  ret             2    0        int 
  2655 ;;  ap              1   46[COMRAM] PTR void [1]
  2656 ;;		 -> ?_sprintf(2), 
  2657 ;; Return value:  Size  Location     Type
  2658 ;;                  2   40[COMRAM] int 
  2659 ;; Registers used:
  2660 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2661 ;; Tracked objects:
  2662 ;;		On entry : 0/0
  2663 ;;		On exit  : 0/0
  2664 ;;		Unchanged: 0/0
  2665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2666 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2667 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2669 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2670 ;;Total ram usage:       19 bytes
  2671 ;; Hardware stack levels used: 1
  2672 ;; Hardware stack levels required when called: 6
  2673 ;; This function calls:
  2674 ;;		_vfprintf
  2675 ;; This function is called by:
  2676 ;;		_serialColor
  2677 ;; This function uses a non-reentrant model
  2678 ;;
  2679                           
  2680                           	psect	text13
  2681   002A28                     __ptext13:
  2682                           	callstack 0
  2683   002A28                     _sprintf:
  2684                           	callstack 21
  2685   002A28  0E2B               	movlw	low (?_sprintf+2)
  2686   002A2A  6E2F               	movwf	sprintf@ap^0,c
  2687   002A2C  C029  F030         	movff	sprintf@s,sprintf@f
  2688   002A30  0E00               	movlw	0
  2689   002A32  6E34               	movwf	(sprintf@f+4)^0,c
  2690   002A34  0E00               	movlw	0
  2691   002A36  6E33               	movwf	(sprintf@f+3)^0,c
  2692   002A38  0E00               	movlw	0
  2693   002A3A  6E3B               	movwf	(sprintf@f+11)^0,c
  2694   002A3C  0E00               	movlw	0
  2695   002A3E  6E3A               	movwf	(sprintf@f+10)^0,c
  2696   002A40  0E30               	movlw	low sprintf@f
  2697   002A42  6E25               	movwf	vfprintf@fp^0,c
  2698   002A44  C02A  F026         	movff	sprintf@fmt,vfprintf@fmt
  2699   002A48  0E2F               	movlw	low sprintf@ap
  2700   002A4A  6E27               	movwf	vfprintf@ap^0,c
  2701   002A4C  EC84  F014         	call	_vfprintf	;wreg free
  2702   002A50  5029               	movf	sprintf@s^0,w,c
  2703   002A52  2433               	addwf	(sprintf@f+3)^0,w,c
  2704   002A54  6ED9               	movwf	fsr2l,c
  2705   002A56  6ADA               	clrf	fsr2h,c
  2706   002A58  6ADF               	clrf	indf2,c
  2707   002A5A  0012               	return		;funcret
  2708   002A5C                     __end_of_sprintf:
  2709                           	callstack 0
  2710                           
  2711 ;; *************** function _vfprintf *****************
  2712 ;; Defined at:
  2713 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  2714 ;; Parameters:    Size  Location     Type
  2715 ;;  fp              1   36[COMRAM] PTR struct _IO_FILE
  2716 ;;		 -> sprintf@f(12), 
  2717 ;;  fmt             1   37[COMRAM] PTR const unsigned char 
  2718 ;;		 -> STR_9(4), STR_7(4), STR_5(4), STR_3(4), 
  2719 ;;  ap              1   38[COMRAM] PTR PTR void 
  2720 ;;		 -> sprintf@ap(1), 
  2721 ;; Auto vars:     Size  Location     Type
  2722 ;;  cfmt            1   39[COMRAM] PTR unsigned char 
  2723 ;;		 -> STR_9(4), STR_7(4), STR_5(4), STR_3(4), 
  2724 ;; Return value:  Size  Location     Type
  2725 ;;                  2   36[COMRAM] int 
  2726 ;; Registers used:
  2727 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2728 ;; Tracked objects:
  2729 ;;		On entry : 0/0
  2730 ;;		On exit  : 0/0
  2731 ;;		Unchanged: 0/0
  2732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2733 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2734 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2736 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2737 ;;Total ram usage:        4 bytes
  2738 ;; Hardware stack levels used: 1
  2739 ;; Hardware stack levels required when called: 5
  2740 ;; This function calls:
  2741 ;;		_vfpfcnvrt
  2742 ;; This function is called by:
  2743 ;;		_sprintf
  2744 ;; This function uses a non-reentrant model
  2745 ;;
  2746                           
  2747                           	psect	text14
  2748   002908                     __ptext14:
  2749                           	callstack 0
  2750   002908                     _vfprintf:
  2751                           	callstack 21
  2752   002908                     
  2753                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  2754   002908  C026  F028         	movff	vfprintf@fmt,vfprintf@cfmt
  2755                           
  2756                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  2757   00290C  EF90  F014         	goto	l3896
  2758   002910                     l3894:
  2759                           
  2760                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  2761   002910  C025  F019         	movff	vfprintf@fp,vfpfcnvrt@fp
  2762   002914  0E28               	movlw	low vfprintf@cfmt
  2763   002916  6E1A               	movwf	vfpfcnvrt@fmt^0,c
  2764   002918  C027  F01B         	movff	vfprintf@ap,vfpfcnvrt@ap
  2765   00291C  EC94  F008         	call	_vfpfcnvrt	;wreg free
  2766   002920                     l3896:
  2767                           
  2768                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  2769   002920  C028  FFF6         	movff	vfprintf@cfmt,tblptrl
  2770   002924                     	if	1	;There is more than 1 active tblptr byte
  2771   002924  0E0E               	movlw	high __smallconst
  2772   002926  6EF7               	movwf	tblptrh,c
  2773   002928                     	endif
  2774   002928                     	if	0	;tblptru may be non-zero
  2775   002928                     	endif
  2776   002928                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2777   002928  0E00               	movlw	low (__smallconst shr (0+16))
  2778   00292A  6EF8               	movwf	tblptru,c
  2779   00292C                     	endif
  2780   00292C  0008               	tblrd		*
  2781   00292E  50F5               	movf	tablat,w,c
  2782   002930  0900               	iorlw	0
  2783   002932  A4D8               	btfss	status,2,c
  2784   002934  EF9E  F014         	goto	u3011
  2785   002938  EFA0  F014         	goto	u3010
  2786   00293C                     u3011:
  2787   00293C  EF88  F014         	goto	l3894
  2788   002940                     u3010:
  2789   002940                     
  2790                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  2791   002940  0E00               	movlw	0
  2792   002942  6E26               	movwf	(?_vfprintf+1)^0,c
  2793   002944  0E00               	movlw	0
  2794   002946  6E25               	movwf	?_vfprintf^0,c
  2795   002948  0012               	return		;funcret
  2796   00294A                     __end_of_vfprintf:
  2797                           	callstack 0
  2798                           
  2799 ;; *************** function _vfpfcnvrt *****************
  2800 ;; Defined at:
  2801 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  2802 ;; Parameters:    Size  Location     Type
  2803 ;;  fp              1   24[COMRAM] PTR struct _IO_FILE
  2804 ;;		 -> sprintf@f(12), 
  2805 ;;  fmt             1   25[COMRAM] PTR PTR unsigned char 
  2806 ;;		 -> vfprintf@cfmt(1), 
  2807 ;;  ap              1   26[COMRAM] PTR PTR void 
  2808 ;;		 -> sprintf@ap(1), 
  2809 ;; Auto vars:     Size  Location     Type
  2810 ;;  convarg         4   30[COMRAM] struct .
  2811 ;;  c               1   35[COMRAM] unsigned char 
  2812 ;;  cp              1   34[COMRAM] PTR unsigned char 
  2813 ;;		 -> STR_9(4), STR_7(4), STR_5(4), STR_3(4), 
  2814 ;;  done            1   29[COMRAM] _Bool 
  2815 ;; Return value:  Size  Location     Type
  2816 ;;                  1    wreg      void 
  2817 ;; Registers used:
  2818 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2819 ;; Tracked objects:
  2820 ;;		On entry : 0/0
  2821 ;;		On exit  : 0/0
  2822 ;;		Unchanged: 0/0
  2823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2824 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2825 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2826 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2827 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2828 ;;Total ram usage:       12 bytes
  2829 ;; Hardware stack levels used: 1
  2830 ;; Hardware stack levels required when called: 4
  2831 ;; This function calls:
  2832 ;;		___aldiv
  2833 ;;		___almod
  2834 ;;		_abs
  2835 ;;		_fputc
  2836 ;; This function is called by:
  2837 ;;		_vfprintf
  2838 ;; This function uses a non-reentrant model
  2839 ;;
  2840                           
  2841                           	psect	text15
  2842   001128                     __ptext15:
  2843                           	callstack 0
  2844   001128                     _vfpfcnvrt:
  2845                           	callstack 21
  2846   001128                     
  2847                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  2848   001128  501A               	movf	vfpfcnvrt@fmt^0,w,c
  2849   00112A  6ED9               	movwf	fsr2l,c
  2850   00112C  6ADA               	clrf	fsr2h,c
  2851   00112E  CFDF FFF6          	movff	indf2,tblptrl
  2852   001132                     	if	1	;There is more than 1 active tblptr byte
  2853   001132  0E0E               	movlw	high __smallconst
  2854   001134  6EF7               	movwf	tblptrh,c
  2855   001136                     	endif
  2856   001136                     	if	0	;tblptru may be non-zero
  2857   001136                     	endif
  2858   001136                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2859   001136  0E00               	movlw	low (__smallconst shr (0+16))
  2860   001138  6EF8               	movwf	tblptru,c
  2861   00113A                     	endif
  2862   00113A  0008               	tblrd		*
  2863   00113C  50F5               	movf	tablat,w,c
  2864   00113E  0A25               	xorlw	37
  2865   001140  A4D8               	btfss	status,2,c
  2866   001142  EFA5  F008         	goto	u2801
  2867   001146  EFA7  F008         	goto	u2800
  2868   00114A                     u2801:
  2869   00114A  EFE0  F009         	goto	l3752
  2870   00114E                     u2800:
  2871   00114E                     
  2872                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  2873   00114E  501A               	movf	vfpfcnvrt@fmt^0,w,c
  2874   001150  6ED9               	movwf	fsr2l,c
  2875   001152  6ADA               	clrf	fsr2h,c
  2876   001154  2ADF               	incf	indf2,f,c
  2877   001156                     
  2878                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  2879   001156  0E00               	movlw	0
  2880   001158  0101               	movlb	1	; () banked
  2881   00115A  6FE5               	movwf	(_width+1)& (0+255),b
  2882   00115C  0E00               	movlw	0
  2883   00115E  6FE4               	movwf	_width& (0+255),b
  2884   001160  C1E4  F0F8         	movff	_width,_flags
  2885   001164                     
  2886                           ; BSR set to: 1
  2887                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  2888   001164  69E6               	setf	_prec& (0+255),b
  2889   001166  69E7               	setf	(_prec+1)& (0+255),b
  2890   001168                     
  2891                           ; BSR set to: 1
  2892                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  2893   001168  501A               	movf	vfpfcnvrt@fmt^0,w,c
  2894   00116A  6ED9               	movwf	fsr2l,c
  2895   00116C  6ADA               	clrf	fsr2h,c
  2896   00116E  50DF               	movf	indf2,w,c
  2897   001170  6E23               	movwf	vfpfcnvrt@cp^0,c
  2898   001172                     
  2899                           ; BSR set to: 1
  2900                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1293:   c = *cp;
  2901   001172  C023  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2902   001176                     	if	1	;There is more than 1 active tblptr byte
  2903   001176  0E0E               	movlw	high __smallconst
  2904   001178  6EF7               	movwf	tblptrh,c
  2905   00117A                     	endif
  2906   00117A                     	if	0	;tblptru may be non-zero
  2907   00117A                     	endif
  2908   00117A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2909   00117A  0E00               	movlw	low (__smallconst shr (0+16))
  2910   00117C  6EF8               	movwf	tblptru,c
  2911   00117E                     	endif
  2912   00117E  0008               	tblrd		*
  2913   001180  CFF5 F024          	movff	tablat,vfpfcnvrt@c
  2914                           
  2915                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1294:   switch(c)
      +                           {
  2916   001184  EFCF  F008         	goto	l3708
  2917   001188                     l3700:
  2918                           
  2919                           ; BSR set to: 1
  2920                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1309:     cp++;
  2921   001188  2A23               	incf	vfpfcnvrt@cp^0,f,c
  2922                           
  2923                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1316:     break;
  2924   00118A  EFE8  F008         	goto	l3710
  2925   00118E                     l3702:
  2926                           
  2927                           ; BSR set to: 1
  2928                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1350:     c = 'i'
      +                          ;
  2929   00118E  0E69               	movlw	105
  2930   001190  6E24               	movwf	vfpfcnvrt@c^0,c
  2931                           
  2932                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1351:     break;
  2933   001192  EFE8  F008         	goto	l3710
  2934   001196                     l3704:
  2935                           
  2936                           ; BSR set to: 1
  2937                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1353:     c = 0;
  2938   001196  0E00               	movlw	0
  2939   001198  6E24               	movwf	vfpfcnvrt@c^0,c
  2940                           
  2941                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1354:     break;
  2942   00119A  EFE8  F008         	goto	l3710
  2943   00119E                     l3708:
  2944                           
  2945                           ; BSR set to: 1
  2946   00119E  5024               	movf	vfpfcnvrt@c^0,w,c
  2947   0011A0  6E1C               	movwf	??_vfpfcnvrt^0,c
  2948   0011A2  6A1D               	clrf	(??_vfpfcnvrt+1)^0,c
  2949                           
  2950                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2951                           ; Switch size 1, requested type "simple"
  2952                           ; Number of cases is 1, Range of values is 0 to 0
  2953                           ; switch strategies available:
  2954                           ; Name         Instructions Cycles
  2955                           ; simple_byte            4     3 (average)
  2956                           ;	Chosen strategy is simple_byte
  2957   0011A4  501D               	movf	(??_vfpfcnvrt+1)^0,w,c
  2958   0011A6  0A00               	xorlw	0	; case 0
  2959   0011A8  B4D8               	btfsc	status,2,c
  2960   0011AA  EFD9  F008         	goto	l4420
  2961   0011AE  EFCB  F008         	goto	l3704
  2962   0011B2                     l4420:
  2963                           
  2964                           ; BSR set to: 1
  2965                           ; Switch size 1, requested type "simple"
  2966                           ; Number of cases is 3, Range of values is 100 to 108
  2967                           ; switch strategies available:
  2968                           ; Name         Instructions Cycles
  2969                           ; simple_byte           10     6 (average)
  2970                           ;	Chosen strategy is simple_byte
  2971   0011B2  501C               	movf	??_vfpfcnvrt^0,w,c
  2972   0011B4  0A64               	xorlw	100	; case 100
  2973   0011B6  B4D8               	btfsc	status,2,c
  2974   0011B8  EFC7  F008         	goto	l3702
  2975   0011BC  0A0D               	xorlw	13	; case 105
  2976   0011BE  B4D8               	btfsc	status,2,c
  2977   0011C0  EFC7  F008         	goto	l3702
  2978   0011C4  0A05               	xorlw	5	; case 108
  2979   0011C6  B4D8               	btfsc	status,2,c
  2980   0011C8  EFC4  F008         	goto	l3700
  2981   0011CC  EFCB  F008         	goto	l3704
  2982   0011D0                     l3710:
  2983                           
  2984                           ; BSR set to: 1
  2985                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  2986   0011D0  C023  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2987   0011D4                     	if	1	;There is more than 1 active tblptr byte
  2988   0011D4  0E0E               	movlw	high __smallconst
  2989   0011D6  6EF7               	movwf	tblptrh,c
  2990   0011D8                     	endif
  2991   0011D8                     	if	0	;tblptru may be non-zero
  2992   0011D8                     	endif
  2993   0011D8                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2994   0011D8  0E00               	movlw	low (__smallconst shr (0+16))
  2995   0011DA  6EF8               	movwf	tblptru,c
  2996   0011DC                     	endif
  2997   0011DC  0008               	tblrd		*
  2998   0011DE  50F5               	movf	tablat,w,c
  2999   0011E0  0A64               	xorlw	100
  3000   0011E2  B4D8               	btfsc	status,2,c
  3001   0011E4  EFF6  F008         	goto	u2811
  3002   0011E8  EFF8  F008         	goto	u2810
  3003   0011EC                     u2811:
  3004   0011EC  EF2F  F009         	goto	l3720
  3005   0011F0                     u2810:
  3006   0011F0                     
  3007                           ; BSR set to: 1
  3008   0011F0  C023  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  3009   0011F4                     	if	1	;There is more than 1 active tblptr byte
  3010   0011F4  0E0E               	movlw	high __smallconst
  3011   0011F6  6EF7               	movwf	tblptrh,c
  3012   0011F8                     	endif
  3013   0011F8                     	if	0	;tblptru may be non-zero
  3014   0011F8                     	endif
  3015   0011F8                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3016   0011F8  0E00               	movlw	low (__smallconst shr (0+16))
  3017   0011FA  6EF8               	movwf	tblptru,c
  3018   0011FC                     	endif
  3019   0011FC  0008               	tblrd		*
  3020   0011FE  50F5               	movf	tablat,w,c
  3021   001200  0A69               	xorlw	105
  3022   001202  A4D8               	btfss	status,2,c
  3023   001204  EF06  F009         	goto	u2821
  3024   001208  EF08  F009         	goto	u2820
  3025   00120C                     u2821:
  3026   00120C  EFDA  F009         	goto	l3748
  3027   001210                     u2820:
  3028   001210  EF2F  F009         	goto	l3720
  3029   001214                     l3714:
  3030                           
  3031                           ; BSR set to: 1
  3032                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1365:      convar
      +                          g.sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  3033   001214  501B               	movf	vfpfcnvrt@ap^0,w,c
  3034   001216  6ED9               	movwf	fsr2l,c
  3035   001218  6ADA               	clrf	fsr2h,c
  3036   00121A  50DF               	movf	indf2,w,c
  3037   00121C  2ADF               	incf	indf2,f,c
  3038   00121E  2ADF               	incf	indf2,f,c
  3039   001220  6ED9               	movwf	fsr2l,c
  3040   001222  6ADA               	clrf	fsr2h,c
  3041   001224  CFDE F01F          	movff	postinc2,vfpfcnvrt@convarg
  3042   001228  CFDD F020          	movff	postdec2,vfpfcnvrt@convarg+1
  3043   00122C  0E00               	movlw	0
  3044   00122E  BE20               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  3045   001230  0EFF               	movlw	-1
  3046   001232  6E21               	movwf	(vfpfcnvrt@convarg+2)^0,c
  3047   001234  6E22               	movwf	(vfpfcnvrt@convarg+3)^0,c
  3048                           
  3049                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1366:      break;
  3050   001236  EF44  F009         	goto	l3722
  3051   00123A                     l3716:
  3052                           
  3053                           ; BSR set to: 1
  3054                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1379:      convar
      +                          g.sint = (vfpf_sint_t)(*(long *)__va_arg(*(long **)ap, (long)0));
  3055   00123A  501B               	movf	vfpfcnvrt@ap^0,w,c
  3056   00123C  6ED9               	movwf	fsr2l,c
  3057   00123E  6ADA               	clrf	fsr2h,c
  3058   001240  0E04               	movlw	4
  3059   001242  26DF               	addwf	indf2,f,c
  3060   001244  5CDF               	subwf	indf2,w,c
  3061   001246  6ED9               	movwf	fsr2l,c
  3062   001248  6ADA               	clrf	fsr2h,c
  3063   00124A  CFDE F01F          	movff	postinc2,vfpfcnvrt@convarg
  3064   00124E  CFDE F020          	movff	postinc2,vfpfcnvrt@convarg+1
  3065   001252  CFDE F021          	movff	postinc2,vfpfcnvrt@convarg+2
  3066   001256  CFDE F022          	movff	postinc2,vfpfcnvrt@convarg+3
  3067                           
  3068                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1380:      break;
  3069   00125A  EF44  F009         	goto	l3722
  3070   00125E                     l3720:
  3071                           
  3072                           ; BSR set to: 1
  3073   00125E  5024               	movf	vfpfcnvrt@c^0,w,c
  3074   001260  6E1C               	movwf	??_vfpfcnvrt^0,c
  3075   001262  6A1D               	clrf	(??_vfpfcnvrt+1)^0,c
  3076                           
  3077                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3078                           ; Switch size 1, requested type "simple"
  3079                           ; Number of cases is 1, Range of values is 0 to 0
  3080                           ; switch strategies available:
  3081                           ; Name         Instructions Cycles
  3082                           ; simple_byte            4     3 (average)
  3083                           ;	Chosen strategy is simple_byte
  3084   001264  501D               	movf	(??_vfpfcnvrt+1)^0,w,c
  3085   001266  0A00               	xorlw	0	; case 0
  3086   001268  B4D8               	btfsc	status,2,c
  3087   00126A  EF39  F009         	goto	l4422
  3088   00126E  EF44  F009         	goto	l3722
  3089   001272                     l4422:
  3090                           
  3091                           ; BSR set to: 1
  3092                           ; Switch size 1, requested type "simple"
  3093                           ; Number of cases is 2, Range of values is 105 to 108
  3094                           ; switch strategies available:
  3095                           ; Name         Instructions Cycles
  3096                           ; simple_byte            7     4 (average)
  3097                           ;	Chosen strategy is simple_byte
  3098   001272  501C               	movf	??_vfpfcnvrt^0,w,c
  3099   001274  0A69               	xorlw	105	; case 105
  3100   001276  B4D8               	btfsc	status,2,c
  3101   001278  EF0A  F009         	goto	l3714
  3102   00127C  0A05               	xorlw	5	; case 108
  3103   00127E  B4D8               	btfsc	status,2,c
  3104   001280  EF1D  F009         	goto	l3716
  3105   001284  EF44  F009         	goto	l3722
  3106   001288                     l3722:
  3107                           
  3108                           ; BSR set to: 1
  3109                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  3110   001288  501A               	movf	vfpfcnvrt@fmt^0,w,c
  3111   00128A  6ED9               	movwf	fsr2l,c
  3112   00128C  6ADA               	clrf	fsr2h,c
  3113   00128E  2823               	incf	vfpfcnvrt@cp^0,w,c
  3114   001290  6EDF               	movwf	indf2,c
  3115   001292                     
  3116                           ; BSR set to: 1
  3117                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1408:    c = size
      +                          of(dbuf);
  3118   001292  0E20               	movlw	32
  3119   001294  6E24               	movwf	vfpfcnvrt@c^0,c
  3120   001296                     
  3121                           ; BSR set to: 1
  3122                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1409:    done = c
      +                          onvarg.sint < 0;
  3123   001296  BE22               	btfsc	(vfpfcnvrt@convarg+3)^0,7,c
  3124   001298  EF50  F009         	goto	u2831
  3125   00129C  EF53  F009         	goto	u2830
  3126   0012A0                     u2831:
  3127   0012A0  0E01               	movlw	1
  3128   0012A2  EF54  F009         	goto	u2840
  3129   0012A6                     u2830:
  3130   0012A6  0E00               	movlw	0
  3131   0012A8                     u2840:
  3132   0012A8  6E1E               	movwf	vfpfcnvrt@done^0,c
  3133   0012AA                     l3728:
  3134                           
  3135                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1411:     dbuf[--
      +                          c] = abs(convarg.sint % 10) + '0';
  3136   0012AA  0624               	decf	vfpfcnvrt@c^0,f,c
  3137   0012AC  0E3C               	movlw	low _dbuf
  3138   0012AE  2424               	addwf	vfpfcnvrt@c^0,w,c
  3139   0012B0  6ED9               	movwf	fsr2l,c
  3140   0012B2  6ADA               	clrf	fsr2h,c
  3141   0012B4  0E03               	movlw	high _dbuf
  3142   0012B6  22DA               	addwfc	fsr2h,f,c
  3143   0012B8  C01F  F005         	movff	vfpfcnvrt@convarg,___almod@dividend
  3144   0012BC  C020  F006         	movff	vfpfcnvrt@convarg+1,___almod@dividend+1
  3145   0012C0  C021  F007         	movff	vfpfcnvrt@convarg+2,___almod@dividend+2
  3146   0012C4  C022  F008         	movff	vfpfcnvrt@convarg+3,___almod@dividend+3
  3147   0012C8  0E0A               	movlw	10
  3148   0012CA  6E09               	movwf	___almod@divisor^0,c
  3149   0012CC  0E00               	movlw	0
  3150   0012CE  6E0A               	movwf	(___almod@divisor+1)^0,c
  3151   0012D0  0E00               	movlw	0
  3152   0012D2  6E0B               	movwf	(___almod@divisor+2)^0,c
  3153   0012D4  0E00               	movlw	0
  3154   0012D6  6E0C               	movwf	(___almod@divisor+3)^0,c
  3155   0012D8  EC32  F010         	call	___almod	;wreg free
  3156   0012DC  C005  F00F         	movff	?___almod,abs@a
  3157   0012E0  C006  F010         	movff	?___almod+1,abs@a+1
  3158   0012E4  EC2E  F015         	call	_abs	;wreg free
  3159   0012E8  500F               	movf	?_abs^0,w,c
  3160   0012EA  0F30               	addlw	48
  3161   0012EC  6EDF               	movwf	indf2,c
  3162   0012EE                     
  3163                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1412:     convarg
      +                          .sint /= 10;
  3164   0012EE  C01F  F00B         	movff	vfpfcnvrt@convarg,___aldiv@dividend
  3165   0012F2  C020  F00C         	movff	vfpfcnvrt@convarg+1,___aldiv@dividend+1
  3166   0012F6  C021  F00D         	movff	vfpfcnvrt@convarg+2,___aldiv@dividend+2
  3167   0012FA  C022  F00E         	movff	vfpfcnvrt@convarg+3,___aldiv@dividend+3
  3168   0012FE  0E0A               	movlw	10
  3169   001300  6E0F               	movwf	___aldiv@divisor^0,c
  3170   001302  0E00               	movlw	0
  3171   001304  6E10               	movwf	(___aldiv@divisor+1)^0,c
  3172   001306  0E00               	movlw	0
  3173   001308  6E11               	movwf	(___aldiv@divisor+2)^0,c
  3174   00130A  0E00               	movlw	0
  3175   00130C  6E12               	movwf	(___aldiv@divisor+3)^0,c
  3176   00130E  EC2B  F00F         	call	___aldiv	;wreg free
  3177   001312  C00B  F01F         	movff	?___aldiv,vfpfcnvrt@convarg
  3178   001316  C00C  F020         	movff	?___aldiv+1,vfpfcnvrt@convarg+1
  3179   00131A  C00D  F021         	movff	?___aldiv+2,vfpfcnvrt@convarg+2
  3180   00131E  C00E  F022         	movff	?___aldiv+3,vfpfcnvrt@convarg+3
  3181   001322                     
  3182                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1416:    } while 
      +                          (convarg.sint != 0 && c != 0);
  3183   001322  501F               	movf	vfpfcnvrt@convarg^0,w,c
  3184   001324  1020               	iorwf	(vfpfcnvrt@convarg+1)^0,w,c
  3185   001326  1021               	iorwf	(vfpfcnvrt@convarg+2)^0,w,c
  3186   001328  1022               	iorwf	(vfpfcnvrt@convarg+3)^0,w,c
  3187   00132A  B4D8               	btfsc	status,2,c
  3188   00132C  EF9A  F009         	goto	u2851
  3189   001330  EF9C  F009         	goto	u2850
  3190   001334                     u2851:
  3191   001334  EFA4  F009         	goto	l3736
  3192   001338                     u2850:
  3193   001338  5024               	movf	vfpfcnvrt@c^0,w,c
  3194   00133A  A4D8               	btfss	status,2,c
  3195   00133C  EFA2  F009         	goto	u2861
  3196   001340  EFA4  F009         	goto	u2860
  3197   001344                     u2861:
  3198   001344  EF55  F009         	goto	l3728
  3199   001348                     u2860:
  3200   001348                     l3736:
  3201                           
  3202                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1417:    if (c !=
      +                           0 && done) {
  3203   001348  5024               	movf	vfpfcnvrt@c^0,w,c
  3204   00134A  B4D8               	btfsc	status,2,c
  3205   00134C  EFAA  F009         	goto	u2871
  3206   001350  EFAC  F009         	goto	u2870
  3207   001354                     u2871:
  3208   001354  EFCF  F009         	goto	l3746
  3209   001358                     u2870:
  3210   001358  501E               	movf	vfpfcnvrt@done^0,w,c
  3211   00135A  B4D8               	btfsc	status,2,c
  3212   00135C  EFB2  F009         	goto	u2881
  3213   001360  EFB4  F009         	goto	u2880
  3214   001364                     u2881:
  3215   001364  EFCF  F009         	goto	l3746
  3216   001368                     u2880:
  3217   001368                     
  3218                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1418:     dbuf[--
      +                          c] = '-';
  3219   001368  0624               	decf	vfpfcnvrt@c^0,f,c
  3220   00136A  0E3C               	movlw	low _dbuf
  3221   00136C  2424               	addwf	vfpfcnvrt@c^0,w,c
  3222   00136E  6ED9               	movwf	fsr2l,c
  3223   001370  6ADA               	clrf	fsr2h,c
  3224   001372  0E03               	movlw	high _dbuf
  3225   001374  22DA               	addwfc	fsr2h,f,c
  3226   001376  0E2D               	movlw	45
  3227   001378  6EDF               	movwf	indf2,c
  3228   00137A  EFCF  F009         	goto	l3746
  3229   00137E                     l3742:
  3230                           
  3231                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1424:     fputc(d
      +                          buf[c++], fp);
  3232   00137E  0E3C               	movlw	low _dbuf
  3233   001380  2424               	addwf	vfpfcnvrt@c^0,w,c
  3234   001382  6ED9               	movwf	fsr2l,c
  3235   001384  6ADA               	clrf	fsr2h,c
  3236   001386  0E03               	movlw	high _dbuf
  3237   001388  22DA               	addwfc	fsr2h,f,c
  3238   00138A  50DF               	movf	indf2,w,c
  3239   00138C  6E1C               	movwf	??_vfpfcnvrt^0,c
  3240   00138E  501C               	movf	??_vfpfcnvrt^0,w,c
  3241   001390  6E05               	movwf	fputc@c^0,c
  3242   001392  6A06               	clrf	(fputc@c+1)^0,c
  3243   001394  C019  F007         	movff	vfpfcnvrt@fp,fputc@fp
  3244   001398  ECE7  F011         	call	_fputc	;wreg free
  3245   00139C  2A24               	incf	vfpfcnvrt@c^0,f,c
  3246   00139E                     l3746:
  3247                           
  3248                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1423:    while (c
      +                           != sizeof(dbuf)) {
  3249   00139E  0E20               	movlw	32
  3250   0013A0  1824               	xorwf	vfpfcnvrt@c^0,w,c
  3251   0013A2  A4D8               	btfss	status,2,c
  3252   0013A4  EFD6  F009         	goto	u2891
  3253   0013A8  EFD8  F009         	goto	u2890
  3254   0013AC                     u2891:
  3255   0013AC  EFBF  F009         	goto	l3742
  3256   0013B0                     u2890:
  3257   0013B0  EFF3  F009         	goto	l1347
  3258   0013B4                     l3748:
  3259                           
  3260                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  3261   0013B4  501A               	movf	vfpfcnvrt@fmt^0,w,c
  3262   0013B6  6ED9               	movwf	fsr2l,c
  3263   0013B8  6ADA               	clrf	fsr2h,c
  3264   0013BA  2ADF               	incf	indf2,f,c
  3265   0013BC  EFF3  F009         	goto	l1347
  3266   0013C0                     l3752:
  3267                           
  3268                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  3269   0013C0  501A               	movf	vfpfcnvrt@fmt^0,w,c
  3270   0013C2  6ED9               	movwf	fsr2l,c
  3271   0013C4  6ADA               	clrf	fsr2h,c
  3272   0013C6  CFDF FFF6          	movff	indf2,tblptrl
  3273   0013CA                     	if	1	;There is more than 1 active tblptr byte
  3274   0013CA  0E0E               	movlw	high __smallconst
  3275   0013CC  6EF7               	movwf	tblptrh,c
  3276   0013CE                     	endif
  3277   0013CE                     	if	0	;tblptru may be non-zero
  3278   0013CE                     	endif
  3279   0013CE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3280   0013CE  0E00               	movlw	low (__smallconst shr (0+16))
  3281   0013D0  6EF8               	movwf	tblptru,c
  3282   0013D2                     	endif
  3283   0013D2  0008               	tblrd		*
  3284   0013D4  50F5               	movf	tablat,w,c
  3285   0013D6  6E05               	movwf	fputc@c^0,c
  3286   0013D8  6A06               	clrf	(fputc@c+1)^0,c
  3287   0013DA  C019  F007         	movff	vfpfcnvrt@fp,fputc@fp
  3288   0013DE  ECE7  F011         	call	_fputc	;wreg free
  3289   0013E2  EFDA  F009         	goto	l3748
  3290   0013E6                     l1347:
  3291   0013E6  0012               	return		;funcret
  3292   0013E8                     __end_of_vfpfcnvrt:
  3293                           	callstack 0
  3294                           
  3295 ;; *************** function _fputc *****************
  3296 ;; Defined at:
  3297 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
  3298 ;; Parameters:    Size  Location     Type
  3299 ;;  c               2    4[COMRAM] int 
  3300 ;;  fp              1    6[COMRAM] PTR struct _IO_FILE
  3301 ;;		 -> sprintf@f(12), 
  3302 ;; Auto vars:     Size  Location     Type
  3303 ;;		None
  3304 ;; Return value:  Size  Location     Type
  3305 ;;                  2    4[COMRAM] int 
  3306 ;; Registers used:
  3307 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3308 ;; Tracked objects:
  3309 ;;		On entry : 0/0
  3310 ;;		On exit  : 0/0
  3311 ;;		Unchanged: 0/0
  3312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3313 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3314 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3315 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3316 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3317 ;;Total ram usage:        8 bytes
  3318 ;; Hardware stack levels used: 1
  3319 ;; Hardware stack levels required when called: 3
  3320 ;; This function calls:
  3321 ;;		_putch
  3322 ;; This function is called by:
  3323 ;;		_vfpfcnvrt
  3324 ;; This function uses a non-reentrant model
  3325 ;;
  3326                           
  3327                           	psect	text16
  3328   0023CE                     __ptext16:
  3329                           	callstack 0
  3330   0023CE                     _fputc:
  3331                           	callstack 21
  3332   0023CE  5007               	movf	fputc@fp^0,w,c
  3333   0023D0  B4D8               	btfsc	status,2,c
  3334   0023D2  EFED  F011         	goto	u2721
  3335   0023D6  EFEF  F011         	goto	u2720
  3336   0023DA                     u2721:
  3337   0023DA  EFF7  F011         	goto	l3578
  3338   0023DE                     u2720:
  3339   0023DE  5007               	movf	fputc@fp^0,w,c
  3340   0023E0  A4D8               	btfss	status,2,c
  3341   0023E2  EFF5  F011         	goto	u2731
  3342   0023E6  EFF7  F011         	goto	u2730
  3343   0023EA                     u2731:
  3344   0023EA  EFFC  F011         	goto	l3580
  3345   0023EE                     u2730:
  3346   0023EE                     l3578:
  3347   0023EE  5005               	movf	fputc@c^0,w,c
  3348   0023F0  EC26  F016         	call	_putch
  3349   0023F4  EF3B  F012         	goto	l1365
  3350   0023F8                     l3580:
  3351   0023F8  5007               	movf	fputc@fp^0,w,c
  3352   0023FA  6ED9               	movwf	fsr2l,c
  3353   0023FC  6ADA               	clrf	fsr2h,c
  3354   0023FE  0E0A               	movlw	10
  3355   002400  26D9               	addwf	fsr2l,f,c
  3356   002402  50DE               	movf	postinc2,w,c
  3357   002404  10DE               	iorwf	postinc2,w,c
  3358   002406  B4D8               	btfsc	status,2,c
  3359   002408  EF08  F012         	goto	u2741
  3360   00240C  EF0A  F012         	goto	u2740
  3361   002410                     u2741:
  3362   002410  EF23  F012         	goto	l3584
  3363   002414                     u2740:
  3364   002414  5007               	movf	fputc@fp^0,w,c
  3365   002416  6ED9               	movwf	fsr2l,c
  3366   002418  6ADA               	clrf	fsr2h,c
  3367   00241A  0E0A               	movlw	10
  3368   00241C  26D9               	addwf	fsr2l,f,c
  3369   00241E  5007               	movf	fputc@fp^0,w,c
  3370   002420  6EE1               	movwf	fsr1l,c
  3371   002422  6AE2               	clrf	fsr1h,c
  3372   002424  0E03               	movlw	3
  3373   002426  26E1               	addwf	fsr1l,f,c
  3374   002428  50DE               	movf	postinc2,w,c
  3375   00242A  5CE6               	subwf	postinc1,w,c
  3376   00242C  50E6               	movf	postinc1,w,c
  3377   00242E  0A80               	xorlw	128
  3378   002430  6E0C               	movwf	(??_fputc+4)^0,c
  3379   002432  50DE               	movf	postinc2,w,c
  3380   002434  0A80               	xorlw	128
  3381   002436  580C               	subwfb	(??_fputc+4)^0,w,c
  3382   002438  B0D8               	btfsc	status,0,c
  3383   00243A  EF21  F012         	goto	u2751
  3384   00243E  EF23  F012         	goto	u2750
  3385   002442                     u2751:
  3386   002442  EF3B  F012         	goto	l1365
  3387   002446                     u2750:
  3388   002446                     l3584:
  3389   002446  5007               	movf	fputc@fp^0,w,c
  3390   002448  6ED9               	movwf	fsr2l,c
  3391   00244A  6ADA               	clrf	fsr2h,c
  3392   00244C  0E03               	movlw	3
  3393   00244E  26D9               	addwf	fsr2l,f,c
  3394   002450  50DF               	movf	indf2,w,c
  3395   002452  6E08               	movwf	??_fputc^0,c
  3396   002454  5007               	movf	fputc@fp^0,w,c
  3397   002456  6ED9               	movwf	fsr2l,c
  3398   002458  6ADA               	clrf	fsr2h,c
  3399   00245A  50DF               	movf	indf2,w,c
  3400   00245C  2408               	addwf	??_fputc^0,w,c
  3401   00245E  6ED9               	movwf	fsr2l,c
  3402   002460  6ADA               	clrf	fsr2h,c
  3403   002462  C005  FFDF         	movff	fputc@c,indf2
  3404   002466  5007               	movf	fputc@fp^0,w,c
  3405   002468  6ED9               	movwf	fsr2l,c
  3406   00246A  6ADA               	clrf	fsr2h,c
  3407   00246C  0E03               	movlw	3
  3408   00246E  26D9               	addwf	fsr2l,f,c
  3409   002470  2ADE               	incf	postinc2,f,c
  3410   002472  0E00               	movlw	0
  3411   002474  22DD               	addwfc	postdec2,f,c
  3412   002476                     l1365:
  3413   002476  0012               	return		;funcret
  3414   002478                     __end_of_fputc:
  3415                           	callstack 0
  3416                           
  3417 ;; *************** function _putch *****************
  3418 ;; Defined at:
  3419 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
  3420 ;; Parameters:    Size  Location     Type
  3421 ;;  c               1    wreg     unsigned char 
  3422 ;; Auto vars:     Size  Location     Type
  3423 ;;  c               1    0[COMRAM] unsigned char 
  3424 ;; Return value:  Size  Location     Type
  3425 ;;                  1    wreg      void 
  3426 ;; Registers used:
  3427 ;;		wreg
  3428 ;; Tracked objects:
  3429 ;;		On entry : 0/0
  3430 ;;		On exit  : 0/0
  3431 ;;		Unchanged: 0/0
  3432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3436 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3437 ;;Total ram usage:        0 bytes
  3438 ;; Hardware stack levels used: 1
  3439 ;; Hardware stack levels required when called: 2
  3440 ;; This function calls:
  3441 ;;		Nothing
  3442 ;; This function is called by:
  3443 ;;		_fputc
  3444 ;; This function uses a non-reentrant model
  3445 ;;
  3446                           
  3447                           	psect	text17
  3448   002C4C                     __ptext17:
  3449                           	callstack 0
  3450   002C4C                     _putch:
  3451                           	callstack 21
  3452   002C4C  0012               	return		;funcret
  3453   002C4E                     __end_of_putch:
  3454                           	callstack 0
  3455                           
  3456 ;; *************** function ___almod *****************
  3457 ;; Defined at:
  3458 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\almod.c"
  3459 ;; Parameters:    Size  Location     Type
  3460 ;;  dividend        4    4[COMRAM] long 
  3461 ;;  divisor         4    8[COMRAM] long 
  3462 ;; Auto vars:     Size  Location     Type
  3463 ;;  sign            1   13[COMRAM] unsigned char 
  3464 ;;  counter         1   12[COMRAM] unsigned char 
  3465 ;; Return value:  Size  Location     Type
  3466 ;;                  4    4[COMRAM] long 
  3467 ;; Registers used:
  3468 ;;		wreg, status,2, status,0
  3469 ;; Tracked objects:
  3470 ;;		On entry : 0/0
  3471 ;;		On exit  : 0/0
  3472 ;;		Unchanged: 0/0
  3473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3474 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3475 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3477 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3478 ;;Total ram usage:       10 bytes
  3479 ;; Hardware stack levels used: 1
  3480 ;; Hardware stack levels required when called: 2
  3481 ;; This function calls:
  3482 ;;		Nothing
  3483 ;; This function is called by:
  3484 ;;		_vfpfcnvrt
  3485 ;; This function uses a non-reentrant model
  3486 ;;
  3487                           
  3488                           	psect	text18
  3489   002064                     __ptext18:
  3490                           	callstack 0
  3491   002064                     ___almod:
  3492                           	callstack 22
  3493   002064  0E00               	movlw	0
  3494   002066  6E0E               	movwf	___almod@sign^0,c
  3495   002068  BE08               	btfsc	(___almod@dividend+3)^0,7,c
  3496   00206A  EF3B  F010         	goto	u2660
  3497   00206E  EF39  F010         	goto	u2661
  3498   002072                     u2661:
  3499   002072  EF45  F010         	goto	l3546
  3500   002076                     u2660:
  3501   002076  1E08               	comf	(___almod@dividend+3)^0,f,c
  3502   002078  1E07               	comf	(___almod@dividend+2)^0,f,c
  3503   00207A  1E06               	comf	(___almod@dividend+1)^0,f,c
  3504   00207C  6C05               	negf	___almod@dividend^0,c
  3505   00207E  0E00               	movlw	0
  3506   002080  2206               	addwfc	(___almod@dividend+1)^0,f,c
  3507   002082  2207               	addwfc	(___almod@dividend+2)^0,f,c
  3508   002084  2208               	addwfc	(___almod@dividend+3)^0,f,c
  3509   002086  0E01               	movlw	1
  3510   002088  6E0E               	movwf	___almod@sign^0,c
  3511   00208A                     l3546:
  3512   00208A  BE0C               	btfsc	(___almod@divisor+3)^0,7,c
  3513   00208C  EF4C  F010         	goto	u2670
  3514   002090  EF4A  F010         	goto	u2671
  3515   002094                     u2671:
  3516   002094  EF54  F010         	goto	l3550
  3517   002098                     u2670:
  3518   002098  1E0C               	comf	(___almod@divisor+3)^0,f,c
  3519   00209A  1E0B               	comf	(___almod@divisor+2)^0,f,c
  3520   00209C  1E0A               	comf	(___almod@divisor+1)^0,f,c
  3521   00209E  6C09               	negf	___almod@divisor^0,c
  3522   0020A0  0E00               	movlw	0
  3523   0020A2  220A               	addwfc	(___almod@divisor+1)^0,f,c
  3524   0020A4  220B               	addwfc	(___almod@divisor+2)^0,f,c
  3525   0020A6  220C               	addwfc	(___almod@divisor+3)^0,f,c
  3526   0020A8                     l3550:
  3527   0020A8  5009               	movf	___almod@divisor^0,w,c
  3528   0020AA  100A               	iorwf	(___almod@divisor+1)^0,w,c
  3529   0020AC  100B               	iorwf	(___almod@divisor+2)^0,w,c
  3530   0020AE  100C               	iorwf	(___almod@divisor+3)^0,w,c
  3531   0020B0  B4D8               	btfsc	status,2,c
  3532   0020B2  EF5D  F010         	goto	u2681
  3533   0020B6  EF5F  F010         	goto	u2680
  3534   0020BA                     u2681:
  3535   0020BA  EF8F  F010         	goto	l3566
  3536   0020BE                     u2680:
  3537   0020BE  0E01               	movlw	1
  3538   0020C0  6E0D               	movwf	___almod@counter^0,c
  3539   0020C2  EF69  F010         	goto	l3556
  3540   0020C6                     l3554:
  3541   0020C6  90D8               	bcf	status,0,c
  3542   0020C8  3609               	rlcf	___almod@divisor^0,f,c
  3543   0020CA  360A               	rlcf	(___almod@divisor+1)^0,f,c
  3544   0020CC  360B               	rlcf	(___almod@divisor+2)^0,f,c
  3545   0020CE  360C               	rlcf	(___almod@divisor+3)^0,f,c
  3546   0020D0  2A0D               	incf	___almod@counter^0,f,c
  3547   0020D2                     l3556:
  3548   0020D2  AE0C               	btfss	(___almod@divisor+3)^0,7,c
  3549   0020D4  EF6E  F010         	goto	u2691
  3550   0020D8  EF70  F010         	goto	u2690
  3551   0020DC                     u2691:
  3552   0020DC  EF63  F010         	goto	l3554
  3553   0020E0                     u2690:
  3554   0020E0                     l3558:
  3555   0020E0  5009               	movf	___almod@divisor^0,w,c
  3556   0020E2  5C05               	subwf	___almod@dividend^0,w,c
  3557   0020E4  500A               	movf	(___almod@divisor+1)^0,w,c
  3558   0020E6  5806               	subwfb	(___almod@dividend+1)^0,w,c
  3559   0020E8  500B               	movf	(___almod@divisor+2)^0,w,c
  3560   0020EA  5807               	subwfb	(___almod@dividend+2)^0,w,c
  3561   0020EC  500C               	movf	(___almod@divisor+3)^0,w,c
  3562   0020EE  5808               	subwfb	(___almod@dividend+3)^0,w,c
  3563   0020F0  A0D8               	btfss	status,0,c
  3564   0020F2  EF7D  F010         	goto	u2701
  3565   0020F6  EF7F  F010         	goto	u2700
  3566   0020FA                     u2701:
  3567   0020FA  EF87  F010         	goto	l3562
  3568   0020FE                     u2700:
  3569   0020FE  5009               	movf	___almod@divisor^0,w,c
  3570   002100  5E05               	subwf	___almod@dividend^0,f,c
  3571   002102  500A               	movf	(___almod@divisor+1)^0,w,c
  3572   002104  5A06               	subwfb	(___almod@dividend+1)^0,f,c
  3573   002106  500B               	movf	(___almod@divisor+2)^0,w,c
  3574   002108  5A07               	subwfb	(___almod@dividend+2)^0,f,c
  3575   00210A  500C               	movf	(___almod@divisor+3)^0,w,c
  3576   00210C  5A08               	subwfb	(___almod@dividend+3)^0,f,c
  3577   00210E                     l3562:
  3578   00210E  90D8               	bcf	status,0,c
  3579   002110  320C               	rrcf	(___almod@divisor+3)^0,f,c
  3580   002112  320B               	rrcf	(___almod@divisor+2)^0,f,c
  3581   002114  320A               	rrcf	(___almod@divisor+1)^0,f,c
  3582   002116  3209               	rrcf	___almod@divisor^0,f,c
  3583   002118  2E0D               	decfsz	___almod@counter^0,f,c
  3584   00211A  EF70  F010         	goto	l3558
  3585   00211E                     l3566:
  3586   00211E  500E               	movf	___almod@sign^0,w,c
  3587   002120  B4D8               	btfsc	status,2,c
  3588   002122  EF95  F010         	goto	u2711
  3589   002126  EF97  F010         	goto	u2710
  3590   00212A                     u2711:
  3591   00212A  EF9F  F010         	goto	l3570
  3592   00212E                     u2710:
  3593   00212E  1E08               	comf	(___almod@dividend+3)^0,f,c
  3594   002130  1E07               	comf	(___almod@dividend+2)^0,f,c
  3595   002132  1E06               	comf	(___almod@dividend+1)^0,f,c
  3596   002134  6C05               	negf	___almod@dividend^0,c
  3597   002136  0E00               	movlw	0
  3598   002138  2206               	addwfc	(___almod@dividend+1)^0,f,c
  3599   00213A  2207               	addwfc	(___almod@dividend+2)^0,f,c
  3600   00213C  2208               	addwfc	(___almod@dividend+3)^0,f,c
  3601   00213E                     l3570:
  3602   00213E  C005  F005         	movff	___almod@dividend,?___almod
  3603   002142  C006  F006         	movff	___almod@dividend+1,?___almod+1
  3604   002146  C007  F007         	movff	___almod@dividend+2,?___almod+2
  3605   00214A  C008  F008         	movff	___almod@dividend+3,?___almod+3
  3606   00214E  0012               	return		;funcret
  3607   002150                     __end_of___almod:
  3608                           	callstack 0
  3609                           
  3610 ;; *************** function _sendStringSerial4 *****************
  3611 ;; Defined at:
  3612 ;;		line 39 in file "serial.c"
  3613 ;; Parameters:    Size  Location     Type
  3614 ;;  string          2    5[COMRAM] PTR unsigned char 
  3615 ;;		 -> STR_12(2), STR_11(2), STR_10(7), STR_8(6), 
  3616 ;;		 -> STR_6(7), STR_4(5), serialColor@testColor(50), STR_2(7), 
  3617 ;;		 -> STR_1(19), 
  3618 ;; Auto vars:     Size  Location     Type
  3619 ;;		None
  3620 ;; Return value:  Size  Location     Type
  3621 ;;                  1    wreg      void 
  3622 ;; Registers used:
  3623 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3624 ;; Tracked objects:
  3625 ;;		On entry : 0/0
  3626 ;;		On exit  : 0/0
  3627 ;;		Unchanged: 0/0
  3628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3629 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3632 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3633 ;;Total ram usage:        2 bytes
  3634 ;; Hardware stack levels used: 1
  3635 ;; Hardware stack levels required when called: 3
  3636 ;; This function calls:
  3637 ;;		_sendCharSerial4
  3638 ;; This function is called by:
  3639 ;;		_serialColor
  3640 ;;		_calibCards
  3641 ;; This function uses a non-reentrant model
  3642 ;;
  3643                           
  3644                           	psect	text19
  3645   002802                     __ptext19:
  3646                           	callstack 0
  3647   002802                     _sendStringSerial4:
  3648                           	callstack 24
  3649   002802                     
  3650                           ;serial.c: 42:     while(*string != 0){
  3651   002802  EF18  F014         	goto	l3922
  3652   002806                     l3918:
  3653                           
  3654                           ;serial.c: 44:         sendCharSerial4(*string++);
  3655   002806  C006  FFF6         	movff	sendStringSerial4@string,tblptrl
  3656   00280A  C007  FFF7         	movff	sendStringSerial4@string+1,tblptrh
  3657   00280E  0E00               	movlw	low (__smallconst shr (0+16))
  3658   002810  6EF8               	movwf	tblptru,c
  3659   002812  0E0D               	movlw	(high __ramtop+-1)
  3660   002814  64F7               	cpfsgt	tblptrh,c
  3661   002816  D003               	bra	u3057
  3662   002818  0008               	tblrd		*
  3663   00281A  50F5               	movf	tablat,w,c
  3664   00281C  D005               	bra	u3050
  3665   00281E                     u3057:
  3666   00281E  CFF6 FFE9          	movff	tblptrl,fsr0l
  3667   002822  CFF7 FFEA          	movff	tblptrh,fsr0h
  3668   002826  50EF               	movf	indf0,w,c
  3669   002828                     u3050:
  3670   002828  ECF3  F015         	call	_sendCharSerial4
  3671   00282C  4A06               	infsnz	sendStringSerial4@string^0,f,c
  3672   00282E  2A07               	incf	(sendStringSerial4@string+1)^0,f,c
  3673   002830                     l3922:
  3674                           
  3675                           ;serial.c: 42:     while(*string != 0){
  3676   002830  C006  FFF6         	movff	sendStringSerial4@string,tblptrl
  3677   002834  C007  FFF7         	movff	sendStringSerial4@string+1,tblptrh
  3678   002838  0E00               	movlw	low (__smallconst shr (0+16))
  3679   00283A  6EF8               	movwf	tblptru,c
  3680   00283C  0E0D               	movlw	(high __ramtop+-1)
  3681   00283E  64F7               	cpfsgt	tblptrh,c
  3682   002840  D003               	bra	u3067
  3683   002842  0008               	tblrd		*
  3684   002844  50F5               	movf	tablat,w,c
  3685   002846  D005               	bra	u3060
  3686   002848                     u3067:
  3687   002848  CFF6 FFE9          	movff	tblptrl,fsr0l
  3688   00284C  CFF7 FFEA          	movff	tblptrh,fsr0h
  3689   002850  50EF               	movf	indf0,w,c
  3690   002852                     u3060:
  3691   002852  0900               	iorlw	0
  3692   002854  A4D8               	btfss	status,2,c
  3693   002856  EF2F  F014         	goto	u3071
  3694   00285A  EF31  F014         	goto	u3070
  3695   00285E                     u3071:
  3696   00285E  EF03  F014         	goto	l3918
  3697   002862                     u3070:
  3698   002862  0012               	return		;funcret
  3699   002864                     __end_of_sendStringSerial4:
  3700                           	callstack 0
  3701                           
  3702 ;; *************** function _sendCharSerial4 *****************
  3703 ;; Defined at:
  3704 ;;		line 33 in file "serial.c"
  3705 ;; Parameters:    Size  Location     Type
  3706 ;;  charToSend      1    wreg     unsigned char 
  3707 ;; Auto vars:     Size  Location     Type
  3708 ;;  charToSend      1    4[COMRAM] unsigned char 
  3709 ;; Return value:  Size  Location     Type
  3710 ;;                  1    wreg      void 
  3711 ;; Registers used:
  3712 ;;		wreg
  3713 ;; Tracked objects:
  3714 ;;		On entry : 0/0
  3715 ;;		On exit  : 0/0
  3716 ;;		Unchanged: 0/0
  3717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3719 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3721 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3722 ;;Total ram usage:        1 bytes
  3723 ;; Hardware stack levels used: 1
  3724 ;; Hardware stack levels required when called: 2
  3725 ;; This function calls:
  3726 ;;		Nothing
  3727 ;; This function is called by:
  3728 ;;		_sendStringSerial4
  3729 ;;		_serialColor
  3730 ;;		_calibCards
  3731 ;; This function uses a non-reentrant model
  3732 ;;
  3733                           
  3734                           	psect	text20
  3735   002BE6                     __ptext20:
  3736                           	callstack 0
  3737   002BE6                     _sendCharSerial4:
  3738                           	callstack 24
  3739                           
  3740                           ;incstack = 0
  3741                           ;sendCharSerial4@charToSend stored from wreg
  3742   002BE6  6E05               	movwf	sendCharSerial4@charToSend^0,c
  3743   002BE8                     l391:
  3744   002BE8  010E               	movlb	14	; () banked
  3745   002BEA  A537               	btfss	55,2,b	;volatile
  3746   002BEC  EFFA  F015         	goto	u2921
  3747   002BF0  EFFC  F015         	goto	u2920
  3748   002BF4                     u2921:
  3749   002BF4  EFF4  F015         	goto	l391
  3750   002BF8                     u2920:
  3751   002BF8                     
  3752                           ; BSR set to: 14
  3753                           ;serial.c: 35:     TX4REG = charToSend;
  3754   002BF8  C005  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
  3755   002BFC                     
  3756                           ; BSR set to: 14
  3757   002BFC  0012               	return		;funcret
  3758   002BFE                     __end_of_sendCharSerial4:
  3759                           	callstack 0
  3760                           
  3761 ;; *************** function _home *****************
  3762 ;; Defined at:
  3763 ;;		line 328 in file "color.c"
  3764 ;; Parameters:    Size  Location     Type
  3765 ;;  mL              8   67[COMRAM] struct DC_motor
  3766 ;;  mR              8   75[COMRAM] struct DC_motor
  3767 ;;  hist            1   83[COMRAM] PTR struct colorHistory
  3768 ;;		 -> color2instruction@hist(2), 
  3769 ;; Auto vars:     Size  Location     Type
  3770 ;;		None
  3771 ;; Return value:  Size  Location     Type
  3772 ;;                  1    wreg      void 
  3773 ;; Registers used:
  3774 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3775 ;; Tracked objects:
  3776 ;;		On entry : 0/0
  3777 ;;		On exit  : 0/0
  3778 ;;		Unchanged: 0/0
  3779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3780 ;;      Params:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3781 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3783 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3784 ;;Total ram usage:       17 bytes
  3785 ;; Hardware stack levels used: 1
  3786 ;; Hardware stack levels required when called: 7
  3787 ;; This function calls:
  3788 ;;		_useSequence
  3789 ;; This function is called by:
  3790 ;;		_color2instruction
  3791 ;; This function uses a non-reentrant model
  3792 ;;
  3793                           
  3794                           	psect	text21
  3795   002A90                     __ptext21:
  3796                           	callstack 0
  3797   002A90                     _home:
  3798                           	callstack 21
  3799   002A90                     
  3800                           ;color.c: 330:   useSequence(mL,mR,hist);
  3801   002A90  EE20  F044         	lfsr	2,home@mL
  3802   002A94  EE00  F02F         	lfsr	0,useSequence@mL
  3803   002A98  0E07               	movlw	7
  3804   002A9A                     u3161:
  3805   002A9A  CFDB FFEB          	movff	plusw2,plusw0
  3806   002A9E  06E8               	decf	wreg,f,c
  3807   002AA0  E2FC               	bc	u3161
  3808   002AA2  EE20  F04C         	lfsr	2,home@mR
  3809   002AA6  EE00  F037         	lfsr	0,useSequence@mR
  3810   002AAA  0E07               	movlw	7
  3811   002AAC                     u3171:
  3812   002AAC  CFDB FFEB          	movff	plusw2,plusw0
  3813   002AB0  06E8               	decf	wreg,f,c
  3814   002AB2  E2FC               	bc	u3171
  3815   002AB4  C054  F03F         	movff	home@hist,useSequence@history
  3816   002AB8  ECEC  F00C         	call	_useSequence	;wreg free
  3817   002ABC  0012               	return		;funcret
  3818   002ABE                     __end_of_home:
  3819                           	callstack 0
  3820                           
  3821 ;; *************** function _useSequence *****************
  3822 ;; Defined at:
  3823 ;;		line 300 in file "color.c"
  3824 ;; Parameters:    Size  Location     Type
  3825 ;;  mL              8   46[COMRAM] struct DC_motor
  3826 ;;  mR              8   54[COMRAM] struct DC_motor
  3827 ;;  history         1   62[COMRAM] PTR struct colorHistory
  3828 ;;		 -> color2instruction@hist(2), 
  3829 ;; Auto vars:     Size  Location     Type
  3830 ;;  i               2   65[COMRAM] int 
  3831 ;; Return value:  Size  Location     Type
  3832 ;;                  1    wreg      void 
  3833 ;; Registers used:
  3834 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3835 ;; Tracked objects:
  3836 ;;		On entry : 0/0
  3837 ;;		On exit  : 0/0
  3838 ;;		Unchanged: 0/0
  3839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3840 ;;      Params:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3841 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3842 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3843 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3844 ;;Total ram usage:       21 bytes
  3845 ;; Hardware stack levels used: 1
  3846 ;; Hardware stack levels required when called: 6
  3847 ;; This function calls:
  3848 ;;		_goStraight
  3849 ;;		_stop
  3850 ;;		_turn
  3851 ;; This function is called by:
  3852 ;;		_home
  3853 ;; This function uses a non-reentrant model
  3854 ;;
  3855                           
  3856                           	psect	text22
  3857   0019D8                     __ptext22:
  3858                           	callstack 0
  3859   0019D8                     _useSequence:
  3860                           	callstack 21
  3861   0019D8                     
  3862                           ;color.c: 307:  for(int i = pos; i > 0; i--){
  3863   0019D8  C0F4  F042         	movff	_pos,useSequence@i
  3864   0019DC  C0F5  F043         	movff	_pos+1,useSequence@i+1
  3865   0019E0                     l3926:
  3866   0019E0  BE43               	btfsc	(useSequence@i+1)^0,7,c
  3867   0019E2  EFFD  F00C         	goto	u3080
  3868   0019E6  5043               	movf	(useSequence@i+1)^0,w,c
  3869   0019E8  E106               	bnz	u3081
  3870   0019EA  0442               	decf	useSequence@i^0,w,c
  3871   0019EC  B0D8               	btfsc	status,0,c
  3872   0019EE  EFFB  F00C         	goto	u3081
  3873   0019F2  EFFD  F00C         	goto	u3080
  3874   0019F6                     u3081:
  3875   0019F6  EFFF  F00C         	goto	l3930
  3876   0019FA                     u3080:
  3877   0019FA  EF84  F00D         	goto	l3944
  3878   0019FE                     l3930:
  3879                           
  3880                           ;color.c: 308:    goStraight(&mL,&mR,history -> direction[i-1],history -> squaresb4[i-1]
      +                          );
  3881   0019FE  0E2F               	movlw	low useSequence@mL
  3882   001A00  6E13               	movwf	goStraight@mL^0,c
  3883   001A02  0E37               	movlw	low useSequence@mR
  3884   001A04  6E14               	movwf	goStraight@mR^0,c
  3885   001A06  5042               	movf	useSequence@i^0,w,c
  3886   001A08  0D02               	mullw	2
  3887   001A0A  503F               	movf	useSequence@history^0,w,c
  3888   001A0C  24F3               	addwf	243,w,c
  3889   001A0E  6ED9               	movwf	fsr2l,c
  3890   001A10  6ADA               	clrf	fsr2h,c
  3891   001A12  0E4E               	movlw	78
  3892   001A14  26D9               	addwf	fsr2l,f,c
  3893   001A16  CFDE F015          	movff	postinc2,goStraight@direction
  3894   001A1A  CFDD F016          	movff	postdec2,goStraight@direction+1
  3895   001A1E  5042               	movf	useSequence@i^0,w,c
  3896   001A20  0D02               	mullw	2
  3897   001A22  503F               	movf	useSequence@history^0,w,c
  3898   001A24  24F3               	addwf	243,w,c
  3899   001A26  6ED9               	movwf	fsr2l,c
  3900   001A28  6ADA               	clrf	fsr2h,c
  3901   001A2A  0E76               	movlw	118
  3902   001A2C  26D9               	addwf	fsr2l,f,c
  3903   001A2E  CFDE F017          	movff	postinc2,goStraight@squares
  3904   001A32  CFDD F018          	movff	postdec2,goStraight@squares+1
  3905   001A36  EC95  F00B         	call	_goStraight	;wreg free
  3906   001A3A                     
  3907                           ;color.c: 309:    _delay((unsigned long)((1000)*(64000000/4000.0)));
  3908   001A3A  0E52               	movlw	82
  3909   001A3C  6E41               	movwf	(??_useSequence+1)^0,c
  3910   001A3E  0E2B               	movlw	43
  3911   001A40  6E40               	movwf	??_useSequence^0,c
  3912   001A42  0E00               	movlw	0
  3913   001A44                     u3657:
  3914   001A44  2EE8               	decfsz	wreg,f,c
  3915   001A46  D7FE               	bra	u3657
  3916   001A48  2E40               	decfsz	??_useSequence^0,f,c
  3917   001A4A  D7FC               	bra	u3657
  3918   001A4C  2E41               	decfsz	(??_useSequence+1)^0,f,c
  3919   001A4E  D7FA               	bra	u3657
  3920   001A50  D000               	nop2	
  3921   001A52                     
  3922                           ;color.c: 310:    turn(mL,mR,history -> angle[i-1],history -> polarity[i-1]);
  3923   001A52  EE20  F02F         	lfsr	2,useSequence@mL
  3924   001A56  EE00  F01B         	lfsr	0,turn@mL
  3925   001A5A  0E07               	movlw	7
  3926   001A5C                     u3091:
  3927   001A5C  CFDB FFEB          	movff	plusw2,plusw0
  3928   001A60  06E8               	decf	wreg,f,c
  3929   001A62  E2FC               	bc	u3091
  3930   001A64  EE20  F037         	lfsr	2,useSequence@mR
  3931   001A68  EE00  F023         	lfsr	0,turn@mR
  3932   001A6C  0E07               	movlw	7
  3933   001A6E                     u3101:
  3934   001A6E  CFDB FFEB          	movff	plusw2,plusw0
  3935   001A72  06E8               	decf	wreg,f,c
  3936   001A74  E2FC               	bc	u3101
  3937   001A76  5042               	movf	useSequence@i^0,w,c
  3938   001A78  0D02               	mullw	2
  3939   001A7A  503F               	movf	useSequence@history^0,w,c
  3940   001A7C  24F3               	addwf	243,w,c
  3941   001A7E  6ED9               	movwf	fsr2l,c
  3942   001A80  6ADA               	clrf	fsr2h,c
  3943   001A82  0EFE               	movlw	254
  3944   001A84  26D9               	addwf	fsr2l,f,c
  3945   001A86  CFDE F02B          	movff	postinc2,turn@iter
  3946   001A8A  CFDD F02C          	movff	postdec2,turn@iter+1
  3947   001A8E  5042               	movf	useSequence@i^0,w,c
  3948   001A90  0D02               	mullw	2
  3949   001A92  503F               	movf	useSequence@history^0,w,c
  3950   001A94  24F3               	addwf	243,w,c
  3951   001A96  6ED9               	movwf	fsr2l,c
  3952   001A98  6ADA               	clrf	fsr2h,c
  3953   001A9A  0E26               	movlw	38
  3954   001A9C  26D9               	addwf	fsr2l,f,c
  3955   001A9E  CFDE F02D          	movff	postinc2,turn@polarity
  3956   001AA2  CFDD F02E          	movff	postdec2,turn@polarity+1
  3957   001AA6  EC9E  F013         	call	_turn	;wreg free
  3958   001AAA                     
  3959                           ;color.c: 311:    _delay((unsigned long)((1000)*(64000000/4000.0)));
  3960   001AAA  0E52               	movlw	82
  3961   001AAC  6E41               	movwf	(??_useSequence+1)^0,c
  3962   001AAE  0E2B               	movlw	43
  3963   001AB0  6E40               	movwf	??_useSequence^0,c
  3964   001AB2  0E00               	movlw	0
  3965   001AB4                     u3667:
  3966   001AB4  2EE8               	decfsz	wreg,f,c
  3967   001AB6  D7FE               	bra	u3667
  3968   001AB8  2E40               	decfsz	??_useSequence^0,f,c
  3969   001ABA  D7FC               	bra	u3667
  3970   001ABC  2E41               	decfsz	(??_useSequence+1)^0,f,c
  3971   001ABE  D7FA               	bra	u3667
  3972   001AC0  D000               	nop2	
  3973   001AC2                     
  3974                           ;color.c: 312:    goStraight(&mL,&mR,history -> direction[i-1],history -> squares[i-1]);
  3975   001AC2  0E2F               	movlw	low useSequence@mL
  3976   001AC4  6E13               	movwf	goStraight@mL^0,c
  3977   001AC6  0E37               	movlw	low useSequence@mR
  3978   001AC8  6E14               	movwf	goStraight@mR^0,c
  3979   001ACA  5042               	movf	useSequence@i^0,w,c
  3980   001ACC  0D02               	mullw	2
  3981   001ACE  503F               	movf	useSequence@history^0,w,c
  3982   001AD0  24F3               	addwf	243,w,c
  3983   001AD2  6ED9               	movwf	fsr2l,c
  3984   001AD4  6ADA               	clrf	fsr2h,c
  3985   001AD6  0E4E               	movlw	78
  3986   001AD8  26D9               	addwf	fsr2l,f,c
  3987   001ADA  CFDE F015          	movff	postinc2,goStraight@direction
  3988   001ADE  CFDD F016          	movff	postdec2,goStraight@direction+1
  3989   001AE2  5042               	movf	useSequence@i^0,w,c
  3990   001AE4  0D02               	mullw	2
  3991   001AE6  503F               	movf	useSequence@history^0,w,c
  3992   001AE8  24F3               	addwf	243,w,c
  3993   001AEA  6ED9               	movwf	fsr2l,c
  3994   001AEC  6ADA               	clrf	fsr2h,c
  3995   001AEE  0E9E               	movlw	158
  3996   001AF0  26D9               	addwf	fsr2l,f,c
  3997   001AF2  CFDE F017          	movff	postinc2,goStraight@squares
  3998   001AF6  CFDD F018          	movff	postdec2,goStraight@squares+1
  3999   001AFA  EC95  F00B         	call	_goStraight	;wreg free
  4000   001AFE                     
  4001                           ;color.c: 313:   }
  4002   001AFE  0642               	decf	useSequence@i^0,f,c
  4003   001B00  A0D8               	btfss	status,0,c
  4004   001B02  0643               	decf	(useSequence@i+1)^0,f,c
  4005   001B04  EFF0  F00C         	goto	l3926
  4006   001B08                     l3944:
  4007                           
  4008                           ;color.c: 314:    stop(&mL,&mR);
  4009   001B08  0E2F               	movlw	low useSequence@mL
  4010   001B0A  6E13               	movwf	stop@mL^0,c
  4011   001B0C  0E37               	movlw	low useSequence@mR
  4012   001B0E  6E14               	movwf	stop@mR^0,c
  4013   001B10  EC32  F014         	call	_stop	;wreg free
  4014   001B14  0012               	return		;funcret
  4015   001B16                     __end_of_useSequence:
  4016                           	callstack 0
  4017                           
  4018 ;; *************** function _turn *****************
  4019 ;; Defined at:
  4020 ;;		line 283 in file "dc_motor.c"
  4021 ;; Parameters:    Size  Location     Type
  4022 ;;  mL              8   26[COMRAM] struct DC_motor
  4023 ;;  mR              8   34[COMRAM] struct DC_motor
  4024 ;;  iter            2   42[COMRAM] unsigned int 
  4025 ;;  polarity        2   44[COMRAM] unsigned int 
  4026 ;; Auto vars:     Size  Location     Type
  4027 ;;		None
  4028 ;; Return value:  Size  Location     Type
  4029 ;;                  1    wreg      void 
  4030 ;; Registers used:
  4031 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4032 ;; Tracked objects:
  4033 ;;		On entry : 0/0
  4034 ;;		On exit  : 0/0
  4035 ;;		Unchanged: 0/0
  4036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4037 ;;      Params:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4038 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4040 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4041 ;;Total ram usage:       20 bytes
  4042 ;; Hardware stack levels used: 1
  4043 ;; Hardware stack levels required when called: 5
  4044 ;; This function calls:
  4045 ;;		_turnLeft
  4046 ;;		_turnRight
  4047 ;; This function is called by:
  4048 ;;		_color2instruction
  4049 ;;		_useSequence
  4050 ;;		_checkWall
  4051 ;; This function uses a non-reentrant model
  4052 ;;
  4053                           
  4054                           	psect	text23
  4055   00273C                     __ptext23:
  4056                           	callstack 0
  4057   00273C                     _turn:
  4058                           	callstack 23
  4059   00273C                     
  4060                           ;dc_motor.c: 284:     if(iter!= 0){
  4061   00273C  502B               	movf	turn@iter^0,w,c
  4062   00273E  102C               	iorwf	(turn@iter+1)^0,w,c
  4063   002740  B4D8               	btfsc	status,2,c
  4064   002742  EFA5  F013         	goto	u2931
  4065   002746  EFA7  F013         	goto	u2930
  4066   00274A                     u2931:
  4067   00274A  EFCF  F013         	goto	l317
  4068   00274E                     u2930:
  4069   00274E                     
  4070                           ;dc_motor.c: 285:         if(polarity == 0){
  4071   00274E  502D               	movf	turn@polarity^0,w,c
  4072   002750  102E               	iorwf	(turn@polarity+1)^0,w,c
  4073   002752  A4D8               	btfss	status,2,c
  4074   002754  EFAE  F013         	goto	u2941
  4075   002758  EFB0  F013         	goto	u2940
  4076   00275C                     u2941:
  4077   00275C  EFBC  F013         	goto	l3818
  4078   002760                     u2940:
  4079   002760                     
  4080                           ;dc_motor.c: 286:             turnRight(&mL,&mR,iter);
  4081   002760  0E1B               	movlw	low turn@mL
  4082   002762  6E13               	movwf	turnRight@mL^0,c
  4083   002764  0E23               	movlw	low turn@mR
  4084   002766  6E14               	movwf	turnRight@mR^0,c
  4085   002768  C02B  F015         	movff	turn@iter,turnRight@iter
  4086   00276C  C02C  F016         	movff	turn@iter+1,turnRight@iter+1
  4087   002770  EC1F  F00E         	call	_turnRight	;wreg free
  4088                           
  4089                           ;dc_motor.c: 287:         }
  4090   002774  EFCF  F013         	goto	l317
  4091   002778                     l3818:
  4092   002778  042D               	decf	turn@polarity^0,w,c
  4093   00277A  102E               	iorwf	(turn@polarity+1)^0,w,c
  4094   00277C  A4D8               	btfss	status,2,c
  4095   00277E  EFC3  F013         	goto	u2951
  4096   002782  EFC5  F013         	goto	u2950
  4097   002786                     u2951:
  4098   002786  EFCF  F013         	goto	l317
  4099   00278A                     u2950:
  4100   00278A                     
  4101                           ;dc_motor.c: 289:             turnLeft(&mL,&mR,iter);
  4102   00278A  0E1B               	movlw	low turn@mL
  4103   00278C  6E13               	movwf	turnLeft@mL^0,c
  4104   00278E  0E23               	movlw	low turn@mR
  4105   002790  6E14               	movwf	turnLeft@mR^0,c
  4106   002792  C02B  F015         	movff	turn@iter,turnLeft@iter
  4107   002796  C02C  F016         	movff	turn@iter+1,turnLeft@iter+1
  4108   00279A  ECA5  F00E         	call	_turnLeft	;wreg free
  4109   00279E                     l317:
  4110   00279E  0012               	return		;funcret
  4111   0027A0                     __end_of_turn:
  4112                           	callstack 0
  4113                           
  4114 ;; *************** function _turnRight *****************
  4115 ;; Defined at:
  4116 ;;		line 166 in file "dc_motor.c"
  4117 ;; Parameters:    Size  Location     Type
  4118 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  4119 ;;		 -> turn@mL(8), dance@mL(8), 
  4120 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  4121 ;;		 -> turn@mR(8), dance@mR(8), 
  4122 ;;  iter            2   20[COMRAM] unsigned int 
  4123 ;; Auto vars:     Size  Location     Type
  4124 ;;  i               2   24[COMRAM] int 
  4125 ;; Return value:  Size  Location     Type
  4126 ;;                  1    wreg      void 
  4127 ;; Registers used:
  4128 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4129 ;; Tracked objects:
  4130 ;;		On entry : 0/0
  4131 ;;		On exit  : 0/0
  4132 ;;		Unchanged: 0/0
  4133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4134 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4135 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4136 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4137 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4138 ;;Total ram usage:        8 bytes
  4139 ;; Hardware stack levels used: 1
  4140 ;; Hardware stack levels required when called: 4
  4141 ;; This function calls:
  4142 ;;		_setMotorPWM
  4143 ;; This function is called by:
  4144 ;;		_turn
  4145 ;;		_dance
  4146 ;; This function uses a non-reentrant model
  4147 ;;
  4148                           
  4149                           	psect	text24
  4150   001C3E                     __ptext24:
  4151                           	callstack 0
  4152   001C3E                     _turnRight:
  4153                           	callstack 23
  4154   001C3E                     
  4155                           ;dc_motor.c: 166: void turnRight(DC_motor *mL, DC_motor *mR, unsigned int iter);dc_motor
      +                          .c: 167: {;dc_motor.c: 168:     for(int i =0; i<iter; i++)
  4156   001C3E  0E00               	movlw	0
  4157   001C40  6E1A               	movwf	(turnRight@i+1)^0,c
  4158   001C42  0E00               	movlw	0
  4159   001C44  6E19               	movwf	turnRight@i^0,c
  4160   001C46  EF99  F00E         	goto	l3682
  4161   001C4A                     l3638:
  4162                           
  4163                           ;dc_motor.c: 169:     {;dc_motor.c: 170:         (mL->power) = maxPowR;
  4164   001C4A  5013               	movf	turnRight@mL^0,w,c
  4165   001C4C  6ED9               	movwf	fsr2l,c
  4166   001C4E  6ADA               	clrf	fsr2h,c
  4167   001C50  0E1F               	movlw	31
  4168   001C52  6EDF               	movwf	indf2,c
  4169   001C54                     
  4170                           ;dc_motor.c: 171:         (mL->direction) = 1;
  4171   001C54  5013               	movf	turnRight@mL^0,w,c
  4172   001C56  6ED9               	movwf	fsr2l,c
  4173   001C58  6ADA               	clrf	fsr2h,c
  4174   001C5A  0E01               	movlw	1
  4175   001C5C  26D9               	addwf	fsr2l,f,c
  4176   001C5E  0E01               	movlw	1
  4177   001C60  6EDF               	movwf	indf2,c
  4178   001C62                     
  4179                           ;dc_motor.c: 172:         (mL->brakemode) = 1;
  4180   001C62  5013               	movf	turnRight@mL^0,w,c
  4181   001C64  6ED9               	movwf	fsr2l,c
  4182   001C66  6ADA               	clrf	fsr2h,c
  4183   001C68  0E02               	movlw	2
  4184   001C6A  26D9               	addwf	fsr2l,f,c
  4185   001C6C  0E01               	movlw	1
  4186   001C6E  6EDF               	movwf	indf2,c
  4187                           
  4188                           ;dc_motor.c: 174:         (mR->power) = maxPowR;
  4189   001C70  5014               	movf	turnRight@mR^0,w,c
  4190   001C72  6ED9               	movwf	fsr2l,c
  4191   001C74  6ADA               	clrf	fsr2h,c
  4192   001C76  0E1F               	movlw	31
  4193   001C78  6EDF               	movwf	indf2,c
  4194   001C7A                     
  4195                           ;dc_motor.c: 175:         (mR->direction) = 0;
  4196   001C7A  5014               	movf	turnRight@mR^0,w,c
  4197   001C7C  6ED9               	movwf	fsr2l,c
  4198   001C7E  6ADA               	clrf	fsr2h,c
  4199   001C80  0E01               	movlw	1
  4200   001C82  26D9               	addwf	fsr2l,f,c
  4201   001C84  6ADF               	clrf	indf2,c
  4202   001C86                     
  4203                           ;dc_motor.c: 176:         (mR->brakemode) = 1;
  4204   001C86  5014               	movf	turnRight@mR^0,w,c
  4205   001C88  6ED9               	movwf	fsr2l,c
  4206   001C8A  6ADA               	clrf	fsr2h,c
  4207   001C8C  0E02               	movlw	2
  4208   001C8E  26D9               	addwf	fsr2l,f,c
  4209   001C90  0E01               	movlw	1
  4210   001C92  6EDF               	movwf	indf2,c
  4211   001C94                     
  4212                           ;dc_motor.c: 178:         setMotorPWM(mL);
  4213   001C94  C013  F00D         	movff	turnRight@mL,setMotorPWM@m
  4214   001C98  EC4C  F00C         	call	_setMotorPWM	;wreg free
  4215   001C9C                     
  4216                           ;dc_motor.c: 179:         setMotorPWM(mR);
  4217   001C9C  C014  F00D         	movff	turnRight@mR,setMotorPWM@m
  4218   001CA0  EC4C  F00C         	call	_setMotorPWM	;wreg free
  4219   001CA4                     
  4220                           ;dc_motor.c: 181:         LATFbits.LATF0 = 1;
  4221   001CA4  807E               	bsf	126,0,c	;volatile
  4222   001CA6                     
  4223                           ;dc_motor.c: 183:         _delay((unsigned long)((300)*(64000000/4000.0)));
  4224   001CA6  0E19               	movlw	25
  4225   001CA8  6E18               	movwf	(??_turnRight+1)^0,c
  4226   001CAA  0E5A               	movlw	90
  4227   001CAC  6E17               	movwf	??_turnRight^0,c
  4228   001CAE  0EB2               	movlw	178
  4229   001CB0                     u3677:
  4230   001CB0  2EE8               	decfsz	wreg,f,c
  4231   001CB2  D7FE               	bra	u3677
  4232   001CB4  2E17               	decfsz	??_turnRight^0,f,c
  4233   001CB6  D7FC               	bra	u3677
  4234   001CB8  2E18               	decfsz	(??_turnRight+1)^0,f,c
  4235   001CBA  D7FA               	bra	u3677
  4236   001CBC                     
  4237                           ;dc_motor.c: 185:         LATDbits.LATD4 = 1;
  4238   001CBC  887C               	bsf	124,4,c	;volatile
  4239   001CBE                     
  4240                           ;dc_motor.c: 186:         LATFbits.LATF0 = 0;
  4241   001CBE  907E               	bcf	126,0,c	;volatile
  4242   001CC0                     
  4243                           ;dc_motor.c: 188:         (mL->power) = minPow;
  4244   001CC0  5013               	movf	turnRight@mL^0,w,c
  4245   001CC2  6ED9               	movwf	fsr2l,c
  4246   001CC4  6ADA               	clrf	fsr2h,c
  4247   001CC6  0E0F               	movlw	15
  4248   001CC8  6EDF               	movwf	indf2,c
  4249   001CCA                     
  4250                           ;dc_motor.c: 189:         (mL->direction) = 1;
  4251   001CCA  5013               	movf	turnRight@mL^0,w,c
  4252   001CCC  6ED9               	movwf	fsr2l,c
  4253   001CCE  6ADA               	clrf	fsr2h,c
  4254   001CD0  0E01               	movlw	1
  4255   001CD2  26D9               	addwf	fsr2l,f,c
  4256   001CD4  0E01               	movlw	1
  4257   001CD6  6EDF               	movwf	indf2,c
  4258   001CD8                     
  4259                           ;dc_motor.c: 190:         (mL->brakemode) = 0;
  4260   001CD8  5013               	movf	turnRight@mL^0,w,c
  4261   001CDA  6ED9               	movwf	fsr2l,c
  4262   001CDC  6ADA               	clrf	fsr2h,c
  4263   001CDE  0E02               	movlw	2
  4264   001CE0  26D9               	addwf	fsr2l,f,c
  4265   001CE2  6ADF               	clrf	indf2,c
  4266   001CE4                     
  4267                           ;dc_motor.c: 192:         (mR->power) = minPow;
  4268   001CE4  5014               	movf	turnRight@mR^0,w,c
  4269   001CE6  6ED9               	movwf	fsr2l,c
  4270   001CE8  6ADA               	clrf	fsr2h,c
  4271   001CEA  0E0F               	movlw	15
  4272   001CEC  6EDF               	movwf	indf2,c
  4273   001CEE                     
  4274                           ;dc_motor.c: 193:         (mR->direction) = 0;
  4275   001CEE  5014               	movf	turnRight@mR^0,w,c
  4276   001CF0  6ED9               	movwf	fsr2l,c
  4277   001CF2  6ADA               	clrf	fsr2h,c
  4278   001CF4  0E01               	movlw	1
  4279   001CF6  26D9               	addwf	fsr2l,f,c
  4280   001CF8  6ADF               	clrf	indf2,c
  4281   001CFA                     
  4282                           ;dc_motor.c: 194:         (mR->brakemode) = 0;
  4283   001CFA  5014               	movf	turnRight@mR^0,w,c
  4284   001CFC  6ED9               	movwf	fsr2l,c
  4285   001CFE  6ADA               	clrf	fsr2h,c
  4286   001D00  0E02               	movlw	2
  4287   001D02  26D9               	addwf	fsr2l,f,c
  4288   001D04  6ADF               	clrf	indf2,c
  4289   001D06                     
  4290                           ;dc_motor.c: 196:         setMotorPWM(mL);
  4291   001D06  C013  F00D         	movff	turnRight@mL,setMotorPWM@m
  4292   001D0A  EC4C  F00C         	call	_setMotorPWM	;wreg free
  4293   001D0E                     
  4294                           ;dc_motor.c: 197:         setMotorPWM(mR);
  4295   001D0E  C014  F00D         	movff	turnRight@mR,setMotorPWM@m
  4296   001D12  EC4C  F00C         	call	_setMotorPWM	;wreg free
  4297   001D16                     
  4298                           ;dc_motor.c: 199:         _delay((unsigned long)((300)*(64000000/4000.0)));
  4299   001D16  0E19               	movlw	25
  4300   001D18  6E18               	movwf	(??_turnRight+1)^0,c
  4301   001D1A  0E5A               	movlw	90
  4302   001D1C  6E17               	movwf	??_turnRight^0,c
  4303   001D1E  0EB2               	movlw	178
  4304   001D20                     u3687:
  4305   001D20  2EE8               	decfsz	wreg,f,c
  4306   001D22  D7FE               	bra	u3687
  4307   001D24  2E17               	decfsz	??_turnRight^0,f,c
  4308   001D26  D7FC               	bra	u3687
  4309   001D28  2E18               	decfsz	(??_turnRight+1)^0,f,c
  4310   001D2A  D7FA               	bra	u3687
  4311   001D2C                     
  4312                           ;dc_motor.c: 201:         LATDbits.LATD4 = 0;
  4313   001D2C  987C               	bcf	124,4,c	;volatile
  4314   001D2E                     
  4315                           ;dc_motor.c: 202:     }
  4316   001D2E  4A19               	infsnz	turnRight@i^0,f,c
  4317   001D30  2A1A               	incf	(turnRight@i+1)^0,f,c
  4318   001D32                     l3682:
  4319   001D32  5015               	movf	turnRight@iter^0,w,c
  4320   001D34  5C19               	subwf	turnRight@i^0,w,c
  4321   001D36  5016               	movf	(turnRight@iter+1)^0,w,c
  4322   001D38  581A               	subwfb	(turnRight@i+1)^0,w,c
  4323   001D3A  A0D8               	btfss	status,0,c
  4324   001D3C  EFA2  F00E         	goto	u2771
  4325   001D40  EFA4  F00E         	goto	u2770
  4326   001D44                     u2771:
  4327   001D44  EF25  F00E         	goto	l3638
  4328   001D48                     u2770:
  4329   001D48  0012               	return		;funcret
  4330   001D4A                     __end_of_turnRight:
  4331                           	callstack 0
  4332                           
  4333 ;; *************** function _turnLeft *****************
  4334 ;; Defined at:
  4335 ;;		line 126 in file "dc_motor.c"
  4336 ;; Parameters:    Size  Location     Type
  4337 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  4338 ;;		 -> turn@mL(8), dance@mL(8), 
  4339 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  4340 ;;		 -> turn@mR(8), dance@mR(8), 
  4341 ;;  iter            2   20[COMRAM] unsigned int 
  4342 ;; Auto vars:     Size  Location     Type
  4343 ;;  i               2   24[COMRAM] int 
  4344 ;; Return value:  Size  Location     Type
  4345 ;;                  1    wreg      void 
  4346 ;; Registers used:
  4347 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4348 ;; Tracked objects:
  4349 ;;		On entry : 0/0
  4350 ;;		On exit  : 0/0
  4351 ;;		Unchanged: 0/0
  4352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4353 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4354 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4355 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4356 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4357 ;;Total ram usage:        8 bytes
  4358 ;; Hardware stack levels used: 1
  4359 ;; Hardware stack levels required when called: 4
  4360 ;; This function calls:
  4361 ;;		_setMotorPWM
  4362 ;; This function is called by:
  4363 ;;		_turn
  4364 ;;		_dance
  4365 ;; This function uses a non-reentrant model
  4366 ;;
  4367                           
  4368                           	psect	text25
  4369   001D4A                     __ptext25:
  4370                           	callstack 0
  4371   001D4A                     _turnLeft:
  4372                           	callstack 23
  4373   001D4A                     
  4374                           ;dc_motor.c: 126: void turnLeft(DC_motor *mL, DC_motor *mR, unsigned int iter);dc_motor.
      +                          c: 127: {;dc_motor.c: 128:     for(int i= 0; i< iter; i++)
  4375   001D4A  0E00               	movlw	0
  4376   001D4C  6E1A               	movwf	(turnLeft@i+1)^0,c
  4377   001D4E  0E00               	movlw	0
  4378   001D50  6E19               	movwf	turnLeft@i^0,c
  4379   001D52  EF1F  F00F         	goto	l3634
  4380   001D56                     l3590:
  4381                           
  4382                           ;dc_motor.c: 129:     {;dc_motor.c: 130:         (mL->power) = maxPowL;
  4383   001D56  5013               	movf	turnLeft@mL^0,w,c
  4384   001D58  6ED9               	movwf	fsr2l,c
  4385   001D5A  6ADA               	clrf	fsr2h,c
  4386   001D5C  0E1D               	movlw	29
  4387   001D5E  6EDF               	movwf	indf2,c
  4388   001D60                     
  4389                           ;dc_motor.c: 131:         (mL->direction) = 0;
  4390   001D60  5013               	movf	turnLeft@mL^0,w,c
  4391   001D62  6ED9               	movwf	fsr2l,c
  4392   001D64  6ADA               	clrf	fsr2h,c
  4393   001D66  0E01               	movlw	1
  4394   001D68  26D9               	addwf	fsr2l,f,c
  4395   001D6A  6ADF               	clrf	indf2,c
  4396   001D6C                     
  4397                           ;dc_motor.c: 132:         (mL->brakemode) = 1;
  4398   001D6C  5013               	movf	turnLeft@mL^0,w,c
  4399   001D6E  6ED9               	movwf	fsr2l,c
  4400   001D70  6ADA               	clrf	fsr2h,c
  4401   001D72  0E02               	movlw	2
  4402   001D74  26D9               	addwf	fsr2l,f,c
  4403   001D76  0E01               	movlw	1
  4404   001D78  6EDF               	movwf	indf2,c
  4405                           
  4406                           ;dc_motor.c: 134:         (mR->power) = maxPowL;
  4407   001D7A  5014               	movf	turnLeft@mR^0,w,c
  4408   001D7C  6ED9               	movwf	fsr2l,c
  4409   001D7E  6ADA               	clrf	fsr2h,c
  4410   001D80  0E1D               	movlw	29
  4411   001D82  6EDF               	movwf	indf2,c
  4412   001D84                     
  4413                           ;dc_motor.c: 135:         (mR->direction) = 1;
  4414   001D84  5014               	movf	turnLeft@mR^0,w,c
  4415   001D86  6ED9               	movwf	fsr2l,c
  4416   001D88  6ADA               	clrf	fsr2h,c
  4417   001D8A  0E01               	movlw	1
  4418   001D8C  26D9               	addwf	fsr2l,f,c
  4419   001D8E  0E01               	movlw	1
  4420   001D90  6EDF               	movwf	indf2,c
  4421   001D92                     
  4422                           ;dc_motor.c: 136:         (mR->brakemode) = 1;
  4423   001D92  5014               	movf	turnLeft@mR^0,w,c
  4424   001D94  6ED9               	movwf	fsr2l,c
  4425   001D96  6ADA               	clrf	fsr2h,c
  4426   001D98  0E02               	movlw	2
  4427   001D9A  26D9               	addwf	fsr2l,f,c
  4428   001D9C  0E01               	movlw	1
  4429   001D9E  6EDF               	movwf	indf2,c
  4430   001DA0                     
  4431                           ;dc_motor.c: 138:         setMotorPWM(mL);
  4432   001DA0  C013  F00D         	movff	turnLeft@mL,setMotorPWM@m
  4433   001DA4  EC4C  F00C         	call	_setMotorPWM	;wreg free
  4434   001DA8                     
  4435                           ;dc_motor.c: 139:         setMotorPWM(mR);
  4436   001DA8  C014  F00D         	movff	turnLeft@mR,setMotorPWM@m
  4437   001DAC  EC4C  F00C         	call	_setMotorPWM	;wreg free
  4438   001DB0                     
  4439                           ;dc_motor.c: 141:         LATHbits.LATH0 = 1;
  4440   001DB0  8080               	bsf	128,0,c	;volatile
  4441   001DB2                     
  4442                           ;dc_motor.c: 143:         _delay((unsigned long)((300)*(64000000/4000.0)));
  4443   001DB2  0E19               	movlw	25
  4444   001DB4  6E18               	movwf	(??_turnLeft+1)^0,c
  4445   001DB6  0E5A               	movlw	90
  4446   001DB8  6E17               	movwf	??_turnLeft^0,c
  4447   001DBA  0EB2               	movlw	178
  4448   001DBC                     u3697:
  4449   001DBC  2EE8               	decfsz	wreg,f,c
  4450   001DBE  D7FE               	bra	u3697
  4451   001DC0  2E17               	decfsz	??_turnLeft^0,f,c
  4452   001DC2  D7FC               	bra	u3697
  4453   001DC4  2E18               	decfsz	(??_turnLeft+1)^0,f,c
  4454   001DC6  D7FA               	bra	u3697
  4455   001DC8                     
  4456                           ;dc_motor.c: 145:         LATDbits.LATD4 = 1;
  4457   001DC8  887C               	bsf	124,4,c	;volatile
  4458   001DCA                     
  4459                           ;dc_motor.c: 146:         LATHbits.LATH0 = 0;
  4460   001DCA  9080               	bcf	128,0,c	;volatile
  4461   001DCC                     
  4462                           ;dc_motor.c: 148:         (mL->power) = minPow;
  4463   001DCC  5013               	movf	turnLeft@mL^0,w,c
  4464   001DCE  6ED9               	movwf	fsr2l,c
  4465   001DD0  6ADA               	clrf	fsr2h,c
  4466   001DD2  0E0F               	movlw	15
  4467   001DD4  6EDF               	movwf	indf2,c
  4468   001DD6                     
  4469                           ;dc_motor.c: 149:         (mL->direction) = 0;
  4470   001DD6  5013               	movf	turnLeft@mL^0,w,c
  4471   001DD8  6ED9               	movwf	fsr2l,c
  4472   001DDA  6ADA               	clrf	fsr2h,c
  4473   001DDC  0E01               	movlw	1
  4474   001DDE  26D9               	addwf	fsr2l,f,c
  4475   001DE0  6ADF               	clrf	indf2,c
  4476   001DE2                     
  4477                           ;dc_motor.c: 150:         (mL->brakemode) = 0;
  4478   001DE2  5013               	movf	turnLeft@mL^0,w,c
  4479   001DE4  6ED9               	movwf	fsr2l,c
  4480   001DE6  6ADA               	clrf	fsr2h,c
  4481   001DE8  0E02               	movlw	2
  4482   001DEA  26D9               	addwf	fsr2l,f,c
  4483   001DEC  6ADF               	clrf	indf2,c
  4484   001DEE                     
  4485                           ;dc_motor.c: 152:         (mR->power) = minPow;
  4486   001DEE  5014               	movf	turnLeft@mR^0,w,c
  4487   001DF0  6ED9               	movwf	fsr2l,c
  4488   001DF2  6ADA               	clrf	fsr2h,c
  4489   001DF4  0E0F               	movlw	15
  4490   001DF6  6EDF               	movwf	indf2,c
  4491   001DF8                     
  4492                           ;dc_motor.c: 153:         (mR->direction) = 1;
  4493   001DF8  5014               	movf	turnLeft@mR^0,w,c
  4494   001DFA  6ED9               	movwf	fsr2l,c
  4495   001DFC  6ADA               	clrf	fsr2h,c
  4496   001DFE  0E01               	movlw	1
  4497   001E00  26D9               	addwf	fsr2l,f,c
  4498   001E02  0E01               	movlw	1
  4499   001E04  6EDF               	movwf	indf2,c
  4500   001E06                     
  4501                           ;dc_motor.c: 154:         (mR->brakemode) = 0;
  4502   001E06  5014               	movf	turnLeft@mR^0,w,c
  4503   001E08  6ED9               	movwf	fsr2l,c
  4504   001E0A  6ADA               	clrf	fsr2h,c
  4505   001E0C  0E02               	movlw	2
  4506   001E0E  26D9               	addwf	fsr2l,f,c
  4507   001E10  6ADF               	clrf	indf2,c
  4508   001E12                     
  4509                           ;dc_motor.c: 156:         setMotorPWM(mL);
  4510   001E12  C013  F00D         	movff	turnLeft@mL,setMotorPWM@m
  4511   001E16  EC4C  F00C         	call	_setMotorPWM	;wreg free
  4512   001E1A                     
  4513                           ;dc_motor.c: 157:         setMotorPWM(mR);
  4514   001E1A  C014  F00D         	movff	turnLeft@mR,setMotorPWM@m
  4515   001E1E  EC4C  F00C         	call	_setMotorPWM	;wreg free
  4516   001E22                     
  4517                           ;dc_motor.c: 159:         _delay((unsigned long)((300)*(64000000/4000.0)));
  4518   001E22  0E19               	movlw	25
  4519   001E24  6E18               	movwf	(??_turnLeft+1)^0,c
  4520   001E26  0E5A               	movlw	90
  4521   001E28  6E17               	movwf	??_turnLeft^0,c
  4522   001E2A  0EB2               	movlw	178
  4523   001E2C                     u3707:
  4524   001E2C  2EE8               	decfsz	wreg,f,c
  4525   001E2E  D7FE               	bra	u3707
  4526   001E30  2E17               	decfsz	??_turnLeft^0,f,c
  4527   001E32  D7FC               	bra	u3707
  4528   001E34  2E18               	decfsz	(??_turnLeft+1)^0,f,c
  4529   001E36  D7FA               	bra	u3707
  4530   001E38                     
  4531                           ;dc_motor.c: 161:         LATDbits.LATD4 = 0;
  4532   001E38  987C               	bcf	124,4,c	;volatile
  4533   001E3A                     
  4534                           ;dc_motor.c: 162:     }
  4535   001E3A  4A19               	infsnz	turnLeft@i^0,f,c
  4536   001E3C  2A1A               	incf	(turnLeft@i+1)^0,f,c
  4537   001E3E                     l3634:
  4538   001E3E  5015               	movf	turnLeft@iter^0,w,c
  4539   001E40  5C19               	subwf	turnLeft@i^0,w,c
  4540   001E42  5016               	movf	(turnLeft@iter+1)^0,w,c
  4541   001E44  581A               	subwfb	(turnLeft@i+1)^0,w,c
  4542   001E46  A0D8               	btfss	status,0,c
  4543   001E48  EF28  F00F         	goto	u2761
  4544   001E4C  EF2A  F00F         	goto	u2760
  4545   001E50                     u2761:
  4546   001E50  EFAB  F00E         	goto	l3590
  4547   001E54                     u2760:
  4548   001E54  0012               	return		;funcret
  4549   001E56                     __end_of_turnLeft:
  4550                           	callstack 0
  4551                           
  4552 ;; *************** function _stop *****************
  4553 ;; Defined at:
  4554 ;;		line 103 in file "dc_motor.c"
  4555 ;; Parameters:    Size  Location     Type
  4556 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  4557 ;;		 -> useSequence@mL(8), 
  4558 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  4559 ;;		 -> useSequence@mR(8), 
  4560 ;; Auto vars:     Size  Location     Type
  4561 ;;		None
  4562 ;; Return value:  Size  Location     Type
  4563 ;;                  1    wreg      void 
  4564 ;; Registers used:
  4565 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4566 ;; Tracked objects:
  4567 ;;		On entry : 0/0
  4568 ;;		On exit  : 0/0
  4569 ;;		Unchanged: 0/0
  4570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4571 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4574 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4575 ;;Total ram usage:        2 bytes
  4576 ;; Hardware stack levels used: 1
  4577 ;; Hardware stack levels required when called: 4
  4578 ;; This function calls:
  4579 ;;		_setMotorPWM
  4580 ;; This function is called by:
  4581 ;;		_useSequence
  4582 ;; This function uses a non-reentrant model
  4583 ;;
  4584                           
  4585                           	psect	text26
  4586   002864                     __ptext26:
  4587                           	callstack 0
  4588   002864                     _stop:
  4589                           	callstack 22
  4590   002864                     
  4591                           ;dc_motor.c: 103: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 104: {;dc_motor.c: 1
      +                          05:     (mL->power) = 10;
  4592   002864  5013               	movf	stop@mL^0,w,c
  4593   002866  6ED9               	movwf	fsr2l,c
  4594   002868  6ADA               	clrf	fsr2h,c
  4595   00286A  0E0A               	movlw	10
  4596   00286C  6EDF               	movwf	indf2,c
  4597   00286E                     
  4598                           ;dc_motor.c: 106:     (mL->direction) = 1;
  4599   00286E  5013               	movf	stop@mL^0,w,c
  4600   002870  6ED9               	movwf	fsr2l,c
  4601   002872  6ADA               	clrf	fsr2h,c
  4602   002874  0E01               	movlw	1
  4603   002876  26D9               	addwf	fsr2l,f,c
  4604   002878  0E01               	movlw	1
  4605   00287A  6EDF               	movwf	indf2,c
  4606   00287C                     
  4607                           ;dc_motor.c: 107:     (mL->brakemode) = 0;
  4608   00287C  5013               	movf	stop@mL^0,w,c
  4609   00287E  6ED9               	movwf	fsr2l,c
  4610   002880  6ADA               	clrf	fsr2h,c
  4611   002882  0E02               	movlw	2
  4612   002884  26D9               	addwf	fsr2l,f,c
  4613   002886  6ADF               	clrf	indf2,c
  4614                           
  4615                           ;dc_motor.c: 109:     (mR->power) = 10;
  4616   002888  5014               	movf	stop@mR^0,w,c
  4617   00288A  6ED9               	movwf	fsr2l,c
  4618   00288C  6ADA               	clrf	fsr2h,c
  4619   00288E  0E0A               	movlw	10
  4620   002890  6EDF               	movwf	indf2,c
  4621   002892                     
  4622                           ;dc_motor.c: 110:     (mR->direction) = 1;
  4623   002892  5014               	movf	stop@mR^0,w,c
  4624   002894  6ED9               	movwf	fsr2l,c
  4625   002896  6ADA               	clrf	fsr2h,c
  4626   002898  0E01               	movlw	1
  4627   00289A  26D9               	addwf	fsr2l,f,c
  4628   00289C  0E01               	movlw	1
  4629   00289E  6EDF               	movwf	indf2,c
  4630   0028A0                     
  4631                           ;dc_motor.c: 111:     (mR->brakemode) = 0;
  4632   0028A0  5014               	movf	stop@mR^0,w,c
  4633   0028A2  6ED9               	movwf	fsr2l,c
  4634   0028A4  6ADA               	clrf	fsr2h,c
  4635   0028A6  0E02               	movlw	2
  4636   0028A8  26D9               	addwf	fsr2l,f,c
  4637   0028AA  6ADF               	clrf	indf2,c
  4638   0028AC                     
  4639                           ;dc_motor.c: 113:     setMotorPWM(mL);
  4640   0028AC  C013  F00D         	movff	stop@mL,setMotorPWM@m
  4641   0028B0  EC4C  F00C         	call	_setMotorPWM	;wreg free
  4642   0028B4                     
  4643                           ;dc_motor.c: 114:     setMotorPWM(mR);
  4644   0028B4  C014  F00D         	movff	stop@mR,setMotorPWM@m
  4645   0028B8  EC4C  F00C         	call	_setMotorPWM	;wreg free
  4646   0028BC  0012               	return		;funcret
  4647   0028BE                     __end_of_stop:
  4648                           	callstack 0
  4649                           
  4650 ;; *************** function _goStraight *****************
  4651 ;; Defined at:
  4652 ;;		line 206 in file "dc_motor.c"
  4653 ;; Parameters:    Size  Location     Type
  4654 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  4655 ;;		 -> useSequence@mL(8), color2instruction@mL(8), 
  4656 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  4657 ;;		 -> useSequence@mR(8), color2instruction@mR(8), 
  4658 ;;  direction       2   20[COMRAM] unsigned int 
  4659 ;;  squares         2   22[COMRAM] int 
  4660 ;; Auto vars:     Size  Location     Type
  4661 ;;  maxPow          2    0        unsigned int 
  4662 ;;  i               2   26[COMRAM] int 
  4663 ;; Return value:  Size  Location     Type
  4664 ;;                  1    wreg      void 
  4665 ;; Registers used:
  4666 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4667 ;; Tracked objects:
  4668 ;;		On entry : 0/0
  4669 ;;		On exit  : 0/0
  4670 ;;		Unchanged: 0/0
  4671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4672 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4673 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4674 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4675 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4676 ;;Total ram usage:       10 bytes
  4677 ;; Hardware stack levels used: 1
  4678 ;; Hardware stack levels required when called: 4
  4679 ;; This function calls:
  4680 ;;		_setMotorPWM
  4681 ;; This function is called by:
  4682 ;;		_color2instruction
  4683 ;;		_useSequence
  4684 ;; This function uses a non-reentrant model
  4685 ;;
  4686                           
  4687                           	psect	text27
  4688   00172A                     __ptext27:
  4689                           	callstack 0
  4690   00172A                     _goStraight:
  4691                           	callstack 22
  4692   00172A                     
  4693                           ;dc_motor.c: 206: void goStraight(DC_motor *mL, DC_motor *mR, unsigned int direction, in
      +                          t squares);dc_motor.c: 207: {;dc_motor.c: 208:     if(squares != 0 && squares >0){
  4694   00172A  5017               	movf	goStraight@squares^0,w,c
  4695   00172C  1018               	iorwf	(goStraight@squares+1)^0,w,c
  4696   00172E  B4D8               	btfsc	status,2,c
  4697   001730  EF9C  F00B         	goto	u2961
  4698   001734  EF9E  F00B         	goto	u2960
  4699   001738                     u2961:
  4700   001738  EF4B  F00C         	goto	l307
  4701   00173C                     u2960:
  4702   00173C  BE18               	btfsc	(goStraight@squares+1)^0,7,c
  4703   00173E  EFA9  F00B         	goto	u2971
  4704   001742  5018               	movf	(goStraight@squares+1)^0,w,c
  4705   001744  E108               	bnz	u2970
  4706   001746  0417               	decf	goStraight@squares^0,w,c
  4707   001748  A0D8               	btfss	status,0,c
  4708   00174A  EFA9  F00B         	goto	u2971
  4709   00174E  EFAB  F00B         	goto	u2970
  4710   001752                     u2971:
  4711   001752  EF4B  F00C         	goto	l307
  4712   001756                     u2970:
  4713   001756                     
  4714                           ;dc_motor.c: 209:     if(direction != 2 && direction <2){
  4715   001756  0E02               	movlw	2
  4716   001758  1815               	xorwf	goStraight@direction^0,w,c
  4717   00175A  1016               	iorwf	(goStraight@direction+1)^0,w,c
  4718   00175C  B4D8               	btfsc	status,2,c
  4719   00175E  EFB3  F00B         	goto	u2981
  4720   001762  EFB5  F00B         	goto	u2980
  4721   001766                     u2981:
  4722   001766  EF4B  F00C         	goto	l307
  4723   00176A                     u2980:
  4724   00176A  5016               	movf	(goStraight@direction+1)^0,w,c
  4725   00176C  E107               	bnz	u2991
  4726   00176E  0E02               	movlw	2
  4727   001770  5C15               	subwf	goStraight@direction^0,w,c
  4728   001772  B0D8               	btfsc	status,0,c
  4729   001774  EFBE  F00B         	goto	u2991
  4730   001778  EFC0  F00B         	goto	u2990
  4731   00177C                     u2991:
  4732   00177C  EF4B  F00C         	goto	l307
  4733   001780                     u2990:
  4734   001780                     
  4735                           ;dc_motor.c: 210:     for(int i =0; i< squares; i++){
  4736   001780  0E00               	movlw	0
  4737   001782  6E1C               	movwf	(goStraight@i+1)^0,c
  4738   001784  0E00               	movlw	0
  4739   001786  6E1B               	movwf	goStraight@i^0,c
  4740   001788  EF3C  F00C         	goto	l3876
  4741   00178C                     l3832:
  4742   00178C                     
  4743                           ;dc_motor.c: 212:     (mL->power) = maxPow;
  4744   00178C  5013               	movf	goStraight@mL^0,w,c
  4745   00178E  6ED9               	movwf	fsr2l,c
  4746   001790  6ADA               	clrf	fsr2h,c
  4747   001792  0E2D               	movlw	45
  4748   001794  6EDF               	movwf	indf2,c
  4749   001796                     
  4750                           ;dc_motor.c: 214:     (mL->direction) = direction;
  4751   001796  5013               	movf	goStraight@mL^0,w,c
  4752   001798  6ED9               	movwf	fsr2l,c
  4753   00179A  6ADA               	clrf	fsr2h,c
  4754   00179C  0E01               	movlw	1
  4755   00179E  26D9               	addwf	fsr2l,f,c
  4756   0017A0  C015  FFDF         	movff	goStraight@direction,indf2
  4757   0017A4                     
  4758                           ;dc_motor.c: 215:     (mL->brakemode) = 1;
  4759   0017A4  5013               	movf	goStraight@mL^0,w,c
  4760   0017A6  6ED9               	movwf	fsr2l,c
  4761   0017A8  6ADA               	clrf	fsr2h,c
  4762   0017AA  0E02               	movlw	2
  4763   0017AC  26D9               	addwf	fsr2l,f,c
  4764   0017AE  0E01               	movlw	1
  4765   0017B0  6EDF               	movwf	indf2,c
  4766   0017B2                     
  4767                           ;dc_motor.c: 217:     (mR->power) = maxPow;
  4768   0017B2  5014               	movf	goStraight@mR^0,w,c
  4769   0017B4  6ED9               	movwf	fsr2l,c
  4770   0017B6  6ADA               	clrf	fsr2h,c
  4771   0017B8  0E2D               	movlw	45
  4772   0017BA  6EDF               	movwf	indf2,c
  4773   0017BC                     
  4774                           ;dc_motor.c: 219:     (mR->direction) = direction;
  4775   0017BC  5014               	movf	goStraight@mR^0,w,c
  4776   0017BE  6ED9               	movwf	fsr2l,c
  4777   0017C0  6ADA               	clrf	fsr2h,c
  4778   0017C2  0E01               	movlw	1
  4779   0017C4  26D9               	addwf	fsr2l,f,c
  4780   0017C6  C015  FFDF         	movff	goStraight@direction,indf2
  4781   0017CA                     
  4782                           ;dc_motor.c: 220:     (mR->brakemode) = 1;
  4783   0017CA  5014               	movf	goStraight@mR^0,w,c
  4784   0017CC  6ED9               	movwf	fsr2l,c
  4785   0017CE  6ADA               	clrf	fsr2h,c
  4786   0017D0  0E02               	movlw	2
  4787   0017D2  26D9               	addwf	fsr2l,f,c
  4788   0017D4  0E01               	movlw	1
  4789   0017D6  6EDF               	movwf	indf2,c
  4790   0017D8                     
  4791                           ;dc_motor.c: 222:     setMotorPWM(mL);
  4792   0017D8  C013  F00D         	movff	goStraight@mL,setMotorPWM@m
  4793   0017DC  EC4C  F00C         	call	_setMotorPWM	;wreg free
  4794   0017E0                     
  4795                           ;dc_motor.c: 223:     setMotorPWM(mR);
  4796   0017E0  C014  F00D         	movff	goStraight@mR,setMotorPWM@m
  4797   0017E4  EC4C  F00C         	call	_setMotorPWM	;wreg free
  4798   0017E8                     
  4799                           ;dc_motor.c: 225:     _delay((unsigned long)((850)*(64000000/4000.0)));
  4800   0017E8  0E45               	movlw	69
  4801   0017EA  6E1A               	movwf	(??_goStraight+1)^0,c
  4802   0017EC  0EFF               	movlw	255
  4803   0017EE  6E19               	movwf	??_goStraight^0,c
  4804   0017F0  0E26               	movlw	38
  4805   0017F2                     u3717:
  4806   0017F2  2EE8               	decfsz	wreg,f,c
  4807   0017F4  D7FE               	bra	u3717
  4808   0017F6  2E19               	decfsz	??_goStraight^0,f,c
  4809   0017F8  D7FC               	bra	u3717
  4810   0017FA  2E1A               	decfsz	(??_goStraight+1)^0,f,c
  4811   0017FC  D7FA               	bra	u3717
  4812   0017FE  D000               	nop2	
  4813   001800                     
  4814                           ;dc_motor.c: 227:     LATDbits.LATD4 = 1;
  4815   001800  887C               	bsf	124,4,c	;volatile
  4816   001802                     
  4817                           ;dc_motor.c: 229:     (mL->power) = 15;
  4818   001802  5013               	movf	goStraight@mL^0,w,c
  4819   001804  6ED9               	movwf	fsr2l,c
  4820   001806  6ADA               	clrf	fsr2h,c
  4821   001808  0E0F               	movlw	15
  4822   00180A  6EDF               	movwf	indf2,c
  4823   00180C                     
  4824                           ;dc_motor.c: 230:     (mL->direction) = direction;
  4825   00180C  5013               	movf	goStraight@mL^0,w,c
  4826   00180E  6ED9               	movwf	fsr2l,c
  4827   001810  6ADA               	clrf	fsr2h,c
  4828   001812  0E01               	movlw	1
  4829   001814  26D9               	addwf	fsr2l,f,c
  4830   001816  C015  FFDF         	movff	goStraight@direction,indf2
  4831   00181A                     
  4832                           ;dc_motor.c: 231:     (mL->brakemode) = 0;
  4833   00181A  5013               	movf	goStraight@mL^0,w,c
  4834   00181C  6ED9               	movwf	fsr2l,c
  4835   00181E  6ADA               	clrf	fsr2h,c
  4836   001820  0E02               	movlw	2
  4837   001822  26D9               	addwf	fsr2l,f,c
  4838   001824  6ADF               	clrf	indf2,c
  4839   001826                     
  4840                           ;dc_motor.c: 233:     (mR->power) = 15;
  4841   001826  5014               	movf	goStraight@mR^0,w,c
  4842   001828  6ED9               	movwf	fsr2l,c
  4843   00182A  6ADA               	clrf	fsr2h,c
  4844   00182C  0E0F               	movlw	15
  4845   00182E  6EDF               	movwf	indf2,c
  4846   001830                     
  4847                           ;dc_motor.c: 234:     (mR->direction) = direction;
  4848   001830  5014               	movf	goStraight@mR^0,w,c
  4849   001832  6ED9               	movwf	fsr2l,c
  4850   001834  6ADA               	clrf	fsr2h,c
  4851   001836  0E01               	movlw	1
  4852   001838  26D9               	addwf	fsr2l,f,c
  4853   00183A  C015  FFDF         	movff	goStraight@direction,indf2
  4854   00183E                     
  4855                           ;dc_motor.c: 235:     (mR->brakemode) = 0;
  4856   00183E  5014               	movf	goStraight@mR^0,w,c
  4857   001840  6ED9               	movwf	fsr2l,c
  4858   001842  6ADA               	clrf	fsr2h,c
  4859   001844  0E02               	movlw	2
  4860   001846  26D9               	addwf	fsr2l,f,c
  4861   001848  6ADF               	clrf	indf2,c
  4862   00184A                     
  4863                           ;dc_motor.c: 237:     setMotorPWM(mL);
  4864   00184A  C013  F00D         	movff	goStraight@mL,setMotorPWM@m
  4865   00184E  EC4C  F00C         	call	_setMotorPWM	;wreg free
  4866   001852                     
  4867                           ;dc_motor.c: 238:     setMotorPWM(mR);
  4868   001852  C014  F00D         	movff	goStraight@mR,setMotorPWM@m
  4869   001856  EC4C  F00C         	call	_setMotorPWM	;wreg free
  4870   00185A                     
  4871                           ;dc_motor.c: 240:     _delay((unsigned long)((250)*(64000000/4000.0)));
  4872   00185A  0E15               	movlw	21
  4873   00185C  6E1A               	movwf	(??_goStraight+1)^0,c
  4874   00185E  0E4B               	movlw	75
  4875   001860  6E19               	movwf	??_goStraight^0,c
  4876   001862  0EBE               	movlw	190
  4877   001864                     u3727:
  4878   001864  2EE8               	decfsz	wreg,f,c
  4879   001866  D7FE               	bra	u3727
  4880   001868  2E19               	decfsz	??_goStraight^0,f,c
  4881   00186A  D7FC               	bra	u3727
  4882   00186C  2E1A               	decfsz	(??_goStraight+1)^0,f,c
  4883   00186E  D7FA               	bra	u3727
  4884   001870  D000               	nop2	
  4885   001872                     
  4886                           ;dc_motor.c: 242:     LATDbits.LATD4 = 0;
  4887   001872  987C               	bcf	124,4,c	;volatile
  4888   001874                     
  4889                           ;dc_motor.c: 244:         }
  4890   001874  4A1B               	infsnz	goStraight@i^0,f,c
  4891   001876  2A1C               	incf	(goStraight@i+1)^0,f,c
  4892   001878                     l3876:
  4893   001878  5017               	movf	goStraight@squares^0,w,c
  4894   00187A  5C1B               	subwf	goStraight@i^0,w,c
  4895   00187C  501C               	movf	(goStraight@i+1)^0,w,c
  4896   00187E  0A80               	xorlw	128
  4897   001880  6E19               	movwf	??_goStraight^0,c
  4898   001882  5018               	movf	(goStraight@squares+1)^0,w,c
  4899   001884  0A80               	xorlw	128
  4900   001886  5819               	subwfb	??_goStraight^0,w,c
  4901   001888  A0D8               	btfss	status,0,c
  4902   00188A  EF49  F00C         	goto	u3001
  4903   00188E  EF4B  F00C         	goto	u3000
  4904   001892                     u3001:
  4905   001892  EFC6  F00B         	goto	l3832
  4906   001896                     u3000:
  4907   001896                     l307:
  4908   001896  0012               	return		;funcret
  4909   001898                     __end_of_goStraight:
  4910                           	callstack 0
  4911                           
  4912 ;; *************** function _checkIncidence *****************
  4913 ;; Defined at:
  4914 ;;		line 182 in file "color.c"
  4915 ;; Parameters:    Size  Location     Type
  4916 ;;		None
  4917 ;; Auto vars:     Size  Location     Type
  4918 ;;  tmp            16   32[COMRAM] struct RGBC
  4919 ;; Return value:  Size  Location     Type
  4920 ;;                  1    wreg      void 
  4921 ;; Registers used:
  4922 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4923 ;; Tracked objects:
  4924 ;;		On entry : 0/0
  4925 ;;		On exit  : 0/0
  4926 ;;		Unchanged: 0/0
  4927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4929 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4931 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4932 ;;Total ram usage:       16 bytes
  4933 ;; Hardware stack levels used: 1
  4934 ;; Hardware stack levels required when called: 5
  4935 ;; This function calls:
  4936 ;;		_color_read_all
  4937 ;;		_triLED_tog
  4938 ;; This function is called by:
  4939 ;;		_color2instruction
  4940 ;; This function uses a non-reentrant model
  4941 ;;
  4942                           
  4943                           	psect	text28
  4944   0028BE                     __ptext28:
  4945                           	callstack 0
  4946   0028BE                     _checkIncidence:
  4947                           	callstack 23
  4948   0028BE                     
  4949                           ;color.c: 183:     triLED_tog(1);
  4950   0028BE  0E01               	movlw	1
  4951   0028C0  EC8A  F015         	call	_triLED_tog
  4952   0028C4                     
  4953                           ;color.c: 184:  RGBC tmp;;color.c: 187:  color_read_all(&tmp);
  4954   0028C4  0E21               	movlw	low checkIncidence@tmp
  4955   0028C6  6E09               	movwf	color_read_all@readVals^0,c
  4956   0028C8  ECF4  F009         	call	_color_read_all	;wreg free
  4957   0028CC                     
  4958                           ;color.c: 188:  if(tmp.clear > incidenceThresh){
  4959   0028CC  BE30               	btfsc	(checkIncidence@tmp+15)^0,7,c
  4960   0028CE  EF75  F014         	goto	u3151
  4961   0028D2  5030               	movf	(checkIncidence@tmp+15)^0,w,c
  4962   0028D4  102F               	iorwf	(checkIncidence@tmp+14)^0,w,c
  4963   0028D6  E10B               	bnz	u3150
  4964   0028D8  0EF5               	movlw	245
  4965   0028DA  5C2D               	subwf	(checkIncidence@tmp+12)^0,w,c
  4966   0028DC  0E01               	movlw	1
  4967   0028DE  582E               	subwfb	(checkIncidence@tmp+13)^0,w,c
  4968   0028E0  A0D8               	btfss	status,0,c
  4969   0028E2  EF75  F014         	goto	u3151
  4970   0028E6  EF77  F014         	goto	u3150
  4971   0028EA                     u3151:
  4972   0028EA  EF7E  F014         	goto	l4002
  4973   0028EE                     u3150:
  4974   0028EE                     
  4975                           ;color.c: 189:   readingColor = 1;
  4976   0028EE  0E00               	movlw	0
  4977   0028F0  0100               	movlb	0	; () banked
  4978   0028F2  6FF7               	movwf	(_readingColor+1)& (0+255),b
  4979   0028F4  0E01               	movlw	1
  4980   0028F6  6FF6               	movwf	_readingColor& (0+255),b
  4981                           
  4982                           ;color.c: 190:  }
  4983   0028F8  EF83  F014         	goto	l130
  4984   0028FC                     l4002:
  4985                           
  4986                           ;color.c: 192:   readingColor = 0;
  4987   0028FC  0E00               	movlw	0
  4988   0028FE  0100               	movlb	0	; () banked
  4989   002900  6FF7               	movwf	(_readingColor+1)& (0+255),b
  4990   002902  0E00               	movlw	0
  4991   002904  6FF6               	movwf	_readingColor& (0+255),b
  4992   002906                     l130:
  4993                           
  4994                           ; BSR set to: 0
  4995   002906  0012               	return		;funcret
  4996   002908                     __end_of_checkIncidence:
  4997                           	callstack 0
  4998                           
  4999 ;; *************** function _bump *****************
  5000 ;; Defined at:
  5001 ;;		line 249 in file "dc_motor.c"
  5002 ;; Parameters:    Size  Location     Type
  5003 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  5004 ;;		 -> color2instruction@mL(8), 
  5005 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  5006 ;;		 -> color2instruction@mR(8), 
  5007 ;;  direction       2   20[COMRAM] unsigned int 
  5008 ;; Auto vars:     Size  Location     Type
  5009 ;;		None
  5010 ;; Return value:  Size  Location     Type
  5011 ;;                  1    wreg      void 
  5012 ;; Registers used:
  5013 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5014 ;; Tracked objects:
  5015 ;;		On entry : 0/0
  5016 ;;		On exit  : 0/0
  5017 ;;		Unchanged: 0/0
  5018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5019 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5020 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5021 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5022 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5023 ;;Total ram usage:        6 bytes
  5024 ;; Hardware stack levels used: 1
  5025 ;; Hardware stack levels required when called: 4
  5026 ;; This function calls:
  5027 ;;		_setMotorPWM
  5028 ;; This function is called by:
  5029 ;;		_color2instruction
  5030 ;; This function uses a non-reentrant model
  5031 ;;
  5032                           
  5033                           	psect	text29
  5034   002150                     __ptext29:
  5035                           	callstack 0
  5036   002150                     _bump:
  5037                           	callstack 24
  5038   002150                     
  5039                           ;dc_motor.c: 249: void bump(DC_motor *mL, DC_motor *mR, unsigned int direction);dc_motor
      +                          .c: 250: {;dc_motor.c: 251:     (mL->power) = 35;
  5040   002150  5013               	movf	bump@mL^0,w,c
  5041   002152  6ED9               	movwf	fsr2l,c
  5042   002154  6ADA               	clrf	fsr2h,c
  5043   002156  0E23               	movlw	35
  5044   002158  6EDF               	movwf	indf2,c
  5045   00215A                     
  5046                           ;dc_motor.c: 252:     (mL->direction) = direction;
  5047   00215A  5013               	movf	bump@mL^0,w,c
  5048   00215C  6ED9               	movwf	fsr2l,c
  5049   00215E  6ADA               	clrf	fsr2h,c
  5050   002160  0E01               	movlw	1
  5051   002162  26D9               	addwf	fsr2l,f,c
  5052   002164  C015  FFDF         	movff	bump@direction,indf2
  5053   002168                     
  5054                           ;dc_motor.c: 253:     (mL->brakemode) = 1;
  5055   002168  5013               	movf	bump@mL^0,w,c
  5056   00216A  6ED9               	movwf	fsr2l,c
  5057   00216C  6ADA               	clrf	fsr2h,c
  5058   00216E  0E02               	movlw	2
  5059   002170  26D9               	addwf	fsr2l,f,c
  5060   002172  0E01               	movlw	1
  5061   002174  6EDF               	movwf	indf2,c
  5062                           
  5063                           ;dc_motor.c: 255:     (mR->power) = 35;
  5064   002176  5014               	movf	bump@mR^0,w,c
  5065   002178  6ED9               	movwf	fsr2l,c
  5066   00217A  6ADA               	clrf	fsr2h,c
  5067   00217C  0E23               	movlw	35
  5068   00217E  6EDF               	movwf	indf2,c
  5069   002180                     
  5070                           ;dc_motor.c: 256:     (mR->direction) = direction;
  5071   002180  5014               	movf	bump@mR^0,w,c
  5072   002182  6ED9               	movwf	fsr2l,c
  5073   002184  6ADA               	clrf	fsr2h,c
  5074   002186  0E01               	movlw	1
  5075   002188  26D9               	addwf	fsr2l,f,c
  5076   00218A  C015  FFDF         	movff	bump@direction,indf2
  5077   00218E                     
  5078                           ;dc_motor.c: 257:     (mR->brakemode) = 1;
  5079   00218E  5014               	movf	bump@mR^0,w,c
  5080   002190  6ED9               	movwf	fsr2l,c
  5081   002192  6ADA               	clrf	fsr2h,c
  5082   002194  0E02               	movlw	2
  5083   002196  26D9               	addwf	fsr2l,f,c
  5084   002198  0E01               	movlw	1
  5085   00219A  6EDF               	movwf	indf2,c
  5086   00219C                     
  5087                           ;dc_motor.c: 259:     setMotorPWM(mL);
  5088   00219C  C013  F00D         	movff	bump@mL,setMotorPWM@m
  5089   0021A0  EC4C  F00C         	call	_setMotorPWM	;wreg free
  5090   0021A4                     
  5091                           ;dc_motor.c: 260:     setMotorPWM(mR);
  5092   0021A4  C014  F00D         	movff	bump@mR,setMotorPWM@m
  5093   0021A8  EC4C  F00C         	call	_setMotorPWM	;wreg free
  5094   0021AC                     
  5095                           ;dc_motor.c: 262:     _delay((unsigned long)((400)*(64000000/4000.0)));
  5096   0021AC  0E21               	movlw	33
  5097   0021AE  6E18               	movwf	(??_bump+1)^0,c
  5098   0021B0  0E78               	movlw	120
  5099   0021B2  6E17               	movwf	??_bump^0,c
  5100   0021B4  0E98               	movlw	152
  5101   0021B6                     u3737:
  5102   0021B6  2EE8               	decfsz	wreg,f,c
  5103   0021B8  D7FE               	bra	u3737
  5104   0021BA  2E17               	decfsz	??_bump^0,f,c
  5105   0021BC  D7FC               	bra	u3737
  5106   0021BE  2E18               	decfsz	(??_bump+1)^0,f,c
  5107   0021C0  D7FA               	bra	u3737
  5108   0021C2  D000               	nop2	
  5109   0021C4                     
  5110                           ;dc_motor.c: 264:     LATDbits.LATD4 = 1;
  5111   0021C4  887C               	bsf	124,4,c	;volatile
  5112   0021C6                     
  5113                           ;dc_motor.c: 266:     (mL->power) = 15;
  5114   0021C6  5013               	movf	bump@mL^0,w,c
  5115   0021C8  6ED9               	movwf	fsr2l,c
  5116   0021CA  6ADA               	clrf	fsr2h,c
  5117   0021CC  0E0F               	movlw	15
  5118   0021CE  6EDF               	movwf	indf2,c
  5119   0021D0                     
  5120                           ;dc_motor.c: 267:     (mL->direction) = direction;
  5121   0021D0  5013               	movf	bump@mL^0,w,c
  5122   0021D2  6ED9               	movwf	fsr2l,c
  5123   0021D4  6ADA               	clrf	fsr2h,c
  5124   0021D6  0E01               	movlw	1
  5125   0021D8  26D9               	addwf	fsr2l,f,c
  5126   0021DA  C015  FFDF         	movff	bump@direction,indf2
  5127   0021DE                     
  5128                           ;dc_motor.c: 268:     (mL->brakemode) = 0;
  5129   0021DE  5013               	movf	bump@mL^0,w,c
  5130   0021E0  6ED9               	movwf	fsr2l,c
  5131   0021E2  6ADA               	clrf	fsr2h,c
  5132   0021E4  0E02               	movlw	2
  5133   0021E6  26D9               	addwf	fsr2l,f,c
  5134   0021E8  6ADF               	clrf	indf2,c
  5135   0021EA                     
  5136                           ;dc_motor.c: 270:     (mR->power) = 15;
  5137   0021EA  5014               	movf	bump@mR^0,w,c
  5138   0021EC  6ED9               	movwf	fsr2l,c
  5139   0021EE  6ADA               	clrf	fsr2h,c
  5140   0021F0  0E0F               	movlw	15
  5141   0021F2  6EDF               	movwf	indf2,c
  5142   0021F4                     
  5143                           ;dc_motor.c: 271:     (mR->direction) = direction;
  5144   0021F4  5014               	movf	bump@mR^0,w,c
  5145   0021F6  6ED9               	movwf	fsr2l,c
  5146   0021F8  6ADA               	clrf	fsr2h,c
  5147   0021FA  0E01               	movlw	1
  5148   0021FC  26D9               	addwf	fsr2l,f,c
  5149   0021FE  C015  FFDF         	movff	bump@direction,indf2
  5150   002202                     
  5151                           ;dc_motor.c: 272:     (mR->brakemode) = 0;
  5152   002202  5014               	movf	bump@mR^0,w,c
  5153   002204  6ED9               	movwf	fsr2l,c
  5154   002206  6ADA               	clrf	fsr2h,c
  5155   002208  0E02               	movlw	2
  5156   00220A  26D9               	addwf	fsr2l,f,c
  5157   00220C  6ADF               	clrf	indf2,c
  5158   00220E                     
  5159                           ;dc_motor.c: 274:     setMotorPWM(mL);
  5160   00220E  C013  F00D         	movff	bump@mL,setMotorPWM@m
  5161   002212  EC4C  F00C         	call	_setMotorPWM	;wreg free
  5162   002216                     
  5163                           ;dc_motor.c: 275:     setMotorPWM(mR);
  5164   002216  C014  F00D         	movff	bump@mR,setMotorPWM@m
  5165   00221A  EC4C  F00C         	call	_setMotorPWM	;wreg free
  5166   00221E                     
  5167                           ;dc_motor.c: 277:     _delay((unsigned long)((200)*(64000000/4000.0)));
  5168   00221E  0E11               	movlw	17
  5169   002220  6E18               	movwf	(??_bump+1)^0,c
  5170   002222  0E3C               	movlw	60
  5171   002224  6E17               	movwf	??_bump^0,c
  5172   002226  0ECB               	movlw	203
  5173   002228                     u3747:
  5174   002228  2EE8               	decfsz	wreg,f,c
  5175   00222A  D7FE               	bra	u3747
  5176   00222C  2E17               	decfsz	??_bump^0,f,c
  5177   00222E  D7FC               	bra	u3747
  5178   002230  2E18               	decfsz	(??_bump+1)^0,f,c
  5179   002232  D7FA               	bra	u3747
  5180   002234  0000               	nop	
  5181   002236                     
  5182                           ;dc_motor.c: 279:     LATDbits.LATD4 = 0;
  5183   002236  987C               	bcf	124,4,c	;volatile
  5184   002238  0012               	return		;funcret
  5185   00223A                     __end_of_bump:
  5186                           	callstack 0
  5187                           
  5188 ;; *************** function _setMotorPWM *****************
  5189 ;; Defined at:
  5190 ;;		line 80 in file "dc_motor.c"
  5191 ;; Parameters:    Size  Location     Type
  5192 ;;  m               1   12[COMRAM] PTR struct DC_motor
  5193 ;;		 -> turn@mR(8), turn@mL(8), dance@mR(8), dance@mL(8), 
  5194 ;;		 -> useSequence@mR(8), useSequence@mL(8), color2instruction@mR(8), color2instruction@mL(8), 
  5195 ;; Auto vars:     Size  Location     Type
  5196 ;;  negDuty         1   17[COMRAM] unsigned char 
  5197 ;;  posDuty         1   16[COMRAM] unsigned char 
  5198 ;; Return value:  Size  Location     Type
  5199 ;;                  1    wreg      void 
  5200 ;; Registers used:
  5201 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5202 ;; Tracked objects:
  5203 ;;		On entry : 0/0
  5204 ;;		On exit  : 0/0
  5205 ;;		Unchanged: 0/0
  5206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5207 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5208 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5209 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5210 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5211 ;;Total ram usage:        6 bytes
  5212 ;; Hardware stack levels used: 1
  5213 ;; Hardware stack levels required when called: 3
  5214 ;; This function calls:
  5215 ;;		___awdiv
  5216 ;; This function is called by:
  5217 ;;		_stop
  5218 ;;		_turnLeft
  5219 ;;		_turnRight
  5220 ;;		_goStraight
  5221 ;;		_bump
  5222 ;; This function uses a non-reentrant model
  5223 ;;
  5224                           
  5225                           	psect	text30
  5226   001898                     __ptext30:
  5227                           	callstack 0
  5228   001898                     _setMotorPWM:
  5229                           	callstack 23
  5230   001898                     
  5231                           ;dc_motor.c: 80: void setMotorPWM(DC_motor *m);dc_motor.c: 81: {;dc_motor.c: 82:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 84:     if(m->brakemode) {
  5232   001898  500D               	movf	setMotorPWM@m^0,w,c
  5233   00189A  6ED9               	movwf	fsr2l,c
  5234   00189C  6ADA               	clrf	fsr2h,c
  5235   00189E  0E02               	movlw	2
  5236   0018A0  26D9               	addwf	fsr2l,f,c
  5237   0018A2  50DF               	movf	indf2,w,c
  5238   0018A4  B4D8               	btfsc	status,2,c
  5239   0018A6  EF57  F00C         	goto	u2581
  5240   0018AA  EF59  F00C         	goto	u2580
  5241   0018AE                     u2581:
  5242   0018AE  EF84  F00C         	goto	l3484
  5243   0018B2                     u2580:
  5244   0018B2                     
  5245                           ;dc_motor.c: 85:         posDuty=m->PWMperiod - ((unsigned char)(m->power)*(m->PWMperiod
      +                          ))/100;
  5246   0018B2  500D               	movf	setMotorPWM@m^0,w,c
  5247   0018B4  6ED9               	movwf	fsr2l,c
  5248   0018B6  6ADA               	clrf	fsr2h,c
  5249   0018B8  0E03               	movlw	3
  5250   0018BA  26D9               	addwf	fsr2l,f,c
  5251   0018BC  50DF               	movf	indf2,w,c
  5252   0018BE  6E0E               	movwf	??_setMotorPWM^0,c
  5253   0018C0  500D               	movf	setMotorPWM@m^0,w,c
  5254   0018C2  6ED9               	movwf	fsr2l,c
  5255   0018C4  6ADA               	clrf	fsr2h,c
  5256   0018C6  50DF               	movf	indf2,w,c
  5257   0018C8  6E0F               	movwf	(??_setMotorPWM+1)^0,c
  5258   0018CA  500F               	movf	(??_setMotorPWM+1)^0,w,c
  5259   0018CC  020E               	mulwf	??_setMotorPWM^0,c
  5260   0018CE  CFF3 F005          	movff	prodl,___awdiv@dividend
  5261   0018D2  CFF4 F006          	movff	prodh,___awdiv@dividend+1
  5262   0018D6  0E00               	movlw	0
  5263   0018D8  6E08               	movwf	(___awdiv@divisor+1)^0,c
  5264   0018DA  0E64               	movlw	100
  5265   0018DC  6E07               	movwf	___awdiv@divisor^0,c
  5266   0018DE  EC85  F011         	call	___awdiv	;wreg free
  5267   0018E2  500D               	movf	setMotorPWM@m^0,w,c
  5268   0018E4  6ED9               	movwf	fsr2l,c
  5269   0018E6  6ADA               	clrf	fsr2h,c
  5270   0018E8  0E03               	movlw	3
  5271   0018EA  26D9               	addwf	fsr2l,f,c
  5272   0018EC  50DF               	movf	indf2,w,c
  5273   0018EE  6E10               	movwf	(??_setMotorPWM+2)^0,c
  5274   0018F0  5005               	movf	?___awdiv^0,w,c
  5275   0018F2  5C10               	subwf	(??_setMotorPWM+2)^0,w,c
  5276   0018F4  6E11               	movwf	setMotorPWM@posDuty^0,c
  5277   0018F6                     
  5278                           ;dc_motor.c: 86:         negDuty=m->PWMperiod;
  5279   0018F6  500D               	movf	setMotorPWM@m^0,w,c
  5280   0018F8  6ED9               	movwf	fsr2l,c
  5281   0018FA  6ADA               	clrf	fsr2h,c
  5282   0018FC  0E03               	movlw	3
  5283   0018FE  26D9               	addwf	fsr2l,f,c
  5284   001900  50DF               	movf	indf2,w,c
  5285   001902  6E12               	movwf	setMotorPWM@negDuty^0,c
  5286                           
  5287                           ;dc_motor.c: 87:     }
  5288   001904  EFA0  F00C         	goto	l3488
  5289   001908                     l3484:
  5290                           
  5291                           ;dc_motor.c: 89:         posDuty=0;
  5292   001908  0E00               	movlw	0
  5293   00190A  6E11               	movwf	setMotorPWM@posDuty^0,c
  5294   00190C                     
  5295                           ;dc_motor.c: 90:   negDuty=((unsigned char)(m->power)*(m->PWMperiod))/100;
  5296   00190C  500D               	movf	setMotorPWM@m^0,w,c
  5297   00190E  6ED9               	movwf	fsr2l,c
  5298   001910  6ADA               	clrf	fsr2h,c
  5299   001912  0E03               	movlw	3
  5300   001914  26D9               	addwf	fsr2l,f,c
  5301   001916  50DF               	movf	indf2,w,c
  5302   001918  6E0E               	movwf	??_setMotorPWM^0,c
  5303   00191A  500D               	movf	setMotorPWM@m^0,w,c
  5304   00191C  6ED9               	movwf	fsr2l,c
  5305   00191E  6ADA               	clrf	fsr2h,c
  5306   001920  50DF               	movf	indf2,w,c
  5307   001922  6E0F               	movwf	(??_setMotorPWM+1)^0,c
  5308   001924  500F               	movf	(??_setMotorPWM+1)^0,w,c
  5309   001926  020E               	mulwf	??_setMotorPWM^0,c
  5310   001928  CFF3 F005          	movff	prodl,___awdiv@dividend
  5311   00192C  CFF4 F006          	movff	prodh,___awdiv@dividend+1
  5312   001930  0E00               	movlw	0
  5313   001932  6E08               	movwf	(___awdiv@divisor+1)^0,c
  5314   001934  0E64               	movlw	100
  5315   001936  6E07               	movwf	___awdiv@divisor^0,c
  5316   001938  EC85  F011         	call	___awdiv	;wreg free
  5317   00193C  5005               	movf	?___awdiv^0,w,c
  5318   00193E  6E12               	movwf	setMotorPWM@negDuty^0,c
  5319   001940                     l3488:
  5320                           
  5321                           ;dc_motor.c: 93:     if (m->direction) {
  5322   001940  500D               	movf	setMotorPWM@m^0,w,c
  5323   001942  6ED9               	movwf	fsr2l,c
  5324   001944  6ADA               	clrf	fsr2h,c
  5325   001946  0E01               	movlw	1
  5326   001948  26D9               	addwf	fsr2l,f,c
  5327   00194A  50DF               	movf	indf2,w,c
  5328   00194C  B4D8               	btfsc	status,2,c
  5329   00194E  EFAB  F00C         	goto	u2591
  5330   001952  EFAD  F00C         	goto	u2590
  5331   001956                     u2591:
  5332   001956  EFCD  F00C         	goto	l3492
  5333   00195A                     u2590:
  5334   00195A                     
  5335                           ;dc_motor.c: 94:         *(m->posDutyHighByte)=posDuty;
  5336   00195A  500D               	movf	setMotorPWM@m^0,w,c
  5337   00195C  6ED9               	movwf	fsr2l,c
  5338   00195E  6ADA               	clrf	fsr2h,c
  5339   001960  0E04               	movlw	4
  5340   001962  26D9               	addwf	fsr2l,f,c
  5341   001964  CFDE F00E          	movff	postinc2,??_setMotorPWM
  5342   001968  CFDD F00F          	movff	postdec2,??_setMotorPWM+1
  5343   00196C  C00E  FFD9         	movff	??_setMotorPWM,fsr2l
  5344   001970  C00F  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5345   001974  C011  FFDF         	movff	setMotorPWM@posDuty,indf2
  5346                           
  5347                           ;dc_motor.c: 95:         *(m->negDutyHighByte)=negDuty;
  5348   001978  500D               	movf	setMotorPWM@m^0,w,c
  5349   00197A  6ED9               	movwf	fsr2l,c
  5350   00197C  6ADA               	clrf	fsr2h,c
  5351   00197E  0E06               	movlw	6
  5352   001980  26D9               	addwf	fsr2l,f,c
  5353   001982  CFDE F00E          	movff	postinc2,??_setMotorPWM
  5354   001986  CFDD F00F          	movff	postdec2,??_setMotorPWM+1
  5355   00198A  C00E  FFD9         	movff	??_setMotorPWM,fsr2l
  5356   00198E  C00F  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5357   001992  C012  FFDF         	movff	setMotorPWM@negDuty,indf2
  5358                           
  5359                           ;dc_motor.c: 96:     } else {
  5360   001996  EFEB  F00C         	goto	l278
  5361   00199A                     l3492:
  5362                           
  5363                           ;dc_motor.c: 97:         *(m->posDutyHighByte)=negDuty;
  5364   00199A  500D               	movf	setMotorPWM@m^0,w,c
  5365   00199C  6ED9               	movwf	fsr2l,c
  5366   00199E  6ADA               	clrf	fsr2h,c
  5367   0019A0  0E04               	movlw	4
  5368   0019A2  26D9               	addwf	fsr2l,f,c
  5369   0019A4  CFDE F00E          	movff	postinc2,??_setMotorPWM
  5370   0019A8  CFDD F00F          	movff	postdec2,??_setMotorPWM+1
  5371   0019AC  C00E  FFD9         	movff	??_setMotorPWM,fsr2l
  5372   0019B0  C00F  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5373   0019B4  C012  FFDF         	movff	setMotorPWM@negDuty,indf2
  5374                           
  5375                           ;dc_motor.c: 98:         *(m->negDutyHighByte)=posDuty;
  5376   0019B8  500D               	movf	setMotorPWM@m^0,w,c
  5377   0019BA  6ED9               	movwf	fsr2l,c
  5378   0019BC  6ADA               	clrf	fsr2h,c
  5379   0019BE  0E06               	movlw	6
  5380   0019C0  26D9               	addwf	fsr2l,f,c
  5381   0019C2  CFDE F00E          	movff	postinc2,??_setMotorPWM
  5382   0019C6  CFDD F00F          	movff	postdec2,??_setMotorPWM+1
  5383   0019CA  C00E  FFD9         	movff	??_setMotorPWM,fsr2l
  5384   0019CE  C00F  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5385   0019D2  C011  FFDF         	movff	setMotorPWM@posDuty,indf2
  5386   0019D6                     l278:
  5387   0019D6  0012               	return		;funcret
  5388   0019D8                     __end_of_setMotorPWM:
  5389                           	callstack 0
  5390                           
  5391 ;; *************** function ___awdiv *****************
  5392 ;; Defined at:
  5393 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  5394 ;; Parameters:    Size  Location     Type
  5395 ;;  dividend        2    4[COMRAM] int 
  5396 ;;  divisor         2    6[COMRAM] int 
  5397 ;; Auto vars:     Size  Location     Type
  5398 ;;  quotient        2   10[COMRAM] int 
  5399 ;;  sign            1    9[COMRAM] unsigned char 
  5400 ;;  counter         1    8[COMRAM] unsigned char 
  5401 ;; Return value:  Size  Location     Type
  5402 ;;                  2    4[COMRAM] int 
  5403 ;; Registers used:
  5404 ;;		wreg, status,2, status,0
  5405 ;; Tracked objects:
  5406 ;;		On entry : 0/0
  5407 ;;		On exit  : 0/0
  5408 ;;		Unchanged: 0/0
  5409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5410 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5411 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5413 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5414 ;;Total ram usage:        8 bytes
  5415 ;; Hardware stack levels used: 1
  5416 ;; Hardware stack levels required when called: 2
  5417 ;; This function calls:
  5418 ;;		Nothing
  5419 ;; This function is called by:
  5420 ;;		_setMotorPWM
  5421 ;; This function uses a non-reentrant model
  5422 ;;
  5423                           
  5424                           	psect	text31
  5425   00230A                     __ptext31:
  5426                           	callstack 0
  5427   00230A                     ___awdiv:
  5428                           	callstack 23
  5429   00230A  0E00               	movlw	0
  5430   00230C  6E0A               	movwf	___awdiv@sign^0,c
  5431   00230E  BE08               	btfsc	(___awdiv@divisor+1)^0,7,c
  5432   002310  EF8E  F011         	goto	u2510
  5433   002314  EF8C  F011         	goto	u2511
  5434   002318                     u2511:
  5435   002318  EF94  F011         	goto	l3438
  5436   00231C                     u2510:
  5437   00231C  6C07               	negf	___awdiv@divisor^0,c
  5438   00231E  1E08               	comf	(___awdiv@divisor+1)^0,f,c
  5439   002320  B0D8               	btfsc	status,0,c
  5440   002322  2A08               	incf	(___awdiv@divisor+1)^0,f,c
  5441   002324  0E01               	movlw	1
  5442   002326  6E0A               	movwf	___awdiv@sign^0,c
  5443   002328                     l3438:
  5444   002328  BE06               	btfsc	(___awdiv@dividend+1)^0,7,c
  5445   00232A  EF9B  F011         	goto	u2520
  5446   00232E  EF99  F011         	goto	u2521
  5447   002332                     u2521:
  5448   002332  EFA1  F011         	goto	l3444
  5449   002336                     u2520:
  5450   002336  6C05               	negf	___awdiv@dividend^0,c
  5451   002338  1E06               	comf	(___awdiv@dividend+1)^0,f,c
  5452   00233A  B0D8               	btfsc	status,0,c
  5453   00233C  2A06               	incf	(___awdiv@dividend+1)^0,f,c
  5454   00233E  0E01               	movlw	1
  5455   002340  1A0A               	xorwf	___awdiv@sign^0,f,c
  5456   002342                     l3444:
  5457   002342  0E00               	movlw	0
  5458   002344  6E0C               	movwf	(___awdiv@quotient+1)^0,c
  5459   002346  0E00               	movlw	0
  5460   002348  6E0B               	movwf	___awdiv@quotient^0,c
  5461   00234A  5007               	movf	___awdiv@divisor^0,w,c
  5462   00234C  1008               	iorwf	(___awdiv@divisor+1)^0,w,c
  5463   00234E  B4D8               	btfsc	status,2,c
  5464   002350  EFAC  F011         	goto	u2531
  5465   002354  EFAE  F011         	goto	u2530
  5466   002358                     u2531:
  5467   002358  EFD6  F011         	goto	l3466
  5468   00235C                     u2530:
  5469   00235C  0E01               	movlw	1
  5470   00235E  6E09               	movwf	___awdiv@counter^0,c
  5471   002360  EFB6  F011         	goto	l3452
  5472   002364                     l3450:
  5473   002364  90D8               	bcf	status,0,c
  5474   002366  3607               	rlcf	___awdiv@divisor^0,f,c
  5475   002368  3608               	rlcf	(___awdiv@divisor+1)^0,f,c
  5476   00236A  2A09               	incf	___awdiv@counter^0,f,c
  5477   00236C                     l3452:
  5478   00236C  AE08               	btfss	(___awdiv@divisor+1)^0,7,c
  5479   00236E  EFBB  F011         	goto	u2541
  5480   002372  EFBD  F011         	goto	u2540
  5481   002376                     u2541:
  5482   002376  EFB2  F011         	goto	l3450
  5483   00237A                     u2540:
  5484   00237A                     l3454:
  5485   00237A  90D8               	bcf	status,0,c
  5486   00237C  360B               	rlcf	___awdiv@quotient^0,f,c
  5487   00237E  360C               	rlcf	(___awdiv@quotient+1)^0,f,c
  5488   002380  5007               	movf	___awdiv@divisor^0,w,c
  5489   002382  5C05               	subwf	___awdiv@dividend^0,w,c
  5490   002384  5008               	movf	(___awdiv@divisor+1)^0,w,c
  5491   002386  5806               	subwfb	(___awdiv@dividend+1)^0,w,c
  5492   002388  A0D8               	btfss	status,0,c
  5493   00238A  EFC9  F011         	goto	u2551
  5494   00238E  EFCB  F011         	goto	u2550
  5495   002392                     u2551:
  5496   002392  EFD0  F011         	goto	l3462
  5497   002396                     u2550:
  5498   002396  5007               	movf	___awdiv@divisor^0,w,c
  5499   002398  5E05               	subwf	___awdiv@dividend^0,f,c
  5500   00239A  5008               	movf	(___awdiv@divisor+1)^0,w,c
  5501   00239C  5A06               	subwfb	(___awdiv@dividend+1)^0,f,c
  5502   00239E  800B               	bsf	___awdiv@quotient^0,0,c
  5503   0023A0                     l3462:
  5504   0023A0  90D8               	bcf	status,0,c
  5505   0023A2  3208               	rrcf	(___awdiv@divisor+1)^0,f,c
  5506   0023A4  3207               	rrcf	___awdiv@divisor^0,f,c
  5507   0023A6  2E09               	decfsz	___awdiv@counter^0,f,c
  5508   0023A8  EFBD  F011         	goto	l3454
  5509   0023AC                     l3466:
  5510   0023AC  500A               	movf	___awdiv@sign^0,w,c
  5511   0023AE  B4D8               	btfsc	status,2,c
  5512   0023B0  EFDC  F011         	goto	u2561
  5513   0023B4  EFDE  F011         	goto	u2560
  5514   0023B8                     u2561:
  5515   0023B8  EFE2  F011         	goto	l3470
  5516   0023BC                     u2560:
  5517   0023BC  6C0B               	negf	___awdiv@quotient^0,c
  5518   0023BE  1E0C               	comf	(___awdiv@quotient+1)^0,f,c
  5519   0023C0  B0D8               	btfsc	status,0,c
  5520   0023C2  2A0C               	incf	(___awdiv@quotient+1)^0,f,c
  5521   0023C4                     l3470:
  5522   0023C4  C00B  F005         	movff	___awdiv@quotient,?___awdiv
  5523   0023C8  C00C  F006         	movff	___awdiv@quotient+1,?___awdiv+1
  5524   0023CC  0012               	return		;funcret
  5525   0023CE                     __end_of___awdiv:
  5526                           	callstack 0
  5527                           
  5528 ;; *************** function _checkWhite *****************
  5529 ;; Defined at:
  5530 ;;		line 197 in file "color.c"
  5531 ;; Parameters:    Size  Location     Type
  5532 ;;		None
  5533 ;; Auto vars:     Size  Location     Type
  5534 ;;  tmp            25   67[BANK0 ] struct color
  5535 ;; Return value:  Size  Location     Type
  5536 ;;                  1    wreg      void 
  5537 ;; Registers used:
  5538 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5539 ;; Tracked objects:
  5540 ;;		On entry : 0/0
  5541 ;;		On exit  : 0/0
  5542 ;;		Unchanged: 0/0
  5543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5545 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5547 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5548 ;;Total ram usage:       25 bytes
  5549 ;; Hardware stack levels used: 1
  5550 ;; Hardware stack levels required when called: 6
  5551 ;; This function calls:
  5552 ;;		_checkColor
  5553 ;;		_triLED_tog
  5554 ;; This function is called by:
  5555 ;;		_away
  5556 ;; This function uses a non-reentrant model
  5557 ;;
  5558                           
  5559                           	psect	text32
  5560   001F62                     __ptext32:
  5561                           	callstack 0
  5562   001F62                     _checkWhite:
  5563                           	callstack 23
  5564   001F62                     
  5565                           ;color.c: 198:  triLED_tog(1);
  5566   001F62  0E01               	movlw	1
  5567   001F64  EC8A  F015         	call	_triLED_tog
  5568   001F68                     
  5569                           ;color.c: 199:  color tmp = checkColor();
  5570   001F68  EC1F  F007         	call	_checkColor	;wreg free
  5571   001F6C  EE20  F0A3         	lfsr	2,checkWhite@tmp
  5572   001F70  0E18               	movlw	24
  5573   001F72                     u3181:
  5574   001F72  CFEB FFDB          	movff	plusw0,plusw2
  5575   001F76  06E8               	decf	wreg,f,c
  5576   001F78  E2FC               	bc	u3181
  5577   001F7A                     
  5578                           ;color.c: 200:  if(tmp.clear == calibColors[7].clear && tmp.red == calibColors[7].red &&
      +                           tmp.green == calibColors[7].green && tmp.blue == calibColors[7].blue ){
  5579   001F7A  0102               	movlb	2	; () banked
  5580   001F7C  51BC               	movf	(_calibColors+188)& (0+255),w,b
  5581   001F7E  0100               	movlb	0	; () banked
  5582   001F80  19B0               	xorwf	(checkWhite@tmp+13)& (0+255),w,b
  5583   001F82  E113               	bnz	u3191
  5584   001F84  0102               	movlb	2	; () banked
  5585   001F86  51BD               	movf	(_calibColors+189)& (0+255),w,b
  5586   001F88  0100               	movlb	0	; () banked
  5587   001F8A  19B1               	xorwf	(checkWhite@tmp+14)& (0+255),w,b
  5588   001F8C  E10E               	bnz	u3191
  5589   001F8E  0102               	movlb	2	; () banked
  5590   001F90  51BE               	movf	(_calibColors+190)& (0+255),w,b
  5591   001F92  0100               	movlb	0	; () banked
  5592   001F94  19B2               	xorwf	(checkWhite@tmp+15)& (0+255),w,b
  5593   001F96  E109               	bnz	u3191
  5594   001F98  0102               	movlb	2	; () banked
  5595   001F9A  51BF               	movf	(_calibColors+191)& (0+255),w,b
  5596   001F9C  0100               	movlb	0	; () banked
  5597   001F9E  19B3               	xorwf	(checkWhite@tmp+16)& (0+255),w,b
  5598   001FA0  A4D8               	btfss	status,2,c
  5599   001FA2  EFD5  F00F         	goto	u3191
  5600   001FA6  EFD7  F00F         	goto	u3190
  5601   001FAA                     u3191:
  5602   001FAA  EF2C  F010         	goto	l4110
  5603   001FAE                     u3190:
  5604   001FAE                     
  5605                           ; BSR set to: 0
  5606   001FAE  0102               	movlb	2	; () banked
  5607   001FB0  51B0               	movf	(_calibColors+176)& (0+255),w,b
  5608   001FB2  0100               	movlb	0	; () banked
  5609   001FB4  19A4               	xorwf	(checkWhite@tmp+1)& (0+255),w,b
  5610   001FB6  E113               	bnz	u3201
  5611   001FB8  0102               	movlb	2	; () banked
  5612   001FBA  51B1               	movf	(_calibColors+177)& (0+255),w,b
  5613   001FBC  0100               	movlb	0	; () banked
  5614   001FBE  19A5               	xorwf	(checkWhite@tmp+2)& (0+255),w,b
  5615   001FC0  E10E               	bnz	u3201
  5616   001FC2  0102               	movlb	2	; () banked
  5617   001FC4  51B2               	movf	(_calibColors+178)& (0+255),w,b
  5618   001FC6  0100               	movlb	0	; () banked
  5619   001FC8  19A6               	xorwf	(checkWhite@tmp+3)& (0+255),w,b
  5620   001FCA  E109               	bnz	u3201
  5621   001FCC  0102               	movlb	2	; () banked
  5622   001FCE  51B3               	movf	(_calibColors+179)& (0+255),w,b
  5623   001FD0  0100               	movlb	0	; () banked
  5624   001FD2  19A7               	xorwf	(checkWhite@tmp+4)& (0+255),w,b
  5625   001FD4  A4D8               	btfss	status,2,c
  5626   001FD6  EFEF  F00F         	goto	u3201
  5627   001FDA  EFF1  F00F         	goto	u3200
  5628   001FDE                     u3201:
  5629   001FDE  EF2C  F010         	goto	l4110
  5630   001FE2                     u3200:
  5631   001FE2                     
  5632                           ; BSR set to: 0
  5633   001FE2  0102               	movlb	2	; () banked
  5634   001FE4  51B4               	movf	(_calibColors+180)& (0+255),w,b
  5635   001FE6  0100               	movlb	0	; () banked
  5636   001FE8  19A8               	xorwf	(checkWhite@tmp+5)& (0+255),w,b
  5637   001FEA  E113               	bnz	u3211
  5638   001FEC  0102               	movlb	2	; () banked
  5639   001FEE  51B5               	movf	(_calibColors+181)& (0+255),w,b
  5640   001FF0  0100               	movlb	0	; () banked
  5641   001FF2  19A9               	xorwf	(checkWhite@tmp+6)& (0+255),w,b
  5642   001FF4  E10E               	bnz	u3211
  5643   001FF6  0102               	movlb	2	; () banked
  5644   001FF8  51B6               	movf	(_calibColors+182)& (0+255),w,b
  5645   001FFA  0100               	movlb	0	; () banked
  5646   001FFC  19AA               	xorwf	(checkWhite@tmp+7)& (0+255),w,b
  5647   001FFE  E109               	bnz	u3211
  5648   002000  0102               	movlb	2	; () banked
  5649   002002  51B7               	movf	(_calibColors+183)& (0+255),w,b
  5650   002004  0100               	movlb	0	; () banked
  5651   002006  19AB               	xorwf	(checkWhite@tmp+8)& (0+255),w,b
  5652   002008  A4D8               	btfss	status,2,c
  5653   00200A  EF09  F010         	goto	u3211
  5654   00200E  EF0B  F010         	goto	u3210
  5655   002012                     u3211:
  5656   002012  EF2C  F010         	goto	l4110
  5657   002016                     u3210:
  5658   002016                     
  5659                           ; BSR set to: 0
  5660   002016  0102               	movlb	2	; () banked
  5661   002018  51B8               	movf	(_calibColors+184)& (0+255),w,b
  5662   00201A  0100               	movlb	0	; () banked
  5663   00201C  19AC               	xorwf	(checkWhite@tmp+9)& (0+255),w,b
  5664   00201E  E113               	bnz	u3221
  5665   002020  0102               	movlb	2	; () banked
  5666   002022  51B9               	movf	(_calibColors+185)& (0+255),w,b
  5667   002024  0100               	movlb	0	; () banked
  5668   002026  19AD               	xorwf	(checkWhite@tmp+10)& (0+255),w,b
  5669   002028  E10E               	bnz	u3221
  5670   00202A  0102               	movlb	2	; () banked
  5671   00202C  51BA               	movf	(_calibColors+186)& (0+255),w,b
  5672   00202E  0100               	movlb	0	; () banked
  5673   002030  19AE               	xorwf	(checkWhite@tmp+11)& (0+255),w,b
  5674   002032  E109               	bnz	u3221
  5675   002034  0102               	movlb	2	; () banked
  5676   002036  51BB               	movf	(_calibColors+187)& (0+255),w,b
  5677   002038  0100               	movlb	0	; () banked
  5678   00203A  19AF               	xorwf	(checkWhite@tmp+12)& (0+255),w,b
  5679   00203C  A4D8               	btfss	status,2,c
  5680   00203E  EF23  F010         	goto	u3221
  5681   002042  EF25  F010         	goto	u3220
  5682   002046                     u3221:
  5683   002046  EF2C  F010         	goto	l4110
  5684   00204A                     u3220:
  5685   00204A                     
  5686                           ; BSR set to: 0
  5687                           ;color.c: 201:   finished = 1;
  5688   00204A  0E00               	movlw	0
  5689   00204C  0101               	movlb	1	; () banked
  5690   00204E  6FEF               	movwf	(_finished+1)& (0+255),b
  5691   002050  0E01               	movlw	1
  5692   002052  6FEE               	movwf	_finished& (0+255),b
  5693                           
  5694                           ;color.c: 202:  }
  5695   002054  EF31  F010         	goto	l137
  5696   002058                     l4110:
  5697                           
  5698                           ; BSR set to: 0
  5699                           ;color.c: 204:   finished = 0;
  5700   002058  0E00               	movlw	0
  5701   00205A  0101               	movlb	1	; () banked
  5702   00205C  6FEF               	movwf	(_finished+1)& (0+255),b
  5703   00205E  0E00               	movlw	0
  5704   002060  6FEE               	movwf	_finished& (0+255),b
  5705   002062                     l137:
  5706                           
  5707                           ; BSR set to: 1
  5708   002062  0012               	return		;funcret
  5709   002064                     __end_of_checkWhite:
  5710                           	callstack 0
  5711                           
  5712 ;; *************** function _checkColor *****************
  5713 ;; Defined at:
  5714 ;;		line 127 in file "color.c"
  5715 ;; Parameters:    Size  Location     Type
  5716 ;;		None
  5717 ;; Auto vars:     Size  Location     Type
  5718 ;;  colorDiff      16   51[BANK0 ] struct RGBC
  5719 ;;  i               2   33[BANK0 ] int 
  5720 ;;  currColor      25    0[BANK0 ] struct color
  5721 ;;  Vals           16   35[BANK0 ] struct RGBC
  5722 ;;  absDiff         4   29[BANK0 ] long 
  5723 ;;  prevAbsDiff     4   25[BANK0 ] long 
  5724 ;; Return value:  Size  Location     Type
  5725 ;;                  25   32[COMRAM] struct color
  5726 ;; Registers used:
  5727 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5728 ;; Tracked objects:
  5729 ;;		On entry : 0/0
  5730 ;;		On exit  : 0/0
  5731 ;;		Unchanged: 0/0
  5732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5733 ;;      Params:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5734 ;;      Locals:         0      67       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5735 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5736 ;;      Totals:        33      67       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5737 ;;Total ram usage:      100 bytes
  5738 ;; Hardware stack levels used: 1
  5739 ;; Hardware stack levels required when called: 5
  5740 ;; This function calls:
  5741 ;;		___aldiv
  5742 ;;		___wmul
  5743 ;;		_abs
  5744 ;;		_color_read_all
  5745 ;;		_triLED_tog
  5746 ;; This function is called by:
  5747 ;;		_checkWhite
  5748 ;;		_color2instruction
  5749 ;;		_checkWall
  5750 ;; This function uses a non-reentrant model
  5751 ;;
  5752                           
  5753                           	psect	text33
  5754   000E3E                     __ptext33:
  5755                           	callstack 0
  5756   000E3E                     _checkColor:
  5757                           	callstack 23
  5758   000E3E                     
  5759                           ;color.c: 129:     triLED_tog(1);
  5760   000E3E  0E01               	movlw	1
  5761   000E40  EC8A  F015         	call	_triLED_tog
  5762   000E44                     
  5763                           ;color.c: 131:  RGBC Vals;;color.c: 132:  color currColor;;color.c: 134:  color_read_all
      +                          (&Vals);
  5764   000E44  0E83               	movlw	low checkColor@Vals
  5765   000E46  6E09               	movwf	color_read_all@readVals^0,c
  5766   000E48  ECF4  F009         	call	_color_read_all	;wreg free
  5767   000E4C                     
  5768                           ;color.c: 137:  long absDiff;;color.c: 138:  long prevAbsDiff = 8000000;
  5769   000E4C  0E00               	movlw	0
  5770   000E4E  0100               	movlb	0	; () banked
  5771   000E50  6F79               	movwf	checkColor@prevAbsDiff& (0+255),b
  5772   000E52  0E12               	movlw	18
  5773   000E54  6F7A               	movwf	(checkColor@prevAbsDiff+1)& (0+255),b
  5774   000E56  0E7A               	movlw	122
  5775   000E58  6F7B               	movwf	(checkColor@prevAbsDiff+2)& (0+255),b
  5776   000E5A  0E00               	movlw	0
  5777   000E5C  6F7C               	movwf	(checkColor@prevAbsDiff+3)& (0+255),b
  5778   000E5E                     
  5779                           ; BSR set to: 0
  5780                           ;color.c: 140:  for(int i =0;i<9;i++){
  5781   000E5E  0E00               	movlw	0
  5782   000E60  6F82               	movwf	(checkColor@i+1)& (0+255),b
  5783   000E62  0E00               	movlw	0
  5784   000E64  6F81               	movwf	checkColor@i& (0+255),b
  5785   000E66                     l3976:
  5786                           
  5787                           ; BSR set to: 0
  5788                           ;color.c: 142:   RGBC colorDiff;;color.c: 144:   colorDiff.red = ((Vals.red) - calibColo
      +                          rs[i].red)/1000;
  5789   000E66  C081  F005         	movff	checkColor@i,___wmul@multiplier
  5790   000E6A  C082  F006         	movff	checkColor@i+1,___wmul@multiplier+1
  5791   000E6E  0E00               	movlw	0
  5792   000E70  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  5793   000E72  0E19               	movlw	25
  5794   000E74  6E07               	movwf	___wmul@multiplicand^0,c
  5795   000E76  ECB2  F015         	call	___wmul	;wreg free
  5796   000E7A  0E01               	movlw	low (_calibColors+1)
  5797   000E7C  2405               	addwf	?___wmul^0,w,c
  5798   000E7E  6ED9               	movwf	fsr2l,c
  5799   000E80  0E02               	movlw	high (_calibColors+1)
  5800   000E82  2006               	addwfc	(?___wmul+1)^0,w,c
  5801   000E84  6EDA               	movwf	fsr2h,c
  5802   000E86  CFDE F03A          	movff	postinc2,??_checkColor
  5803   000E8A  CFDE F03B          	movff	postinc2,??_checkColor+1
  5804   000E8E  CFDE F03C          	movff	postinc2,??_checkColor+2
  5805   000E92  CFDE F03D          	movff	postinc2,??_checkColor+3
  5806   000E96  503A               	movf	??_checkColor^0,w,c
  5807   000E98  0100               	movlb	0	; () banked
  5808   000E9A  5D83               	subwf	checkColor@Vals& (0+255),w,b
  5809   000E9C  6E0B               	movwf	___aldiv@dividend^0,c
  5810   000E9E  503B               	movf	(??_checkColor+1)^0,w,c
  5811   000EA0  5984               	subwfb	(checkColor@Vals+1)& (0+255),w,b
  5812   000EA2  6E0C               	movwf	(___aldiv@dividend+1)^0,c
  5813   000EA4  503C               	movf	(??_checkColor+2)^0,w,c
  5814   000EA6  5985               	subwfb	(checkColor@Vals+2)& (0+255),w,b
  5815   000EA8  6E0D               	movwf	(___aldiv@dividend+2)^0,c
  5816   000EAA  503D               	movf	(??_checkColor+3)^0,w,c
  5817   000EAC  5986               	subwfb	(checkColor@Vals+3)& (0+255),w,b
  5818   000EAE  6E0E               	movwf	(___aldiv@dividend+3)^0,c
  5819   000EB0  0EE8               	movlw	232
  5820   000EB2  6E0F               	movwf	___aldiv@divisor^0,c
  5821   000EB4  0E03               	movlw	3
  5822   000EB6  6E10               	movwf	(___aldiv@divisor+1)^0,c
  5823   000EB8  0E00               	movlw	0
  5824   000EBA  6E11               	movwf	(___aldiv@divisor+2)^0,c
  5825   000EBC  0E00               	movlw	0
  5826   000EBE  6E12               	movwf	(___aldiv@divisor+3)^0,c
  5827   000EC0  EC2B  F00F         	call	___aldiv	;wreg free
  5828   000EC4  C00B  F093         	movff	?___aldiv,checkColor@colorDiff
  5829   000EC8  C00C  F094         	movff	?___aldiv+1,checkColor@colorDiff+1
  5830   000ECC  C00D  F095         	movff	?___aldiv+2,checkColor@colorDiff+2
  5831   000ED0  C00E  F096         	movff	?___aldiv+3,checkColor@colorDiff+3
  5832                           
  5833                           ;color.c: 145:   colorDiff.green = ((Vals.green) - calibColors[i].green )/1000;
  5834   000ED4  C081  F005         	movff	checkColor@i,___wmul@multiplier
  5835   000ED8  C082  F006         	movff	checkColor@i+1,___wmul@multiplier+1
  5836   000EDC  0E00               	movlw	0
  5837   000EDE  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  5838   000EE0  0E19               	movlw	25
  5839   000EE2  6E07               	movwf	___wmul@multiplicand^0,c
  5840   000EE4  ECB2  F015         	call	___wmul	;wreg free
  5841   000EE8  0E05               	movlw	low (_calibColors+5)
  5842   000EEA  2405               	addwf	?___wmul^0,w,c
  5843   000EEC  6ED9               	movwf	fsr2l,c
  5844   000EEE  0E02               	movlw	high (_calibColors+5)
  5845   000EF0  2006               	addwfc	(?___wmul+1)^0,w,c
  5846   000EF2  6EDA               	movwf	fsr2h,c
  5847   000EF4  CFDE F03A          	movff	postinc2,??_checkColor
  5848   000EF8  CFDE F03B          	movff	postinc2,??_checkColor+1
  5849   000EFC  CFDE F03C          	movff	postinc2,??_checkColor+2
  5850   000F00  CFDE F03D          	movff	postinc2,??_checkColor+3
  5851   000F04  503A               	movf	??_checkColor^0,w,c
  5852   000F06  0100               	movlb	0	; () banked
  5853   000F08  5D87               	subwf	(checkColor@Vals+4)& (0+255),w,b
  5854   000F0A  6E0B               	movwf	___aldiv@dividend^0,c
  5855   000F0C  503B               	movf	(??_checkColor+1)^0,w,c
  5856   000F0E  5988               	subwfb	(checkColor@Vals+5)& (0+255),w,b
  5857   000F10  6E0C               	movwf	(___aldiv@dividend+1)^0,c
  5858   000F12  503C               	movf	(??_checkColor+2)^0,w,c
  5859   000F14  5989               	subwfb	(checkColor@Vals+6)& (0+255),w,b
  5860   000F16  6E0D               	movwf	(___aldiv@dividend+2)^0,c
  5861   000F18  503D               	movf	(??_checkColor+3)^0,w,c
  5862   000F1A  598A               	subwfb	(checkColor@Vals+7)& (0+255),w,b
  5863   000F1C  6E0E               	movwf	(___aldiv@dividend+3)^0,c
  5864   000F1E  0EE8               	movlw	232
  5865   000F20  6E0F               	movwf	___aldiv@divisor^0,c
  5866   000F22  0E03               	movlw	3
  5867   000F24  6E10               	movwf	(___aldiv@divisor+1)^0,c
  5868   000F26  0E00               	movlw	0
  5869   000F28  6E11               	movwf	(___aldiv@divisor+2)^0,c
  5870   000F2A  0E00               	movlw	0
  5871   000F2C  6E12               	movwf	(___aldiv@divisor+3)^0,c
  5872   000F2E  EC2B  F00F         	call	___aldiv	;wreg free
  5873   000F32  C00B  F097         	movff	?___aldiv,checkColor@colorDiff+4
  5874   000F36  C00C  F098         	movff	?___aldiv+1,checkColor@colorDiff+5
  5875   000F3A  C00D  F099         	movff	?___aldiv+2,checkColor@colorDiff+6
  5876   000F3E  C00E  F09A         	movff	?___aldiv+3,checkColor@colorDiff+7
  5877                           
  5878                           ;color.c: 146:   colorDiff.blue = ((Vals.blue) - calibColors[i].blue )/1000;
  5879   000F42  C081  F005         	movff	checkColor@i,___wmul@multiplier
  5880   000F46  C082  F006         	movff	checkColor@i+1,___wmul@multiplier+1
  5881   000F4A  0E00               	movlw	0
  5882   000F4C  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  5883   000F4E  0E19               	movlw	25
  5884   000F50  6E07               	movwf	___wmul@multiplicand^0,c
  5885   000F52  ECB2  F015         	call	___wmul	;wreg free
  5886   000F56  0E09               	movlw	low (_calibColors+9)
  5887   000F58  2405               	addwf	?___wmul^0,w,c
  5888   000F5A  6ED9               	movwf	fsr2l,c
  5889   000F5C  0E02               	movlw	high (_calibColors+9)
  5890   000F5E  2006               	addwfc	(?___wmul+1)^0,w,c
  5891   000F60  6EDA               	movwf	fsr2h,c
  5892   000F62  CFDE F03A          	movff	postinc2,??_checkColor
  5893   000F66  CFDE F03B          	movff	postinc2,??_checkColor+1
  5894   000F6A  CFDE F03C          	movff	postinc2,??_checkColor+2
  5895   000F6E  CFDE F03D          	movff	postinc2,??_checkColor+3
  5896   000F72  503A               	movf	??_checkColor^0,w,c
  5897   000F74  0100               	movlb	0	; () banked
  5898   000F76  5D8B               	subwf	(checkColor@Vals+8)& (0+255),w,b
  5899   000F78  6E0B               	movwf	___aldiv@dividend^0,c
  5900   000F7A  503B               	movf	(??_checkColor+1)^0,w,c
  5901   000F7C  598C               	subwfb	(checkColor@Vals+9)& (0+255),w,b
  5902   000F7E  6E0C               	movwf	(___aldiv@dividend+1)^0,c
  5903   000F80  503C               	movf	(??_checkColor+2)^0,w,c
  5904   000F82  598D               	subwfb	(checkColor@Vals+10)& (0+255),w,b
  5905   000F84  6E0D               	movwf	(___aldiv@dividend+2)^0,c
  5906   000F86  503D               	movf	(??_checkColor+3)^0,w,c
  5907   000F88  598E               	subwfb	(checkColor@Vals+11)& (0+255),w,b
  5908   000F8A  6E0E               	movwf	(___aldiv@dividend+3)^0,c
  5909   000F8C  0EE8               	movlw	232
  5910   000F8E  6E0F               	movwf	___aldiv@divisor^0,c
  5911   000F90  0E03               	movlw	3
  5912   000F92  6E10               	movwf	(___aldiv@divisor+1)^0,c
  5913   000F94  0E00               	movlw	0
  5914   000F96  6E11               	movwf	(___aldiv@divisor+2)^0,c
  5915   000F98  0E00               	movlw	0
  5916   000F9A  6E12               	movwf	(___aldiv@divisor+3)^0,c
  5917   000F9C  EC2B  F00F         	call	___aldiv	;wreg free
  5918   000FA0  C00B  F09B         	movff	?___aldiv,checkColor@colorDiff+8
  5919   000FA4  C00C  F09C         	movff	?___aldiv+1,checkColor@colorDiff+9
  5920   000FA8  C00D  F09D         	movff	?___aldiv+2,checkColor@colorDiff+10
  5921   000FAC  C00E  F09E         	movff	?___aldiv+3,checkColor@colorDiff+11
  5922                           
  5923                           ;color.c: 147:   colorDiff.clear = ((Vals.clear) - calibColors[i].clear )/1000 ;
  5924   000FB0  C081  F005         	movff	checkColor@i,___wmul@multiplier
  5925   000FB4  C082  F006         	movff	checkColor@i+1,___wmul@multiplier+1
  5926   000FB8  0E00               	movlw	0
  5927   000FBA  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  5928   000FBC  0E19               	movlw	25
  5929   000FBE  6E07               	movwf	___wmul@multiplicand^0,c
  5930   000FC0  ECB2  F015         	call	___wmul	;wreg free
  5931   000FC4  0E0D               	movlw	low (_calibColors+13)
  5932   000FC6  2405               	addwf	?___wmul^0,w,c
  5933   000FC8  6ED9               	movwf	fsr2l,c
  5934   000FCA  0E02               	movlw	high (_calibColors+13)
  5935   000FCC  2006               	addwfc	(?___wmul+1)^0,w,c
  5936   000FCE  6EDA               	movwf	fsr2h,c
  5937   000FD0  CFDE F03A          	movff	postinc2,??_checkColor
  5938   000FD4  CFDE F03B          	movff	postinc2,??_checkColor+1
  5939   000FD8  CFDE F03C          	movff	postinc2,??_checkColor+2
  5940   000FDC  CFDE F03D          	movff	postinc2,??_checkColor+3
  5941   000FE0  503A               	movf	??_checkColor^0,w,c
  5942   000FE2  0100               	movlb	0	; () banked
  5943   000FE4  5D8F               	subwf	(checkColor@Vals+12)& (0+255),w,b
  5944   000FE6  6E0B               	movwf	___aldiv@dividend^0,c
  5945   000FE8  503B               	movf	(??_checkColor+1)^0,w,c
  5946   000FEA  5990               	subwfb	(checkColor@Vals+13)& (0+255),w,b
  5947   000FEC  6E0C               	movwf	(___aldiv@dividend+1)^0,c
  5948   000FEE  503C               	movf	(??_checkColor+2)^0,w,c
  5949   000FF0  5991               	subwfb	(checkColor@Vals+14)& (0+255),w,b
  5950   000FF2  6E0D               	movwf	(___aldiv@dividend+2)^0,c
  5951   000FF4  503D               	movf	(??_checkColor+3)^0,w,c
  5952   000FF6  5992               	subwfb	(checkColor@Vals+15)& (0+255),w,b
  5953   000FF8  6E0E               	movwf	(___aldiv@dividend+3)^0,c
  5954   000FFA  0EE8               	movlw	232
  5955   000FFC  6E0F               	movwf	___aldiv@divisor^0,c
  5956   000FFE  0E03               	movlw	3
  5957   001000  6E10               	movwf	(___aldiv@divisor+1)^0,c
  5958   001002  0E00               	movlw	0
  5959   001004  6E11               	movwf	(___aldiv@divisor+2)^0,c
  5960   001006  0E00               	movlw	0
  5961   001008  6E12               	movwf	(___aldiv@divisor+3)^0,c
  5962   00100A  EC2B  F00F         	call	___aldiv	;wreg free
  5963   00100E  C00B  F09F         	movff	?___aldiv,checkColor@colorDiff+12
  5964   001012  C00C  F0A0         	movff	?___aldiv+1,checkColor@colorDiff+13
  5965   001016  C00D  F0A1         	movff	?___aldiv+2,checkColor@colorDiff+14
  5966   00101A  C00E  F0A2         	movff	?___aldiv+3,checkColor@colorDiff+15
  5967   00101E                     
  5968                           ;color.c: 150:   absDiff = abs(colorDiff.red) + abs(colorDiff.green) + abs(colorDiff.blu
      +                          e) + abs(colorDiff.clear);
  5969   00101E  C093  F00F         	movff	checkColor@colorDiff,abs@a
  5970   001022  C094  F010         	movff	checkColor@colorDiff+1,abs@a+1
  5971   001026  EC2E  F015         	call	_abs	;wreg free
  5972   00102A  C00F  F03A         	movff	?_abs,??_checkColor
  5973   00102E  C010  F03B         	movff	?_abs+1,??_checkColor+1
  5974   001032  C097  F00F         	movff	checkColor@colorDiff+4,abs@a
  5975   001036  C098  F010         	movff	checkColor@colorDiff+5,abs@a+1
  5976   00103A  EC2E  F015         	call	_abs	;wreg free
  5977   00103E  500F               	movf	?_abs^0,w,c
  5978   001040  243A               	addwf	??_checkColor^0,w,c
  5979   001042  6E3C               	movwf	(??_checkColor+2)^0,c
  5980   001044  5010               	movf	(?_abs+1)^0,w,c
  5981   001046  203B               	addwfc	(??_checkColor+1)^0,w,c
  5982   001048  6E3D               	movwf	(??_checkColor+3)^0,c
  5983   00104A  C09B  F00F         	movff	checkColor@colorDiff+8,abs@a
  5984   00104E  C09C  F010         	movff	checkColor@colorDiff+9,abs@a+1
  5985   001052  EC2E  F015         	call	_abs	;wreg free
  5986   001056  500F               	movf	?_abs^0,w,c
  5987   001058  243C               	addwf	(??_checkColor+2)^0,w,c
  5988   00105A  6E3E               	movwf	(??_checkColor+4)^0,c
  5989   00105C  5010               	movf	(?_abs+1)^0,w,c
  5990   00105E  203D               	addwfc	(??_checkColor+3)^0,w,c
  5991   001060  6E3F               	movwf	(??_checkColor+5)^0,c
  5992   001062  C09F  F00F         	movff	checkColor@colorDiff+12,abs@a
  5993   001066  C0A0  F010         	movff	checkColor@colorDiff+13,abs@a+1
  5994   00106A  EC2E  F015         	call	_abs	;wreg free
  5995   00106E  500F               	movf	?_abs^0,w,c
  5996   001070  243E               	addwf	(??_checkColor+4)^0,w,c
  5997   001072  6E40               	movwf	(??_checkColor+6)^0,c
  5998   001074  5010               	movf	(?_abs+1)^0,w,c
  5999   001076  203F               	addwfc	(??_checkColor+5)^0,w,c
  6000   001078  6E41               	movwf	(??_checkColor+7)^0,c
  6001   00107A  C040  F07D         	movff	??_checkColor+6,checkColor@absDiff
  6002   00107E  C041  F07E         	movff	??_checkColor+7,checkColor@absDiff+1
  6003   001082  0100               	movlb	0	; () banked
  6004   001084  0E00               	movlw	0
  6005   001086  BF7E               	btfsc	(checkColor@absDiff+1)& (0+255),7,b
  6006   001088  0EFF               	movlw	-1
  6007   00108A  6F7F               	movwf	(checkColor@absDiff+2)& (0+255),b
  6008   00108C  6F80               	movwf	(checkColor@absDiff+3)& (0+255),b
  6009   00108E                     
  6010                           ; BSR set to: 0
  6011                           ;color.c: 153:   if(absDiff < prevAbsDiff){
  6012   00108E  5179               	movf	checkColor@prevAbsDiff& (0+255),w,b
  6013   001090  5D7D               	subwf	checkColor@absDiff& (0+255),w,b
  6014   001092  517A               	movf	(checkColor@prevAbsDiff+1)& (0+255),w,b
  6015   001094  597E               	subwfb	(checkColor@absDiff+1)& (0+255),w,b
  6016   001096  517B               	movf	(checkColor@prevAbsDiff+2)& (0+255),w,b
  6017   001098  597F               	subwfb	(checkColor@absDiff+2)& (0+255),w,b
  6018   00109A  5180               	movf	(checkColor@absDiff+3)& (0+255),w,b
  6019   00109C  0A80               	xorlw	128
  6020   00109E  6E3A               	movwf	??_checkColor^0,c
  6021   0010A0  517C               	movf	(checkColor@prevAbsDiff+3)& (0+255),w,b
  6022   0010A2  0A80               	xorlw	128
  6023   0010A4  583A               	subwfb	??_checkColor^0,w,c
  6024   0010A6  B0D8               	btfsc	status,0,c
  6025   0010A8  EF58  F008         	goto	u3111
  6026   0010AC  EF5A  F008         	goto	u3110
  6027   0010B0                     u3111:
  6028   0010B0  EF79  F008         	goto	l3986
  6029   0010B4                     u3110:
  6030   0010B4                     
  6031                           ; BSR set to: 0
  6032                           ;color.c: 156:    prevAbsDiff = absDiff;
  6033   0010B4  C07D  F079         	movff	checkColor@absDiff,checkColor@prevAbsDiff
  6034   0010B8  C07E  F07A         	movff	checkColor@absDiff+1,checkColor@prevAbsDiff+1
  6035   0010BC  C07F  F07B         	movff	checkColor@absDiff+2,checkColor@prevAbsDiff+2
  6036   0010C0  C080  F07C         	movff	checkColor@absDiff+3,checkColor@prevAbsDiff+3
  6037   0010C4                     
  6038                           ; BSR set to: 0
  6039                           ;color.c: 157:    currColor = calibColors[i];
  6040   0010C4  C081  F005         	movff	checkColor@i,___wmul@multiplier
  6041   0010C8  C082  F006         	movff	checkColor@i+1,___wmul@multiplier+1
  6042   0010CC  0E00               	movlw	0
  6043   0010CE  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  6044   0010D0  0E19               	movlw	25
  6045   0010D2  6E07               	movwf	___wmul@multiplicand^0,c
  6046   0010D4  ECB2  F015         	call	___wmul	;wreg free
  6047   0010D8  0E00               	movlw	low _calibColors
  6048   0010DA  2405               	addwf	?___wmul^0,w,c
  6049   0010DC  6ED9               	movwf	fsr2l,c
  6050   0010DE  0E02               	movlw	high _calibColors
  6051   0010E0  2006               	addwfc	(?___wmul+1)^0,w,c
  6052   0010E2  6EDA               	movwf	fsr2h,c
  6053   0010E4  EE10  F060         	lfsr	1,checkColor@currColor
  6054   0010E8  0E18               	movlw	24
  6055   0010EA                     u3121:
  6056   0010EA  CFDB FFE3          	movff	plusw2,plusw1
  6057   0010EE  06E8               	decf	wreg,f,c
  6058   0010F0  E2FC               	bc	u3121
  6059   0010F2                     l3986:
  6060                           
  6061                           ;color.c: 159:  }
  6062   0010F2  0100               	movlb	0	; () banked
  6063   0010F4  4B81               	infsnz	checkColor@i& (0+255),f,b
  6064   0010F6  2B82               	incf	(checkColor@i+1)& (0+255),f,b
  6065   0010F8                     
  6066                           ; BSR set to: 0
  6067   0010F8  BF82               	btfsc	(checkColor@i+1)& (0+255),7,b
  6068   0010FA  EF88  F008         	goto	u3131
  6069   0010FE  5182               	movf	(checkColor@i+1)& (0+255),w,b
  6070   001100  E109               	bnz	u3130
  6071   001102  0E09               	movlw	9
  6072   001104  5D81               	subwf	checkColor@i& (0+255),w,b
  6073   001106  A0D8               	btfss	status,0,c
  6074   001108  EF88  F008         	goto	u3131
  6075   00110C  EF8A  F008         	goto	u3130
  6076   001110                     u3131:
  6077   001110  EF33  F007         	goto	l3976
  6078   001114                     u3130:
  6079   001114                     
  6080                           ; BSR set to: 0
  6081                           ;color.c: 161:  return currColor;
  6082   001114  EE20  F060         	lfsr	2,checkColor@currColor
  6083   001118  EE00  F021         	lfsr	0,?_checkColor
  6084   00111C  0E18               	movlw	24
  6085   00111E                     u3141:
  6086   00111E  CFDB FFEB          	movff	plusw2,plusw0
  6087   001122  06E8               	decf	wreg,f,c
  6088   001124  E2FC               	bc	u3141
  6089   001126                     
  6090                           ; BSR set to: 0
  6091   001126  0012               	return		;funcret
  6092   001128                     __end_of_checkColor:
  6093                           	callstack 0
  6094                           
  6095 ;; *************** function _triLED_tog *****************
  6096 ;; Defined at:
  6097 ;;		line 28 in file "color.c"
  6098 ;; Parameters:    Size  Location     Type
  6099 ;;  state           1    wreg     unsigned char 
  6100 ;; Auto vars:     Size  Location     Type
  6101 ;;  state           1    4[COMRAM] unsigned char 
  6102 ;; Return value:  Size  Location     Type
  6103 ;;                  1    wreg      void 
  6104 ;; Registers used:
  6105 ;;		wreg
  6106 ;; Tracked objects:
  6107 ;;		On entry : 0/0
  6108 ;;		On exit  : 0/0
  6109 ;;		Unchanged: 0/0
  6110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6112 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6114 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6115 ;;Total ram usage:        1 bytes
  6116 ;; Hardware stack levels used: 1
  6117 ;; Hardware stack levels required when called: 2
  6118 ;; This function calls:
  6119 ;;		Nothing
  6120 ;; This function is called by:
  6121 ;;		_checkColor
  6122 ;;		_checkIncidence
  6123 ;;		_checkWhite
  6124 ;;		_color2instruction
  6125 ;;		_calibCards
  6126 ;; This function uses a non-reentrant model
  6127 ;;
  6128                           
  6129                           	psect	text34
  6130   002B14                     __ptext34:
  6131                           	callstack 0
  6132   002B14                     _triLED_tog:
  6133                           	callstack 26
  6134                           
  6135                           ; BSR set to: 0
  6136                           ;incstack = 0
  6137                           ;triLED_tog@state stored from wreg
  6138   002B14  6E05               	movwf	triLED_tog@state^0,c
  6139   002B16                     
  6140                           ;color.c: 30:     TRISGbits.TRISG0 = 0;
  6141   002B16  9087               	bcf	135,0,c	;volatile
  6142                           
  6143                           ;color.c: 31:     TRISEbits.TRISE7 = 0;
  6144   002B18  9E85               	bcf	133,7,c	;volatile
  6145                           
  6146                           ;color.c: 32:     TRISAbits.TRISA3 = 0;
  6147   002B1A  9681               	bcf	129,3,c	;volatile
  6148   002B1C                     
  6149                           ;color.c: 34:     LATGbits.LATG0 = state;
  6150   002B1C  B005               	btfsc	triLED_tog@state^0,0,c
  6151   002B1E  D002               	bra	u3025
  6152   002B20  907F               	bcf	127,0,c	;volatile
  6153   002B22  D001               	bra	u3026
  6154   002B24                     u3025:
  6155   002B24  807F               	bsf	127,0,c	;volatile
  6156   002B26                     u3026:
  6157                           
  6158                           ;color.c: 35:     LATEbits.LATE7 = state;
  6159   002B26  B005               	btfsc	triLED_tog@state^0,0,c
  6160   002B28  D002               	bra	u3035
  6161   002B2A  9E7D               	bcf	125,7,c	;volatile
  6162   002B2C  D001               	bra	u3036
  6163   002B2E                     u3035:
  6164   002B2E  8E7D               	bsf	125,7,c	;volatile
  6165   002B30                     u3036:
  6166                           
  6167                           ;color.c: 36:     LATAbits.LATA3 = state;
  6168   002B30  B005               	btfsc	triLED_tog@state^0,0,c
  6169   002B32  D002               	bra	u3045
  6170   002B34  9679               	bcf	121,3,c	;volatile
  6171   002B36  D001               	bra	u3046
  6172   002B38                     u3045:
  6173   002B38  8679               	bsf	121,3,c	;volatile
  6174   002B3A                     u3046:
  6175   002B3A  0012               	return		;funcret
  6176   002B3C                     __end_of_triLED_tog:
  6177                           	callstack 0
  6178                           
  6179 ;; *************** function _color_read_all *****************
  6180 ;; Defined at:
  6181 ;;		line 47 in file "color.c"
  6182 ;; Parameters:    Size  Location     Type
  6183 ;;  readVals        1    8[COMRAM] PTR struct RGBC
  6184 ;;		 -> checkIncidence@tmp(16), checkColor@Vals(16), calibCards@readVals(16), 
  6185 ;; Auto vars:     Size  Location     Type
  6186 ;;  tmp            16   16[COMRAM] struct RGBC
  6187 ;; Return value:  Size  Location     Type
  6188 ;;                  1    wreg      void 
  6189 ;; Registers used:
  6190 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6191 ;; Tracked objects:
  6192 ;;		On entry : 0/0
  6193 ;;		On exit  : 0/0
  6194 ;;		Unchanged: 0/0
  6195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6196 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6197 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6198 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6199 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6200 ;;Total ram usage:       24 bytes
  6201 ;; Hardware stack levels used: 1
  6202 ;; Hardware stack levels required when called: 4
  6203 ;; This function calls:
  6204 ;;		_I2C_2_Master_Read
  6205 ;;		_I2C_2_Master_RepStart
  6206 ;;		_I2C_2_Master_Start
  6207 ;;		_I2C_2_Master_Stop
  6208 ;;		_I2C_2_Master_Write
  6209 ;; This function is called by:
  6210 ;;		_checkColor
  6211 ;;		_checkIncidence
  6212 ;;		_calibCards
  6213 ;; This function uses a non-reentrant model
  6214 ;;
  6215                           
  6216                           	psect	text35
  6217   0013E8                     __ptext35:
  6218                           	callstack 0
  6219   0013E8                     _color_read_all:
  6220                           	callstack 23
  6221   0013E8                     
  6222                           ;color.c: 50:  RGBC tmp;;color.c: 52:  I2C_2_Master_Start();
  6223   0013E8  EC1C  F016         	call	_I2C_2_Master_Start	;wreg free
  6224                           
  6225                           ;color.c: 53:  I2C_2_Master_Write(0x52 | 0x00);
  6226   0013EC  0E52               	movlw	82
  6227   0013EE  EC0B  F016         	call	_I2C_2_Master_Write
  6228                           
  6229                           ;color.c: 54:  I2C_2_Master_Write(0xA0 | 0x14);
  6230   0013F2  0EB4               	movlw	180
  6231   0013F4  EC0B  F016         	call	_I2C_2_Master_Write
  6232                           
  6233                           ;color.c: 55:  I2C_2_Master_RepStart();
  6234   0013F8  EC21  F016         	call	_I2C_2_Master_RepStart	;wreg free
  6235                           
  6236                           ;color.c: 56:  I2C_2_Master_Write(0x52 | 0x01);
  6237   0013FC  0E53               	movlw	83
  6238   0013FE  EC0B  F016         	call	_I2C_2_Master_Write
  6239                           
  6240                           ;color.c: 58:  tmp.red=I2C_2_Master_Read(1);
  6241   001402  0E01               	movlw	1
  6242   001404  ECA5  F014         	call	_I2C_2_Master_Read
  6243   001408  6E0A               	movwf	??_color_read_all^0,c
  6244   00140A  500A               	movf	??_color_read_all^0,w,c
  6245   00140C  6E11               	movwf	color_read_all@tmp^0,c
  6246   00140E  6A12               	clrf	(color_read_all@tmp+1)^0,c
  6247   001410  6A13               	clrf	(color_read_all@tmp+2)^0,c
  6248   001412  6A14               	clrf	(color_read_all@tmp+3)^0,c
  6249                           
  6250                           ;color.c: 59:  tmp.red=tmp.red | (I2C_2_Master_Read(1)<<8);
  6251   001414  0E01               	movlw	1
  6252   001416  ECA5  F014         	call	_I2C_2_Master_Read
  6253   00141A  6E0A               	movwf	??_color_read_all^0,c
  6254   00141C  500A               	movf	??_color_read_all^0,w,c
  6255   00141E  6E0C               	movwf	(??_color_read_all+2)^0,c
  6256   001420  6A0B               	clrf	(??_color_read_all+1)^0,c
  6257   001422  C00B  F00D         	movff	??_color_read_all+1,??_color_read_all+3
  6258   001426  C00C  F00E         	movff	??_color_read_all+2,??_color_read_all+4
  6259   00142A  0E00               	movlw	0
  6260   00142C  BE0E               	btfsc	(??_color_read_all+4)^0,7,c
  6261   00142E  0EFF               	movlw	255
  6262   001430  6E0F               	movwf	(??_color_read_all+5)^0,c
  6263   001432  6E10               	movwf	(??_color_read_all+6)^0,c
  6264   001434  5011               	movf	color_read_all@tmp^0,w,c
  6265   001436  100D               	iorwf	(??_color_read_all+3)^0,w,c
  6266   001438  6E11               	movwf	color_read_all@tmp^0,c
  6267   00143A  5012               	movf	(color_read_all@tmp+1)^0,w,c
  6268   00143C  100E               	iorwf	(??_color_read_all+4)^0,w,c
  6269   00143E  6E12               	movwf	(color_read_all@tmp+1)^0,c
  6270   001440  5013               	movf	(color_read_all@tmp+2)^0,w,c
  6271   001442  100F               	iorwf	(??_color_read_all+5)^0,w,c
  6272   001444  6E13               	movwf	(color_read_all@tmp+2)^0,c
  6273   001446  5014               	movf	(color_read_all@tmp+3)^0,w,c
  6274   001448  1010               	iorwf	(??_color_read_all+6)^0,w,c
  6275   00144A  6E14               	movwf	(color_read_all@tmp+3)^0,c
  6276                           
  6277                           ;color.c: 60:  tmp.green=I2C_2_Master_Read(1);
  6278   00144C  0E01               	movlw	1
  6279   00144E  ECA5  F014         	call	_I2C_2_Master_Read
  6280   001452  6E0A               	movwf	??_color_read_all^0,c
  6281   001454  500A               	movf	??_color_read_all^0,w,c
  6282   001456  6E15               	movwf	(color_read_all@tmp+4)^0,c
  6283   001458  6A16               	clrf	(color_read_all@tmp+5)^0,c
  6284   00145A  6A17               	clrf	(color_read_all@tmp+6)^0,c
  6285   00145C  6A18               	clrf	(color_read_all@tmp+7)^0,c
  6286                           
  6287                           ;color.c: 61:  tmp.green=tmp.green | (I2C_2_Master_Read(1)<<8);
  6288   00145E  0E01               	movlw	1
  6289   001460  ECA5  F014         	call	_I2C_2_Master_Read
  6290   001464  6E0A               	movwf	??_color_read_all^0,c
  6291   001466  500A               	movf	??_color_read_all^0,w,c
  6292   001468  6E0C               	movwf	(??_color_read_all+2)^0,c
  6293   00146A  6A0B               	clrf	(??_color_read_all+1)^0,c
  6294   00146C  C00B  F00D         	movff	??_color_read_all+1,??_color_read_all+3
  6295   001470  C00C  F00E         	movff	??_color_read_all+2,??_color_read_all+4
  6296   001474  0E00               	movlw	0
  6297   001476  BE0E               	btfsc	(??_color_read_all+4)^0,7,c
  6298   001478  0EFF               	movlw	255
  6299   00147A  6E0F               	movwf	(??_color_read_all+5)^0,c
  6300   00147C  6E10               	movwf	(??_color_read_all+6)^0,c
  6301   00147E  5015               	movf	(color_read_all@tmp+4)^0,w,c
  6302   001480  100D               	iorwf	(??_color_read_all+3)^0,w,c
  6303   001482  6E15               	movwf	(color_read_all@tmp+4)^0,c
  6304   001484  5016               	movf	(color_read_all@tmp+5)^0,w,c
  6305   001486  100E               	iorwf	(??_color_read_all+4)^0,w,c
  6306   001488  6E16               	movwf	(color_read_all@tmp+5)^0,c
  6307   00148A  5017               	movf	(color_read_all@tmp+6)^0,w,c
  6308   00148C  100F               	iorwf	(??_color_read_all+5)^0,w,c
  6309   00148E  6E17               	movwf	(color_read_all@tmp+6)^0,c
  6310   001490  5018               	movf	(color_read_all@tmp+7)^0,w,c
  6311   001492  1010               	iorwf	(??_color_read_all+6)^0,w,c
  6312   001494  6E18               	movwf	(color_read_all@tmp+7)^0,c
  6313                           
  6314                           ;color.c: 62:  tmp.blue=I2C_2_Master_Read(1);
  6315   001496  0E01               	movlw	1
  6316   001498  ECA5  F014         	call	_I2C_2_Master_Read
  6317   00149C  6E0A               	movwf	??_color_read_all^0,c
  6318   00149E  500A               	movf	??_color_read_all^0,w,c
  6319   0014A0  6E19               	movwf	(color_read_all@tmp+8)^0,c
  6320   0014A2  6A1A               	clrf	(color_read_all@tmp+9)^0,c
  6321   0014A4  6A1B               	clrf	(color_read_all@tmp+10)^0,c
  6322   0014A6  6A1C               	clrf	(color_read_all@tmp+11)^0,c
  6323                           
  6324                           ;color.c: 63:  tmp.blue=tmp.blue | (I2C_2_Master_Read(1)<<8);
  6325   0014A8  0E01               	movlw	1
  6326   0014AA  ECA5  F014         	call	_I2C_2_Master_Read
  6327   0014AE  6E0A               	movwf	??_color_read_all^0,c
  6328   0014B0  500A               	movf	??_color_read_all^0,w,c
  6329   0014B2  6E0C               	movwf	(??_color_read_all+2)^0,c
  6330   0014B4  6A0B               	clrf	(??_color_read_all+1)^0,c
  6331   0014B6  C00B  F00D         	movff	??_color_read_all+1,??_color_read_all+3
  6332   0014BA  C00C  F00E         	movff	??_color_read_all+2,??_color_read_all+4
  6333   0014BE  0E00               	movlw	0
  6334   0014C0  BE0E               	btfsc	(??_color_read_all+4)^0,7,c
  6335   0014C2  0EFF               	movlw	255
  6336   0014C4  6E0F               	movwf	(??_color_read_all+5)^0,c
  6337   0014C6  6E10               	movwf	(??_color_read_all+6)^0,c
  6338   0014C8  5019               	movf	(color_read_all@tmp+8)^0,w,c
  6339   0014CA  100D               	iorwf	(??_color_read_all+3)^0,w,c
  6340   0014CC  6E19               	movwf	(color_read_all@tmp+8)^0,c
  6341   0014CE  501A               	movf	(color_read_all@tmp+9)^0,w,c
  6342   0014D0  100E               	iorwf	(??_color_read_all+4)^0,w,c
  6343   0014D2  6E1A               	movwf	(color_read_all@tmp+9)^0,c
  6344   0014D4  501B               	movf	(color_read_all@tmp+10)^0,w,c
  6345   0014D6  100F               	iorwf	(??_color_read_all+5)^0,w,c
  6346   0014D8  6E1B               	movwf	(color_read_all@tmp+10)^0,c
  6347   0014DA  501C               	movf	(color_read_all@tmp+11)^0,w,c
  6348   0014DC  1010               	iorwf	(??_color_read_all+6)^0,w,c
  6349   0014DE  6E1C               	movwf	(color_read_all@tmp+11)^0,c
  6350                           
  6351                           ;color.c: 64:  tmp.clear=I2C_2_Master_Read(1);
  6352   0014E0  0E01               	movlw	1
  6353   0014E2  ECA5  F014         	call	_I2C_2_Master_Read
  6354   0014E6  6E0A               	movwf	??_color_read_all^0,c
  6355   0014E8  500A               	movf	??_color_read_all^0,w,c
  6356   0014EA  6E1D               	movwf	(color_read_all@tmp+12)^0,c
  6357   0014EC  6A1E               	clrf	(color_read_all@tmp+13)^0,c
  6358   0014EE  6A1F               	clrf	(color_read_all@tmp+14)^0,c
  6359   0014F0  6A20               	clrf	(color_read_all@tmp+15)^0,c
  6360                           
  6361                           ;color.c: 65:  tmp.clear=tmp.clear | (I2C_2_Master_Read(0)<<8);
  6362   0014F2  0E00               	movlw	0
  6363   0014F4  ECA5  F014         	call	_I2C_2_Master_Read
  6364   0014F8  6E0A               	movwf	??_color_read_all^0,c
  6365   0014FA  500A               	movf	??_color_read_all^0,w,c
  6366   0014FC  6E0C               	movwf	(??_color_read_all+2)^0,c
  6367   0014FE  6A0B               	clrf	(??_color_read_all+1)^0,c
  6368   001500  C00B  F00D         	movff	??_color_read_all+1,??_color_read_all+3
  6369   001504  C00C  F00E         	movff	??_color_read_all+2,??_color_read_all+4
  6370   001508  0E00               	movlw	0
  6371   00150A  BE0E               	btfsc	(??_color_read_all+4)^0,7,c
  6372   00150C  0EFF               	movlw	255
  6373   00150E  6E0F               	movwf	(??_color_read_all+5)^0,c
  6374   001510  6E10               	movwf	(??_color_read_all+6)^0,c
  6375   001512  501D               	movf	(color_read_all@tmp+12)^0,w,c
  6376   001514  100D               	iorwf	(??_color_read_all+3)^0,w,c
  6377   001516  6E1D               	movwf	(color_read_all@tmp+12)^0,c
  6378   001518  501E               	movf	(color_read_all@tmp+13)^0,w,c
  6379   00151A  100E               	iorwf	(??_color_read_all+4)^0,w,c
  6380   00151C  6E1E               	movwf	(color_read_all@tmp+13)^0,c
  6381   00151E  501F               	movf	(color_read_all@tmp+14)^0,w,c
  6382   001520  100F               	iorwf	(??_color_read_all+5)^0,w,c
  6383   001522  6E1F               	movwf	(color_read_all@tmp+14)^0,c
  6384   001524  5020               	movf	(color_read_all@tmp+15)^0,w,c
  6385   001526  1010               	iorwf	(??_color_read_all+6)^0,w,c
  6386   001528  6E20               	movwf	(color_read_all@tmp+15)^0,c
  6387                           
  6388                           ;color.c: 66:  I2C_2_Master_Stop();
  6389   00152A  EC17  F016         	call	_I2C_2_Master_Stop	;wreg free
  6390   00152E                     
  6391                           ;color.c: 69:  readVals -> red = tmp.red;
  6392   00152E  5009               	movf	color_read_all@readVals^0,w,c
  6393   001530  6ED9               	movwf	fsr2l,c
  6394   001532  6ADA               	clrf	fsr2h,c
  6395   001534  C011  FFDE         	movff	color_read_all@tmp,postinc2
  6396   001538  C012  FFDE         	movff	color_read_all@tmp+1,postinc2
  6397   00153C  C013  FFDE         	movff	color_read_all@tmp+2,postinc2
  6398   001540  C014  FFDE         	movff	color_read_all@tmp+3,postinc2
  6399   001544                     
  6400                           ;color.c: 70:  readVals -> green = tmp.green;
  6401   001544  EE20  F015         	lfsr	2,color_read_all@tmp+4
  6402   001548  5009               	movf	color_read_all@readVals^0,w,c
  6403   00154A  6EE1               	movwf	fsr1l,c
  6404   00154C  6AE2               	clrf	fsr1h,c
  6405   00154E  0E04               	movlw	4
  6406   001550  26E1               	addwf	fsr1l,f,c
  6407   001552  CFDE FFE6          	movff	postinc2,postinc1
  6408   001556  CFDE FFE6          	movff	postinc2,postinc1
  6409   00155A  CFDE FFE6          	movff	postinc2,postinc1
  6410   00155E  CFDE FFE6          	movff	postinc2,postinc1
  6411   001562                     
  6412                           ;color.c: 71:  readVals -> blue = tmp.blue;
  6413   001562  EE20  F019         	lfsr	2,color_read_all@tmp+8
  6414   001566  5009               	movf	color_read_all@readVals^0,w,c
  6415   001568  6EE1               	movwf	fsr1l,c
  6416   00156A  6AE2               	clrf	fsr1h,c
  6417   00156C  0E08               	movlw	8
  6418   00156E  26E1               	addwf	fsr1l,f,c
  6419   001570  CFDE FFE6          	movff	postinc2,postinc1
  6420   001574  CFDE FFE6          	movff	postinc2,postinc1
  6421   001578  CFDE FFE6          	movff	postinc2,postinc1
  6422   00157C  CFDE FFE6          	movff	postinc2,postinc1
  6423   001580                     
  6424                           ;color.c: 72:  readVals -> clear = tmp.clear;
  6425   001580  EE20  F01D         	lfsr	2,color_read_all@tmp+12
  6426   001584  5009               	movf	color_read_all@readVals^0,w,c
  6427   001586  6EE1               	movwf	fsr1l,c
  6428   001588  6AE2               	clrf	fsr1h,c
  6429   00158A  0E0C               	movlw	12
  6430   00158C  26E1               	addwf	fsr1l,f,c
  6431   00158E  CFDE FFE6          	movff	postinc2,postinc1
  6432   001592  CFDE FFE6          	movff	postinc2,postinc1
  6433   001596  CFDE FFE6          	movff	postinc2,postinc1
  6434   00159A  CFDE FFE6          	movff	postinc2,postinc1
  6435   00159E  0012               	return		;funcret
  6436   0015A0                     __end_of_color_read_all:
  6437                           	callstack 0
  6438                           
  6439 ;; *************** function _I2C_2_Master_Write *****************
  6440 ;; Defined at:
  6441 ;;		line 45 in file "i2c.c"
  6442 ;; Parameters:    Size  Location     Type
  6443 ;;  data_byte       1    wreg     unsigned char 
  6444 ;; Auto vars:     Size  Location     Type
  6445 ;;  data_byte       1    5[COMRAM] unsigned char 
  6446 ;; Return value:  Size  Location     Type
  6447 ;;                  1    wreg      void 
  6448 ;; Registers used:
  6449 ;;		wreg, status,2, status,0, cstack
  6450 ;; Tracked objects:
  6451 ;;		On entry : 0/0
  6452 ;;		On exit  : 0/0
  6453 ;;		Unchanged: 0/0
  6454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6456 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6458 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6459 ;;Total ram usage:        1 bytes
  6460 ;; Hardware stack levels used: 1
  6461 ;; Hardware stack levels required when called: 3
  6462 ;; This function calls:
  6463 ;;		_I2C_2_Master_Idle
  6464 ;; This function is called by:
  6465 ;;		_color_writetoaddr
  6466 ;;		_color_read_all
  6467 ;; This function uses a non-reentrant model
  6468 ;;
  6469                           
  6470                           	psect	text36
  6471   002C16                     __ptext36:
  6472                           	callstack 0
  6473   002C16                     _I2C_2_Master_Write:
  6474                           	callstack 25
  6475                           
  6476                           ;incstack = 0
  6477                           ;I2C_2_Master_Write@data_byte stored from wreg
  6478   002C16  6E06               	movwf	I2C_2_Master_Write@data_byte^0,c
  6479   002C18                     
  6480                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  6481   002C18  EC9E  F015         	call	_I2C_2_Master_Idle	;wreg free
  6482   002C1C                     
  6483                           ;i2c.c: 48:   SSP2BUF = data_byte;
  6484   002C1C  C006  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  6485   002C20  0012               	return		;funcret
  6486   002C22                     __end_of_I2C_2_Master_Write:
  6487                           	callstack 0
  6488                           
  6489 ;; *************** function _I2C_2_Master_Stop *****************
  6490 ;; Defined at:
  6491 ;;		line 39 in file "i2c.c"
  6492 ;; Parameters:    Size  Location     Type
  6493 ;;		None
  6494 ;; Auto vars:     Size  Location     Type
  6495 ;;		None
  6496 ;; Return value:  Size  Location     Type
  6497 ;;                  1    wreg      void 
  6498 ;; Registers used:
  6499 ;;		wreg, status,2, status,0, cstack
  6500 ;; Tracked objects:
  6501 ;;		On entry : 0/0
  6502 ;;		On exit  : 0/0
  6503 ;;		Unchanged: 0/0
  6504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6506 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6508 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6509 ;;Total ram usage:        0 bytes
  6510 ;; Hardware stack levels used: 1
  6511 ;; Hardware stack levels required when called: 3
  6512 ;; This function calls:
  6513 ;;		_I2C_2_Master_Idle
  6514 ;; This function is called by:
  6515 ;;		_color_writetoaddr
  6516 ;;		_color_read_all
  6517 ;; This function uses a non-reentrant model
  6518 ;;
  6519                           
  6520                           	psect	text37
  6521   002C2E                     __ptext37:
  6522                           	callstack 0
  6523   002C2E                     _I2C_2_Master_Stop:
  6524                           	callstack 25
  6525   002C2E                     
  6526                           ;i2c.c: 41:   I2C_2_Master_Idle();
  6527   002C2E  EC9E  F015         	call	_I2C_2_Master_Idle	;wreg free
  6528   002C32                     
  6529                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  6530   002C32  010E               	movlb	14	; () banked
  6531   002C34  85DA               	bsf	218,2,b	;volatile
  6532   002C36                     
  6533                           ; BSR set to: 14
  6534   002C36  0012               	return		;funcret
  6535   002C38                     __end_of_I2C_2_Master_Stop:
  6536                           	callstack 0
  6537                           
  6538 ;; *************** function _I2C_2_Master_Start *****************
  6539 ;; Defined at:
  6540 ;;		line 27 in file "i2c.c"
  6541 ;; Parameters:    Size  Location     Type
  6542 ;;		None
  6543 ;; Auto vars:     Size  Location     Type
  6544 ;;		None
  6545 ;; Return value:  Size  Location     Type
  6546 ;;                  1    wreg      void 
  6547 ;; Registers used:
  6548 ;;		wreg, status,2, status,0, cstack
  6549 ;; Tracked objects:
  6550 ;;		On entry : 0/0
  6551 ;;		On exit  : 0/0
  6552 ;;		Unchanged: 0/0
  6553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6555 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6557 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6558 ;;Total ram usage:        0 bytes
  6559 ;; Hardware stack levels used: 1
  6560 ;; Hardware stack levels required when called: 3
  6561 ;; This function calls:
  6562 ;;		_I2C_2_Master_Idle
  6563 ;; This function is called by:
  6564 ;;		_color_writetoaddr
  6565 ;;		_color_read_all
  6566 ;; This function uses a non-reentrant model
  6567 ;;
  6568                           
  6569                           	psect	text38
  6570   002C38                     __ptext38:
  6571                           	callstack 0
  6572   002C38                     _I2C_2_Master_Start:
  6573                           	callstack 25
  6574   002C38                     
  6575                           ;i2c.c: 29:   I2C_2_Master_Idle();
  6576   002C38  EC9E  F015         	call	_I2C_2_Master_Idle	;wreg free
  6577   002C3C                     
  6578                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  6579   002C3C  010E               	movlb	14	; () banked
  6580   002C3E  81DA               	bsf	218,0,b	;volatile
  6581   002C40                     
  6582                           ; BSR set to: 14
  6583   002C40  0012               	return		;funcret
  6584   002C42                     __end_of_I2C_2_Master_Start:
  6585                           	callstack 0
  6586                           
  6587 ;; *************** function _I2C_2_Master_RepStart *****************
  6588 ;; Defined at:
  6589 ;;		line 33 in file "i2c.c"
  6590 ;; Parameters:    Size  Location     Type
  6591 ;;		None
  6592 ;; Auto vars:     Size  Location     Type
  6593 ;;		None
  6594 ;; Return value:  Size  Location     Type
  6595 ;;                  1    wreg      void 
  6596 ;; Registers used:
  6597 ;;		wreg, status,2, status,0, cstack
  6598 ;; Tracked objects:
  6599 ;;		On entry : 0/0
  6600 ;;		On exit  : 0/0
  6601 ;;		Unchanged: 0/0
  6602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6604 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6606 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6607 ;;Total ram usage:        0 bytes
  6608 ;; Hardware stack levels used: 1
  6609 ;; Hardware stack levels required when called: 3
  6610 ;; This function calls:
  6611 ;;		_I2C_2_Master_Idle
  6612 ;; This function is called by:
  6613 ;;		_color_read_all
  6614 ;; This function uses a non-reentrant model
  6615 ;;
  6616                           
  6617                           	psect	text39
  6618   002C42                     __ptext39:
  6619                           	callstack 0
  6620   002C42                     _I2C_2_Master_RepStart:
  6621                           	callstack 23
  6622   002C42                     
  6623                           ;i2c.c: 35:   I2C_2_Master_Idle();
  6624   002C42  EC9E  F015         	call	_I2C_2_Master_Idle	;wreg free
  6625   002C46                     
  6626                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  6627   002C46  010E               	movlb	14	; () banked
  6628   002C48  83DA               	bsf	218,1,b	;volatile
  6629   002C4A                     
  6630                           ; BSR set to: 14
  6631   002C4A  0012               	return		;funcret
  6632   002C4C                     __end_of_I2C_2_Master_RepStart:
  6633                           	callstack 0
  6634                           
  6635 ;; *************** function _I2C_2_Master_Read *****************
  6636 ;; Defined at:
  6637 ;;		line 51 in file "i2c.c"
  6638 ;; Parameters:    Size  Location     Type
  6639 ;;  ack             1    wreg     unsigned char 
  6640 ;; Auto vars:     Size  Location     Type
  6641 ;;  ack             1    6[COMRAM] unsigned char 
  6642 ;;  tmp             1    7[COMRAM] unsigned char 
  6643 ;; Return value:  Size  Location     Type
  6644 ;;                  1    wreg      unsigned char 
  6645 ;; Registers used:
  6646 ;;		wreg, status,2, status,0, cstack
  6647 ;; Tracked objects:
  6648 ;;		On entry : 0/0
  6649 ;;		On exit  : 0/0
  6650 ;;		Unchanged: 0/0
  6651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6653 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6654 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6655 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6656 ;;Total ram usage:        3 bytes
  6657 ;; Hardware stack levels used: 1
  6658 ;; Hardware stack levels required when called: 3
  6659 ;; This function calls:
  6660 ;;		_I2C_2_Master_Idle
  6661 ;; This function is called by:
  6662 ;;		_color_read_all
  6663 ;; This function uses a non-reentrant model
  6664 ;;
  6665                           
  6666                           	psect	text40
  6667   00294A                     __ptext40:
  6668                           	callstack 0
  6669   00294A                     _I2C_2_Master_Read:
  6670                           	callstack 23
  6671                           
  6672                           ; BSR set to: 14
  6673                           ;incstack = 0
  6674                           ;I2C_2_Master_Read@ack stored from wreg
  6675   00294A  6E07               	movwf	I2C_2_Master_Read@ack^0,c
  6676   00294C                     
  6677                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  6678   00294C  EC9E  F015         	call	_I2C_2_Master_Idle	;wreg free
  6679   002950                     
  6680                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  6681   002950  010E               	movlb	14	; () banked
  6682   002952  87DA               	bsf	218,3,b	;volatile
  6683                           
  6684                           ;i2c.c: 56:   I2C_2_Master_Idle();
  6685   002954  EC9E  F015         	call	_I2C_2_Master_Idle	;wreg free
  6686   002958                     
  6687                           ;i2c.c: 57:   tmp = SSP2BUF;
  6688   002958  CED5 F008          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  6689                           
  6690                           ;i2c.c: 58:   I2C_2_Master_Idle();
  6691   00295C  EC9E  F015         	call	_I2C_2_Master_Idle	;wreg free
  6692   002960                     
  6693                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  6694   002960  5007               	movf	I2C_2_Master_Read@ack^0,w,c
  6695   002962  B4D8               	btfsc	status,2,c
  6696   002964  EFB6  F014         	goto	u2901
  6697   002968  EFBA  F014         	goto	u2900
  6698   00296C                     u2901:
  6699   00296C  6A06               	clrf	??_I2C_2_Master_Read^0,c
  6700   00296E  2A06               	incf	??_I2C_2_Master_Read^0,f,c
  6701   002970  EFBB  F014         	goto	u2918
  6702   002974                     u2900:
  6703   002974  6A06               	clrf	??_I2C_2_Master_Read^0,c
  6704   002976                     u2918:
  6705   002976  3A06               	swapf	??_I2C_2_Master_Read^0,f,c
  6706   002978  4606               	rlncf	??_I2C_2_Master_Read^0,f,c
  6707   00297A  010E               	movlb	14	; () banked
  6708   00297C  51DA               	movf	218,w,b	;volatile
  6709   00297E  1806               	xorwf	??_I2C_2_Master_Read^0,w,c
  6710   002980  0BDF               	andlw	-33
  6711   002982  1806               	xorwf	??_I2C_2_Master_Read^0,w,c
  6712   002984  6FDA               	movwf	218,b	;volatile
  6713   002986                     
  6714                           ; BSR set to: 14
  6715                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  6716   002986  89DA               	bsf	218,4,b	;volatile
  6717   002988                     
  6718                           ; BSR set to: 14
  6719                           ;i2c.c: 61:   return tmp;
  6720   002988  5008               	movf	I2C_2_Master_Read@tmp^0,w,c
  6721   00298A                     
  6722                           ; BSR set to: 14
  6723   00298A  0012               	return		;funcret
  6724   00298C                     __end_of_I2C_2_Master_Read:
  6725                           	callstack 0
  6726                           
  6727 ;; *************** function _I2C_2_Master_Idle *****************
  6728 ;; Defined at:
  6729 ;;		line 22 in file "i2c.c"
  6730 ;; Parameters:    Size  Location     Type
  6731 ;;		None
  6732 ;; Auto vars:     Size  Location     Type
  6733 ;;		None
  6734 ;; Return value:  Size  Location     Type
  6735 ;;                  1    wreg      void 
  6736 ;; Registers used:
  6737 ;;		wreg, status,2, status,0
  6738 ;; Tracked objects:
  6739 ;;		On entry : 0/0
  6740 ;;		On exit  : 0/0
  6741 ;;		Unchanged: 0/0
  6742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6745 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6746 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6747 ;;Total ram usage:        1 bytes
  6748 ;; Hardware stack levels used: 1
  6749 ;; Hardware stack levels required when called: 2
  6750 ;; This function calls:
  6751 ;;		Nothing
  6752 ;; This function is called by:
  6753 ;;		_I2C_2_Master_Start
  6754 ;;		_I2C_2_Master_RepStart
  6755 ;;		_I2C_2_Master_Stop
  6756 ;;		_I2C_2_Master_Write
  6757 ;;		_I2C_2_Master_Read
  6758 ;; This function uses a non-reentrant model
  6759 ;;
  6760                           
  6761                           	psect	text41
  6762   002B3C                     __ptext41:
  6763                           	callstack 0
  6764   002B3C                     _I2C_2_Master_Idle:
  6765                           	callstack 25
  6766   002B3C                     l525:
  6767   002B3C  010E               	movlb	14	; () banked
  6768   002B3E  B5D8               	btfsc	216,2,b	;volatile
  6769   002B40  EFA4  F015         	goto	u2781
  6770   002B44  EFA6  F015         	goto	u2780
  6771   002B48                     u2781:
  6772   002B48  EF9E  F015         	goto	l525
  6773   002B4C                     u2780:
  6774   002B4C                     
  6775                           ; BSR set to: 14
  6776   002B4C  CEDA F005          	movff	3802,??_I2C_2_Master_Idle	;volatile
  6777   002B50  0E1F               	movlw	31
  6778   002B52  1605               	andwf	??_I2C_2_Master_Idle^0,f,c
  6779   002B54  A4D8               	btfss	status,2,c
  6780   002B56  EFAF  F015         	goto	u2791
  6781   002B5A  EFB1  F015         	goto	u2790
  6782   002B5E                     u2791:
  6783   002B5E  EF9E  F015         	goto	l525
  6784   002B62                     u2790:
  6785   002B62                     
  6786                           ; BSR set to: 14
  6787   002B62  0012               	return		;funcret
  6788   002B64                     __end_of_I2C_2_Master_Idle:
  6789                           	callstack 0
  6790                           
  6791 ;; *************** function _abs *****************
  6792 ;; Defined at:
  6793 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
  6794 ;; Parameters:    Size  Location     Type
  6795 ;;  a               2   14[COMRAM] int 
  6796 ;; Auto vars:     Size  Location     Type
  6797 ;;		None
  6798 ;; Return value:  Size  Location     Type
  6799 ;;                  2   14[COMRAM] int 
  6800 ;; Registers used:
  6801 ;;		wreg, status,2, status,0
  6802 ;; Tracked objects:
  6803 ;;		On entry : 0/0
  6804 ;;		On exit  : 0/0
  6805 ;;		Unchanged: 0/0
  6806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6807 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6809 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6810 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6811 ;;Total ram usage:        4 bytes
  6812 ;; Hardware stack levels used: 1
  6813 ;; Hardware stack levels required when called: 2
  6814 ;; This function calls:
  6815 ;;		Nothing
  6816 ;; This function is called by:
  6817 ;;		_checkColor
  6818 ;;		_vfpfcnvrt
  6819 ;; This function uses a non-reentrant model
  6820 ;;
  6821                           
  6822                           	psect	text42
  6823   002A5C                     __ptext42:
  6824                           	callstack 0
  6825   002A5C                     _abs:
  6826                           	callstack 22
  6827   002A5C  BE10               	btfsc	(abs@a+1)^0,7,c
  6828   002A5E  EF33  F015         	goto	u2571
  6829   002A62  EF35  F015         	goto	u2570
  6830   002A66                     u2571:
  6831   002A66  EF3B  F015         	goto	l1289
  6832   002A6A                     u2570:
  6833   002A6A  C00F  F00F         	movff	abs@a,?_abs
  6834   002A6E  C010  F010         	movff	abs@a+1,?_abs+1
  6835   002A72  EF47  F015         	goto	l1292
  6836   002A76                     l1289:
  6837   002A76  C00F  F011         	movff	abs@a,??_abs
  6838   002A7A  C010  F012         	movff	abs@a+1,??_abs+1
  6839   002A7E  1E11               	comf	??_abs^0,f,c
  6840   002A80  1E12               	comf	(??_abs+1)^0,f,c
  6841   002A82  4A11               	infsnz	??_abs^0,f,c
  6842   002A84  2A12               	incf	(??_abs+1)^0,f,c
  6843   002A86  C011  F00F         	movff	??_abs,?_abs
  6844   002A8A  C012  F010         	movff	??_abs+1,?_abs+1
  6845   002A8E                     l1292:
  6846   002A8E  0012               	return		;funcret
  6847   002A90                     __end_of_abs:
  6848                           	callstack 0
  6849                           
  6850 ;; *************** function ___wmul *****************
  6851 ;; Defined at:
  6852 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  6853 ;; Parameters:    Size  Location     Type
  6854 ;;  multiplier      2    4[COMRAM] unsigned int 
  6855 ;;  multiplicand    2    6[COMRAM] unsigned int 
  6856 ;; Auto vars:     Size  Location     Type
  6857 ;;  product         2    8[COMRAM] unsigned int 
  6858 ;; Return value:  Size  Location     Type
  6859 ;;                  2    4[COMRAM] unsigned int 
  6860 ;; Registers used:
  6861 ;;		wreg, status,2, status,0, prodl, prodh
  6862 ;; Tracked objects:
  6863 ;;		On entry : 0/0
  6864 ;;		On exit  : 0/0
  6865 ;;		Unchanged: 0/0
  6866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6867 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6868 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6869 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6870 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6871 ;;Total ram usage:        6 bytes
  6872 ;; Hardware stack levels used: 1
  6873 ;; Hardware stack levels required when called: 2
  6874 ;; This function calls:
  6875 ;;		Nothing
  6876 ;; This function is called by:
  6877 ;;		_checkColor
  6878 ;;		_calibCards
  6879 ;; This function uses a non-reentrant model
  6880 ;;
  6881                           
  6882                           	psect	text43
  6883   002B64                     __ptext43:
  6884                           	callstack 0
  6885   002B64                     ___wmul:
  6886                           	callstack 25
  6887   002B64  5005               	movf	___wmul@multiplier^0,w,c
  6888   002B66  0207               	mulwf	___wmul@multiplicand^0,c
  6889   002B68  CFF3 F009          	movff	prodl,___wmul@product
  6890   002B6C  CFF4 F00A          	movff	prodh,___wmul@product+1
  6891   002B70  5005               	movf	___wmul@multiplier^0,w,c
  6892   002B72  0208               	mulwf	(___wmul@multiplicand+1)^0,c
  6893   002B74  50F3               	movf	243,w,c
  6894   002B76  260A               	addwf	(___wmul@product+1)^0,f,c
  6895   002B78  5006               	movf	(___wmul@multiplier+1)^0,w,c
  6896   002B7A  0207               	mulwf	___wmul@multiplicand^0,c
  6897   002B7C  50F3               	movf	243,w,c
  6898   002B7E  260A               	addwf	(___wmul@product+1)^0,f,c
  6899   002B80  C009  F005         	movff	___wmul@product,?___wmul
  6900   002B84  C00A  F006         	movff	___wmul@product+1,?___wmul+1
  6901   002B88  0012               	return		;funcret
  6902   002B8A                     __end_of___wmul:
  6903                           	callstack 0
  6904                           
  6905 ;; *************** function ___aldiv *****************
  6906 ;; Defined at:
  6907 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\aldiv.c"
  6908 ;; Parameters:    Size  Location     Type
  6909 ;;  dividend        4   10[COMRAM] long 
  6910 ;;  divisor         4   14[COMRAM] long 
  6911 ;; Auto vars:     Size  Location     Type
  6912 ;;  quotient        4   20[COMRAM] long 
  6913 ;;  sign            1   19[COMRAM] unsigned char 
  6914 ;;  counter         1   18[COMRAM] unsigned char 
  6915 ;; Return value:  Size  Location     Type
  6916 ;;                  4   10[COMRAM] long 
  6917 ;; Registers used:
  6918 ;;		wreg, status,2, status,0
  6919 ;; Tracked objects:
  6920 ;;		On entry : 0/0
  6921 ;;		On exit  : 0/0
  6922 ;;		Unchanged: 0/0
  6923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6924 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6925 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6927 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6928 ;;Total ram usage:       14 bytes
  6929 ;; Hardware stack levels used: 1
  6930 ;; Hardware stack levels required when called: 2
  6931 ;; This function calls:
  6932 ;;		Nothing
  6933 ;; This function is called by:
  6934 ;;		_checkColor
  6935 ;;		_vfpfcnvrt
  6936 ;; This function uses a non-reentrant model
  6937 ;;
  6938                           
  6939                           	psect	text44
  6940   001E56                     __ptext44:
  6941                           	callstack 0
  6942   001E56                     ___aldiv:
  6943                           	callstack 22
  6944   001E56  0E00               	movlw	0
  6945   001E58  6E14               	movwf	___aldiv@sign^0,c
  6946   001E5A  BE12               	btfsc	(___aldiv@divisor+3)^0,7,c
  6947   001E5C  EF34  F00F         	goto	u2600
  6948   001E60  EF32  F00F         	goto	u2601
  6949   001E64                     u2601:
  6950   001E64  EF3E  F00F         	goto	l3502
  6951   001E68                     u2600:
  6952   001E68  1E12               	comf	(___aldiv@divisor+3)^0,f,c
  6953   001E6A  1E11               	comf	(___aldiv@divisor+2)^0,f,c
  6954   001E6C  1E10               	comf	(___aldiv@divisor+1)^0,f,c
  6955   001E6E  6C0F               	negf	___aldiv@divisor^0,c
  6956   001E70  0E00               	movlw	0
  6957   001E72  2210               	addwfc	(___aldiv@divisor+1)^0,f,c
  6958   001E74  2211               	addwfc	(___aldiv@divisor+2)^0,f,c
  6959   001E76  2212               	addwfc	(___aldiv@divisor+3)^0,f,c
  6960   001E78  0E01               	movlw	1
  6961   001E7A  6E14               	movwf	___aldiv@sign^0,c
  6962   001E7C                     l3502:
  6963   001E7C  BE0E               	btfsc	(___aldiv@dividend+3)^0,7,c
  6964   001E7E  EF45  F00F         	goto	u2610
  6965   001E82  EF43  F00F         	goto	u2611
  6966   001E86                     u2611:
  6967   001E86  EF4F  F00F         	goto	l3508
  6968   001E8A                     u2610:
  6969   001E8A  1E0E               	comf	(___aldiv@dividend+3)^0,f,c
  6970   001E8C  1E0D               	comf	(___aldiv@dividend+2)^0,f,c
  6971   001E8E  1E0C               	comf	(___aldiv@dividend+1)^0,f,c
  6972   001E90  6C0B               	negf	___aldiv@dividend^0,c
  6973   001E92  0E00               	movlw	0
  6974   001E94  220C               	addwfc	(___aldiv@dividend+1)^0,f,c
  6975   001E96  220D               	addwfc	(___aldiv@dividend+2)^0,f,c
  6976   001E98  220E               	addwfc	(___aldiv@dividend+3)^0,f,c
  6977   001E9A  0E01               	movlw	1
  6978   001E9C  1A14               	xorwf	___aldiv@sign^0,f,c
  6979   001E9E                     l3508:
  6980   001E9E  0E00               	movlw	0
  6981   001EA0  6E15               	movwf	___aldiv@quotient^0,c
  6982   001EA2  0E00               	movlw	0
  6983   001EA4  6E16               	movwf	(___aldiv@quotient+1)^0,c
  6984   001EA6  0E00               	movlw	0
  6985   001EA8  6E17               	movwf	(___aldiv@quotient+2)^0,c
  6986   001EAA  0E00               	movlw	0
  6987   001EAC  6E18               	movwf	(___aldiv@quotient+3)^0,c
  6988   001EAE  500F               	movf	___aldiv@divisor^0,w,c
  6989   001EB0  1010               	iorwf	(___aldiv@divisor+1)^0,w,c
  6990   001EB2  1011               	iorwf	(___aldiv@divisor+2)^0,w,c
  6991   001EB4  1012               	iorwf	(___aldiv@divisor+3)^0,w,c
  6992   001EB6  B4D8               	btfsc	status,2,c
  6993   001EB8  EF60  F00F         	goto	u2621
  6994   001EBC  EF62  F00F         	goto	u2620
  6995   001EC0                     u2621:
  6996   001EC0  EF98  F00F         	goto	l3530
  6997   001EC4                     u2620:
  6998   001EC4  0E01               	movlw	1
  6999   001EC6  6E13               	movwf	___aldiv@counter^0,c
  7000   001EC8  EF6C  F00F         	goto	l3516
  7001   001ECC                     l3514:
  7002   001ECC  90D8               	bcf	status,0,c
  7003   001ECE  360F               	rlcf	___aldiv@divisor^0,f,c
  7004   001ED0  3610               	rlcf	(___aldiv@divisor+1)^0,f,c
  7005   001ED2  3611               	rlcf	(___aldiv@divisor+2)^0,f,c
  7006   001ED4  3612               	rlcf	(___aldiv@divisor+3)^0,f,c
  7007   001ED6  2A13               	incf	___aldiv@counter^0,f,c
  7008   001ED8                     l3516:
  7009   001ED8  AE12               	btfss	(___aldiv@divisor+3)^0,7,c
  7010   001EDA  EF71  F00F         	goto	u2631
  7011   001EDE  EF73  F00F         	goto	u2630
  7012   001EE2                     u2631:
  7013   001EE2  EF66  F00F         	goto	l3514
  7014   001EE6                     u2630:
  7015   001EE6                     l3518:
  7016   001EE6  90D8               	bcf	status,0,c
  7017   001EE8  3615               	rlcf	___aldiv@quotient^0,f,c
  7018   001EEA  3616               	rlcf	(___aldiv@quotient+1)^0,f,c
  7019   001EEC  3617               	rlcf	(___aldiv@quotient+2)^0,f,c
  7020   001EEE  3618               	rlcf	(___aldiv@quotient+3)^0,f,c
  7021   001EF0  500F               	movf	___aldiv@divisor^0,w,c
  7022   001EF2  5C0B               	subwf	___aldiv@dividend^0,w,c
  7023   001EF4  5010               	movf	(___aldiv@divisor+1)^0,w,c
  7024   001EF6  580C               	subwfb	(___aldiv@dividend+1)^0,w,c
  7025   001EF8  5011               	movf	(___aldiv@divisor+2)^0,w,c
  7026   001EFA  580D               	subwfb	(___aldiv@dividend+2)^0,w,c
  7027   001EFC  5012               	movf	(___aldiv@divisor+3)^0,w,c
  7028   001EFE  580E               	subwfb	(___aldiv@dividend+3)^0,w,c
  7029   001F00  A0D8               	btfss	status,0,c
  7030   001F02  EF85  F00F         	goto	u2641
  7031   001F06  EF87  F00F         	goto	u2640
  7032   001F0A                     u2641:
  7033   001F0A  EF90  F00F         	goto	l3526
  7034   001F0E                     u2640:
  7035   001F0E  500F               	movf	___aldiv@divisor^0,w,c
  7036   001F10  5E0B               	subwf	___aldiv@dividend^0,f,c
  7037   001F12  5010               	movf	(___aldiv@divisor+1)^0,w,c
  7038   001F14  5A0C               	subwfb	(___aldiv@dividend+1)^0,f,c
  7039   001F16  5011               	movf	(___aldiv@divisor+2)^0,w,c
  7040   001F18  5A0D               	subwfb	(___aldiv@dividend+2)^0,f,c
  7041   001F1A  5012               	movf	(___aldiv@divisor+3)^0,w,c
  7042   001F1C  5A0E               	subwfb	(___aldiv@dividend+3)^0,f,c
  7043   001F1E  8015               	bsf	___aldiv@quotient^0,0,c
  7044   001F20                     l3526:
  7045   001F20  90D8               	bcf	status,0,c
  7046   001F22  3212               	rrcf	(___aldiv@divisor+3)^0,f,c
  7047   001F24  3211               	rrcf	(___aldiv@divisor+2)^0,f,c
  7048   001F26  3210               	rrcf	(___aldiv@divisor+1)^0,f,c
  7049   001F28  320F               	rrcf	___aldiv@divisor^0,f,c
  7050   001F2A  2E13               	decfsz	___aldiv@counter^0,f,c
  7051   001F2C  EF73  F00F         	goto	l3518
  7052   001F30                     l3530:
  7053   001F30  5014               	movf	___aldiv@sign^0,w,c
  7054   001F32  B4D8               	btfsc	status,2,c
  7055   001F34  EF9E  F00F         	goto	u2651
  7056   001F38  EFA0  F00F         	goto	u2650
  7057   001F3C                     u2651:
  7058   001F3C  EFA8  F00F         	goto	l3534
  7059   001F40                     u2650:
  7060   001F40  1E18               	comf	(___aldiv@quotient+3)^0,f,c
  7061   001F42  1E17               	comf	(___aldiv@quotient+2)^0,f,c
  7062   001F44  1E16               	comf	(___aldiv@quotient+1)^0,f,c
  7063   001F46  6C15               	negf	___aldiv@quotient^0,c
  7064   001F48  0E00               	movlw	0
  7065   001F4A  2216               	addwfc	(___aldiv@quotient+1)^0,f,c
  7066   001F4C  2217               	addwfc	(___aldiv@quotient+2)^0,f,c
  7067   001F4E  2218               	addwfc	(___aldiv@quotient+3)^0,f,c
  7068   001F50                     l3534:
  7069   001F50  C015  F00B         	movff	___aldiv@quotient,?___aldiv
  7070   001F54  C016  F00C         	movff	___aldiv@quotient+1,?___aldiv+1
  7071   001F58  C017  F00D         	movff	___aldiv@quotient+2,?___aldiv+2
  7072   001F5C  C018  F00E         	movff	___aldiv@quotient+3,?___aldiv+3
  7073   001F60  0012               	return		;funcret
  7074   001F62                     __end_of___aldiv:
  7075                           	callstack 0
  7076                           
  7077 ;; *************** function _Interrupts_init *****************
  7078 ;; Defined at:
  7079 ;;		line 10 in file "interrupts.c"
  7080 ;; Parameters:    Size  Location     Type
  7081 ;;		None
  7082 ;; Auto vars:     Size  Location     Type
  7083 ;;		None
  7084 ;; Return value:  Size  Location     Type
  7085 ;;                  1    wreg      void 
  7086 ;; Registers used:
  7087 ;;		None
  7088 ;; Tracked objects:
  7089 ;;		On entry : 0/0
  7090 ;;		On exit  : 0/0
  7091 ;;		Unchanged: 0/0
  7092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7094 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7096 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7097 ;;Total ram usage:        0 bytes
  7098 ;; Hardware stack levels used: 1
  7099 ;; Hardware stack levels required when called: 2
  7100 ;; This function calls:
  7101 ;;		Nothing
  7102 ;; This function is called by:
  7103 ;;		_main
  7104 ;; This function uses a non-reentrant model
  7105 ;;
  7106                           
  7107                           	psect	text45
  7108   002C22                     __ptext45:
  7109                           	callstack 0
  7110   002C22                     _Interrupts_init:
  7111                           	callstack 28
  7112   002C22                     
  7113                           ;interrupts.c: 16:     INTCONbits.IPEN = 0;
  7114   002C22  9AF2               	bcf	242,5,c	;volatile
  7115                           
  7116                           ;interrupts.c: 17:     INTCONbits.PEIE = 1;
  7117   002C24  8CF2               	bsf	242,6,c	;volatile
  7118                           
  7119                           ;interrupts.c: 18:     PIE4bits.RC4IE=1;
  7120   002C26  010E               	movlb	14	; () banked
  7121   002C28  872D               	bsf	45,3,b	;volatile
  7122                           
  7123                           ;interrupts.c: 20:     INTCONbits.GIE=1;
  7124   002C2A  8EF2               	bsf	242,7,c	;volatile
  7125   002C2C                     
  7126                           ; BSR set to: 14
  7127   002C2C  0012               	return		;funcret
  7128   002C2E                     __end_of_Interrupts_init:
  7129                           	callstack 0
  7130                           
  7131 ;; *************** function _HighISR *****************
  7132 ;; Defined at:
  7133 ;;		line 28 in file "interrupts.c"
  7134 ;; Parameters:    Size  Location     Type
  7135 ;;		None
  7136 ;; Auto vars:     Size  Location     Type
  7137 ;;		None
  7138 ;; Return value:  Size  Location     Type
  7139 ;;                  1    wreg      void 
  7140 ;; Registers used:
  7141 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7142 ;; Tracked objects:
  7143 ;;		On entry : 0/0
  7144 ;;		On exit  : 0/0
  7145 ;;		Unchanged: 0/0
  7146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7148 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7149 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7150 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7151 ;;Total ram usage:        2 bytes
  7152 ;; Hardware stack levels used: 1
  7153 ;; Hardware stack levels required when called: 1
  7154 ;; This function calls:
  7155 ;;		_getCharFromTxBuf
  7156 ;;		_isDataInTxBuf
  7157 ;; This function is called by:
  7158 ;;		Interrupt level 2
  7159 ;; This function uses a non-reentrant model
  7160 ;;
  7161                           
  7162                           	psect	intcode
  7163   000008                     __pintcode:
  7164                           	callstack 0
  7165   000008                     _HighISR:
  7166                           	callstack 21
  7167                           
  7168                           ; BSR set to: 14
  7169                           ;incstack = 0
  7170   000008  825A               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  7171   00000A  CFD9 F003          	movff	fsr2l,??_HighISR
  7172   00000E  CFDA F004          	movff	fsr2h,??_HighISR+1
  7173   000012                     
  7174                           ;interrupts.c: 30:     if(PIR4bits.TX4IF) {
  7175   000012  010E               	movlb	14	; () banked
  7176   000014  A537               	btfss	55,2,b	;volatile
  7177   000016  EF0F  F000         	goto	i2u249_41
  7178   00001A  EF11  F000         	goto	i2u249_40
  7179   00001E                     i2u249_41:
  7180   00001E  EF15  F000         	goto	i2l3326
  7181   000022                     i2u249_40:
  7182   000022                     
  7183                           ; BSR set to: 14
  7184                           ;interrupts.c: 31:         TX4REG = getCharFromTxBuf();
  7185   000022  EC5F  F015         	call	_getCharFromTxBuf	;wreg free
  7186   000026  010E               	movlb	14	; () banked
  7187   000028  6FE4               	movwf	228,b	;volatile
  7188   00002A                     i2l3326:
  7189                           
  7190                           ; BSR set to: 14
  7191                           ;interrupts.c: 33:     if (!isDataInTxBuf()) {
  7192   00002A  ECFF  F015         	call	_isDataInTxBuf	;wreg free
  7193   00002E  0900               	iorlw	0
  7194   000030  A4D8               	btfss	status,2,c
  7195   000032  EF1D  F000         	goto	i2u250_41
  7196   000036  EF1F  F000         	goto	i2u250_40
  7197   00003A                     i2u250_41:
  7198   00003A  EF21  F000         	goto	i2l597
  7199   00003E                     i2u250_40:
  7200   00003E                     
  7201                           ;interrupts.c: 34:         PIE4bits.TX4IE=0;
  7202   00003E  010E               	movlb	14	; () banked
  7203   000040  952D               	bcf	45,2,b	;volatile
  7204   000042                     i2l597:
  7205   000042  C004  FFDA         	movff	??_HighISR+1,fsr2h
  7206   000046  C003  FFD9         	movff	??_HighISR,fsr2l
  7207   00004A  925A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  7208   00004C  0011               	retfie		f
  7209   00004E                     __end_of_HighISR:
  7210                           	callstack 0
  7211                           
  7212 ;; *************** function _isDataInTxBuf *****************
  7213 ;; Defined at:
  7214 ;;		line 90 in file "serial.c"
  7215 ;; Parameters:    Size  Location     Type
  7216 ;;		None
  7217 ;; Auto vars:     Size  Location     Type
  7218 ;;		None
  7219 ;; Return value:  Size  Location     Type
  7220 ;;                  1    wreg      unsigned char 
  7221 ;; Registers used:
  7222 ;;		wreg, status,2, status,0
  7223 ;; Tracked objects:
  7224 ;;		On entry : 0/0
  7225 ;;		On exit  : 0/0
  7226 ;;		Unchanged: 0/0
  7227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7229 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7231 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7232 ;;Total ram usage:        0 bytes
  7233 ;; Hardware stack levels used: 1
  7234 ;; This function calls:
  7235 ;;		Nothing
  7236 ;; This function is called by:
  7237 ;;		_HighISR
  7238 ;;		_sendTxBuf
  7239 ;; This function uses a non-reentrant model
  7240 ;;
  7241                           
  7242                           	psect	text47
  7243   002BFE                     __ptext47:
  7244                           	callstack 0
  7245   002BFE                     _isDataInTxBuf:
  7246                           	callstack 21
  7247   002BFE                     
  7248                           ;serial.c: 91:     return (TxBufWriteCnt!=TxBufReadCnt);
  7249   002BFE  5057               	movf	_TxBufReadCnt^0,w,c	;volatile
  7250   002C00  1858               	xorwf	_TxBufWriteCnt^0,w,c	;volatile
  7251   002C02  A4D8               	btfss	status,2,c
  7252   002C04  EF06  F016         	goto	i2u96_41
  7253   002C08  EF09  F016         	goto	i2u96_40
  7254   002C0C                     i2u96_41:
  7255   002C0C  0E01               	movlw	1
  7256   002C0E  EF0A  F016         	goto	i2u97_40
  7257   002C12                     i2u96_40:
  7258   002C12  0E00               	movlw	0
  7259   002C14                     i2u97_40:
  7260   002C14  0012               	return		;funcret
  7261   002C16                     __end_of_isDataInTxBuf:
  7262                           	callstack 0
  7263                           
  7264 ;; *************** function _getCharFromTxBuf *****************
  7265 ;; Defined at:
  7266 ;;		line 76 in file "serial.c"
  7267 ;; Parameters:    Size  Location     Type
  7268 ;;		None
  7269 ;; Auto vars:     Size  Location     Type
  7270 ;;		None
  7271 ;; Return value:  Size  Location     Type
  7272 ;;                  1    wreg      unsigned char 
  7273 ;; Registers used:
  7274 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7275 ;; Tracked objects:
  7276 ;;		On entry : 0/0
  7277 ;;		On exit  : 0/0
  7278 ;;		Unchanged: 0/0
  7279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7281 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7282 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7283 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7284 ;;Total ram usage:        2 bytes
  7285 ;; Hardware stack levels used: 1
  7286 ;; This function calls:
  7287 ;;		Nothing
  7288 ;; This function is called by:
  7289 ;;		_HighISR
  7290 ;; This function uses a non-reentrant model
  7291 ;;
  7292                           
  7293                           	psect	text48
  7294   002ABE                     __ptext48:
  7295                           	callstack 0
  7296   002ABE                     _getCharFromTxBuf:
  7297                           	callstack 21
  7298   002ABE                     
  7299                           ;serial.c: 77:     if (TxBufReadCnt>=60) {TxBufReadCnt=0;}
  7300   002ABE  0E3B               	movlw	59
  7301   002AC0  6457               	cpfsgt	_TxBufReadCnt^0,c	;volatile
  7302   002AC2  EF65  F015         	goto	i2u221_41
  7303   002AC6  EF67  F015         	goto	i2u221_40
  7304   002ACA                     i2u221_41:
  7305   002ACA  EF69  F015         	goto	i2l3182
  7306   002ACE                     i2u221_40:
  7307   002ACE  0E00               	movlw	0
  7308   002AD0  6E57               	movwf	_TxBufReadCnt^0,c	;volatile
  7309   002AD2                     i2l3182:
  7310                           
  7311                           ;serial.c: 78:     return EUSART4TXbuf[TxBufReadCnt++];
  7312   002AD2  2A57               	incf	_TxBufReadCnt^0,f,c	;volatile
  7313   002AD4  0457               	decf	_TxBufReadCnt^0,w,c	;volatile
  7314   002AD6  6E01               	movwf	??_getCharFromTxBuf^0,c
  7315   002AD8  6A02               	clrf	(??_getCharFromTxBuf+1)^0,c
  7316   002ADA  0E00               	movlw	low _EUSART4TXbuf
  7317   002ADC  2401               	addwf	??_getCharFromTxBuf^0,w,c
  7318   002ADE  6ED9               	movwf	fsr2l,c
  7319   002AE0  0E03               	movlw	high _EUSART4TXbuf
  7320   002AE2  2002               	addwfc	(??_getCharFromTxBuf+1)^0,w,c
  7321   002AE4  6EDA               	movwf	fsr2h,c
  7322   002AE6  50DF               	movf	indf2,w,c
  7323   002AE8  0012               	return		;funcret
  7324   002AEA                     __end_of_getCharFromTxBuf:
  7325                           	callstack 0
  7326                           
  7327                           	psect	rparam
  7328   000000                     
  7329                           	psect	temp
  7330   00005A                     btemp:
  7331                           	callstack 0
  7332   00005A                     	ds	1
  7333   000000                     int$flags	set	btemp
  7334   000000                     wtemp8	set	btemp+1
  7335   000000                     ttemp5	set	btemp+1
  7336   000000                     ttemp6	set	btemp+4
  7337   000000                     ttemp7	set	btemp+8
  7338                           
  7339                           	psect	config
  7340                           
  7341                           ;Config register CONFIG1L @ 0x300000
  7342                           ;	External Oscillator mode Selection bits
  7343                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  7344                           ;	Power-up default value for COSC bits
  7345                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  7346   300000                     	org	3145728
  7347   300000  AA                 	db	170
  7348                           
  7349                           ;Config register CONFIG1H @ 0x300001
  7350                           ;	unspecified, using default values
  7351                           ;	Clock Out Enable bit
  7352                           ;	CLKOUTEN = 0x1, unprogrammed default
  7353                           ;	Clock Switch Enable bit
  7354                           ;	CSWEN = 0x1, unprogrammed default
  7355                           ;	Fail-Safe Clock Monitor Enable bit
  7356                           ;	FCMEN = 0x1, unprogrammed default
  7357   300001                     	org	3145729
  7358   300001  FF                 	db	255
  7359                           
  7360                           ;Config register CONFIG3L @ 0x300004
  7361                           ;	WDT Period Select bits
  7362                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  7363                           ;	WDT operating mode
  7364                           ;	WDTE = OFF, WDT Disabled
  7365   300004                     	org	3145732
  7366   300004  9F                 	db	159
  7367                           
  7368                           ;Config register CONFIG3H @ 0x300005
  7369                           ;	unspecified, using default values
  7370                           ;	WDT Window Select bits
  7371                           ;	WDTCWS = 0x7, unprogrammed default
  7372                           ;	WDT input clock selector
  7373                           ;	WDTCCS = 0x7, unprogrammed default
  7374   300005                     	org	3145733
  7375   300005  FF                 	db	255
  7376                           tosu	equ	0xFFF
  7377                           tosh	equ	0xFFE
  7378                           tosl	equ	0xFFD
  7379                           stkptr	equ	0xFFC
  7380                           pclatu	equ	0xFFB
  7381                           pclath	equ	0xFFA
  7382                           pcl	equ	0xFF9
  7383                           tblptru	equ	0xFF8
  7384                           tblptrh	equ	0xFF7
  7385                           tblptrl	equ	0xFF6
  7386                           tablat	equ	0xFF5
  7387                           prodh	equ	0xFF4
  7388                           prodl	equ	0xFF3
  7389                           indf0	equ	0xFEF
  7390                           postinc0	equ	0xFEE
  7391                           postdec0	equ	0xFED
  7392                           preinc0	equ	0xFEC
  7393                           plusw0	equ	0xFEB
  7394                           fsr0h	equ	0xFEA
  7395                           fsr0l	equ	0xFE9
  7396                           wreg	equ	0xFE8
  7397                           indf1	equ	0xFE7
  7398                           postinc1	equ	0xFE6
  7399                           postdec1	equ	0xFE5
  7400                           preinc1	equ	0xFE4
  7401                           plusw1	equ	0xFE3
  7402                           fsr1h	equ	0xFE2
  7403                           fsr1l	equ	0xFE1
  7404                           bsr	equ	0xFE0
  7405                           indf2	equ	0xFDF
  7406                           postinc2	equ	0xFDE
  7407                           postdec2	equ	0xFDD
  7408                           preinc2	equ	0xFDC
  7409                           plusw2	equ	0xFDB
  7410                           fsr2h	equ	0xFDA
  7411                           fsr2l	equ	0xFD9
  7412                           status	equ	0xFD8

Data Sizes:
    Strings     59
    Constant    0
    Data        233
    BSS         558
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     86      89
    BANK0           160    148     154
    BANK1           256      0     240
    BANK2           256      0     250
    BANK3           256     25     117
    BANK4           256      0     200
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    away@hist	PTR struct colorHistory size(2) Largest target is 200
		 -> hist(BANK4[200]), 

    bump@mL	PTR struct DC_motor size(1) Largest target is 10
		 -> color2instruction@mL(BANK0[8]), 

    bump@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRllllllhhhllllllll[1]), 

    bump@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRllllllhhhllllllll[1]), 

    bump@mR	PTR struct DC_motor size(1) Largest target is 10
		 -> color2instruction@mR(BANK0[8]), 

    bump@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRllllllhhhllllllll[1]), 

    bump@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRllllllhhhllllllll[1]), 

    color2instruction@hist	PTR struct colorHistory size(2) Largest target is 200
		 -> hist(BANK4[200]), 

    color_read_all@readVals	PTR struct RGBC size(1) Largest target is 16
		 -> calibCards@readVals(COMRAM[16]), checkColor@Vals(BANK0[16]), checkIncidence@tmp(COMRAM[16]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    goStraight@mL	PTR struct DC_motor size(1) Largest target is 10
		 -> color2instruction@mL(BANK0[8]), useSequence@mL(COMRAM[8]), 

    goStraight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRllllllhhhllllllll[1]), 

    goStraight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRllllllhhhllllllll[1]), 

    goStraight@mR	PTR struct DC_motor size(1) Largest target is 10
		 -> color2instruction@mR(BANK0[8]), useSequence@mR(COMRAM[8]), 

    goStraight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRllllllhhhllllllll[1]), 

    goStraight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRllllllhhhllllllll[1]), 

    home@hist	PTR struct colorHistory size(1) Largest target is 2
		 -> color2instruction@hist(BANK0[2]), 

    mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRllllllhhhllllllll[1]), 

    mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRllllllhhhllllllll[1]), 

    ?_mLinit$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRllllllhhhllllllll[1]), 

    ?_mLinit$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRllllllhhhllllllll[1]), 

    mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRllllllhhhllllllll[1]), 

    mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRllllllhhhllllllll[1]), 

    ?_mRinit$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRllllllhhhllllllll[1]), 

    ?_mRinit$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRllllllhhhllllllll[1]), 

    S275DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRllllllhhhllllllll[1]), 

    S275DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRllllllhhhllllllll[1]), 

    S2831$buffer	PTR unsigned char  size(2) Largest target is 0

    S2831$source	PTR const unsigned char  size(2) Largest target is 0

    sendStringSerial4@string	PTR unsigned char  size(2) Largest target is 50
		 -> serialColor@testColor(BANK0[50]), STR_1(CODE[19]), STR_10(CODE[7]), STR_11(CODE[2]), 
		 -> STR_12(CODE[2]), STR_2(CODE[7]), STR_4(CODE[5]), STR_6(CODE[7]), 
		 -> STR_8(CODE[6]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 10
		 -> color2instruction@mL(BANK0[8]), color2instruction@mR(BANK0[8]), dance@mL(COMRAM[8]), dance@mR(COMRAM[8]), 
		 -> turn@mL(COMRAM[8]), turn@mR(COMRAM[8]), useSequence@mL(COMRAM[8]), useSequence@mR(COMRAM[8]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRllllllhhhllllllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRllllllhhhllllllll[1]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 4
		 -> STR_3(CODE[4]), STR_5(CODE[4]), STR_7(CODE[4]), STR_9(CODE[4]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 50
		 -> serialColor@testColor(BANK0[50]), 

    stop@mL	PTR struct DC_motor size(1) Largest target is 10
		 -> useSequence@mL(COMRAM[8]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRllllllhhhllllllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRllllllhhhllllllll[1]), 

    stop@mR	PTR struct DC_motor size(1) Largest target is 10
		 -> useSequence@mR(COMRAM[8]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRllllllhhhllllllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRllllllhhhllllllll[1]), 

    storeSequence@history	PTR struct colorHistory size(1) Largest target is 2
		 -> color2instruction@hist(BANK0[2]), 

    turnLeft@mL	PTR struct DC_motor size(1) Largest target is 10
		 -> dance@mL(COMRAM[8]), turn@mL(COMRAM[8]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRllllllhhhllllllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRllllllhhhllllllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(1) Largest target is 10
		 -> dance@mR(COMRAM[8]), turn@mR(COMRAM[8]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRllllllhhhllllllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRllllllhhhllllllll[1]), 

    turnRight@mL	PTR struct DC_motor size(1) Largest target is 10
		 -> dance@mL(COMRAM[8]), turn@mL(COMRAM[8]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRllllllhhhllllllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRllllllhhhllllllll[1]), 

    turnRight@mR	PTR struct DC_motor size(1) Largest target is 10
		 -> dance@mR(COMRAM[8]), turn@mR(COMRAM[8]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRllllllhhhllllllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRllllllhhhllllllll[1]), 

    useSequence@history	PTR struct colorHistory size(1) Largest target is 2
		 -> color2instruction@hist(BANK0[2]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 4
		 -> STR_3(CODE[4]), STR_5(CODE[4]), STR_7(CODE[4]), STR_9(CODE[4]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 4
		 -> STR_3(CODE[4]), STR_5(CODE[4]), STR_7(CODE[4]), STR_9(CODE[4]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 4
		 -> STR_3(CODE[4]), STR_5(CODE[4]), STR_7(CODE[4]), STR_9(CODE[4]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _color2instruction->_serialColor
    _serialColor->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->___aldiv
    _sendStringSerial4->_sendCharSerial4
    _home->_useSequence
    _useSequence->_turn
    _turn->_turnLeft
    _turn->_turnRight
    _turnRight->_setMotorPWM
    _turnLeft->_setMotorPWM
    _stop->_setMotorPWM
    _goStraight->_setMotorPWM
    _checkIncidence->_color_read_all
    _bump->_setMotorPWM
    _setMotorPWM->___awdiv
    _checkWhite->_checkColor
    _checkColor->_color_read_all
    _color_read_all->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _abs->___almod
    ___aldiv->___wmul

Critical Paths under _HighISR in COMRAM

    _HighISR->_getCharFromTxBuf

Critical Paths under _main in BANK0

    _main->_away
    _away->_color2instruction
    _color2instruction->_checkColor
    _checkWhite->_checkColor

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_away

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                57    57      0   62077
                                            132 BANK0     16    16      0
                  _I2C_2_Master_Init
                    _Interrupts_init
                               _away
                   _color_click_init
                    _initCalibColors
                    _initDCmotorsPWM
                         _initUSART4
                             _mLinit
                             _mRinit
 ---------------------------------------------------------------------------------
 (1) _mRinit                                              16     8      8     219
                                              4 COMRAM    16     8      8
 ---------------------------------------------------------------------------------
 (1) _mLinit                                              16     8      8     219
                                              4 COMRAM    16     8      8
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      1     1      0      31
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initCalibColors                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     363
                                              8 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     363
                                              6 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _away                                                45    27     18   61177
                                            112 BANK0     20     2     18
                                              0 BANK3     25    25      0
                         _checkWhite
                  _color2instruction
 ---------------------------------------------------------------------------------
 (2) _color2instruction                                   45     2     43   55300
                                             67 BANK0     45     2     43
                               _bump
                         _checkColor
                     _checkIncidence
                         _goStraight
                               _home
                        _serialColor
                      _storeSequence
                         _triLED_tog
                               _turn
 ---------------------------------------------------------------------------------
 (3) _storeSequence                                       11     0     11     850
                                              4 COMRAM    11     0     11
 ---------------------------------------------------------------------------------
 (3) _serialColor                                         77    52     25    7852
                                             59 COMRAM    27     2     25
                                              0 BANK0     50    50      0
                    _sendCharSerial4
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) _sprintf                                             21    15      6    6122
                                             40 COMRAM    19    13      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (5) _vfprintf                                             4     1      3    5090
                                             36 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (6) _vfpfcnvrt                                           12     9      3    4629
                                             24 COMRAM    12     9      3
                            ___aldiv
                            ___almod
                                _abs
                              _fputc
 ---------------------------------------------------------------------------------
 (7) _fputc                                                8     5      3     957
                                              4 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (8) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (7) ___almod                                             10     2      8     613
                                              4 COMRAM    10     2      8
 ---------------------------------------------------------------------------------
 (4) _sendStringSerial4                                    2     0      2    1176
                                              5 COMRAM     2     0      2
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (5) _sendCharSerial4                                      1     1      0      31
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _home                                                17     0     17   19911
                                             67 COMRAM    17     0     17
                        _useSequence
 ---------------------------------------------------------------------------------
 (4) _useSequence                                         21     4     17   19548
                                             46 COMRAM    21     4     17
                         _goStraight
                               _stop
                               _turn
 ---------------------------------------------------------------------------------
 (3) _turn                                                20     0     20   10039
                                             26 COMRAM    20     0     20
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (4) _turnRight                                            8     4      4    3917
                                             18 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (4) _turnLeft                                             8     4      4    4187
                                             18 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (5) _stop                                                 2     0      2    3241
                                             18 COMRAM     2     0      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (5) _goStraight                                          12     6      6    5130
                                             18 COMRAM    10     4      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _checkIncidence                                      16    16      0    1166
                                             32 COMRAM    16    16      0
                     _color_read_all
                         _triLED_tog
 ---------------------------------------------------------------------------------
 (3) _bump                                                 6     2      4    3703
                                             18 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (5) _setMotorPWM                                          6     5      1    2813
                                             12 COMRAM     6     5      1
                            ___awdiv
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     685
                                              4 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _checkWhite                                          25    25      0    5483
                                             67 BANK0     25    25      0
                         _checkColor
                         _triLED_tog
 ---------------------------------------------------------------------------------
 (3) _checkColor                                         100    75     25    5251
                                             32 COMRAM    33     8     25
                                              0 BANK0     67    67      0
                            ___aldiv
                             ___wmul
                                _abs
                     _color_read_all
                         _triLED_tog
 ---------------------------------------------------------------------------------
 (3) _triLED_tog                                           1     1      0      93
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _color_read_all                                      24    23      1     984
                                              8 COMRAM    24    23      1
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      31
                                              5 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_Read                                    3     3      0      65
                                              5 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _abs                                                  4     2      2     543
                                             14 COMRAM     4     2      2
                            ___almod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1492
                                              4 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (7) ___aldiv                                             14     6      8    1345
                                             10 COMRAM    14     6      8
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _HighISR                                              2     2      0       0
                                              2 COMRAM     2     2      0
                   _getCharFromTxBuf
                      _isDataInTxBuf
 ---------------------------------------------------------------------------------
 (10) _isDataInTxBuf                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _getCharFromTxBuf                                    2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_2_Master_Init
   _Interrupts_init
   _away
     _checkWhite
       _checkColor
         ___aldiv
           ___wmul (ARG)
         ___wmul
         _abs
           ___almod (ARG)
         _color_read_all
           _I2C_2_Master_Read
             _I2C_2_Master_Idle
           _I2C_2_Master_RepStart
             _I2C_2_Master_Idle
           _I2C_2_Master_Start
             _I2C_2_Master_Idle
           _I2C_2_Master_Stop
             _I2C_2_Master_Idle
           _I2C_2_Master_Write
             _I2C_2_Master_Idle
         _triLED_tog
       _triLED_tog
     _color2instruction
       _bump
         _setMotorPWM
           ___awdiv
       _checkColor
       _checkIncidence
         _color_read_all
         _triLED_tog
       _goStraight
         _setMotorPWM
       _home
         _useSequence
           _goStraight
           _stop
             _setMotorPWM
           _turn
             _turnLeft
               _setMotorPWM
             _turnRight
               _setMotorPWM
       _serialColor
         _sendCharSerial4
         _sendStringSerial4
           _sendCharSerial4
         _sprintf
           _vfprintf
             _vfpfcnvrt
               ___aldiv
               ___almod
               _abs
               _fputc
                 _putch
       _storeSequence
       _triLED_tog
       _turn
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _initCalibColors
   _initDCmotorsPWM
   _initUSART4
   _mLinit
   _mRinit

 _HighISR (ROOT)
   _getCharFromTxBuf
   _isDataInTxBuf

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      58        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      C8      13       78.1%
BITBANK3           100      0       0      10        0.0%
BANK3              100     19      75      11       45.7%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      FA       9       97.7%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      F0       7       93.8%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     94      9A       5       96.2%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     56      59       1       94.7%
BITBIGSFRllllll     52      0       0      40        0.0%
BITBIGSFRllllll     37      0       0      42        0.0%
BITBIGSFRhhl        32      0       0      33        0.0%
BITBIGSFRllllll     2D      0       0      45        0.0%
BITBIGSFRllllll     2A      0       0      52        0.0%
BITBIGSFRllllll     26      0       0      56        0.0%
BITBIGSFRllllll     1E      0       0      46        0.0%
BITBIGSFRhlll       1D      0       0      37        0.0%
BITBIGSFRllllll     11      0       0      47        0.0%
BITBIGSFRllllll      F      0       0      54        0.0%
BITBIGSFRhlhh        E      0       0      34        0.0%
BITBIGSFRhhh         D      0       0      32        0.0%
BITBIGSFRllllll      9      0       0      53        0.0%
BITBIGSFRllllll      8      0       0      43        0.0%
BITBIGSFRllllll      6      0       0      55        0.0%
BITBIGSFRllllll      6      0       0      51        0.0%
BITBIGSFRllllll      5      0       0      50        0.0%
BITBIGSFRllllll      3      0       0      49        0.0%
BITBIGSFRllllll      2      0       0      41        0.0%
BITBIGSFRhllh        2      0       0      36        0.0%
BITBIGSFRllllll      1      0       0      44        0.0%
BITBIGSFRhlhl        1      0       0      35        0.0%
BITBIGSFRllllll      1      0       0      48        0.0%
BITBIGSFRlllllh      1      0       0      39        0.0%
BITBIGSFRllh         1      0       0      38        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     41A      57        0.0%
DATA                 0      0     41A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Tue Dec 12 10:36:06 2023

               _color_read_all 13E8                             l92 2B3A                             l95 2BCA  
                           l89 2A26                             l98 159E                   ___awdiv@sign 000A  
                  goStraight@i 001B            ___wmul@multiplicand 0007            color2instruction@mL 00A3  
          color2instruction@mR 00AB              ??_Interrupts_init 0005                            l101 251A  
                          l130 2906                            l116 1126                            l310 2238  
                          l150 1728                            l400 2862                            l137 2062  
                          l170 2800                            l307 1896                            l155 26C2  
                          l317 279E                            l173 2ABC                            l167 1B14  
                          l271 25B8                            l281 28BC                            l522 2B12  
                          l531 2C40                            l435 1C3C                            l611 29BE  
                          l540 2C20                            l525 2B3C                            l293 1E54  
                          l614 2B88                            l534 2C4A                            l278 19D6  
                          l382 2BAA                            l543 298A                            l391 2BE8  
                          l528 2B62                            l608 29F2                            l537 2C36  
                          l394 2BFC                            l706 214E                            l299 1D48  
                          l590 2C2C                            l693 1F60                            l845 23CC  
                 goStraight@mL 0013                            _abs 2A5C                   goStraight@mR 0014  
                          _red 01AF                            _pos 00F4                            wreg 0FE8  
                         ?_abs 000F                           l4000 28EE                           l1353 2948  
                         l4002 28FC                           l4010 1B48                           l1347 13E6  
                         l1292 2A8E                           l4100 1F7A                           l4020 1B98  
                         l4012 1B58                           l4004 1B16                           l1365 2476  
                         l4102 1FAE                           l4110 2058                           l4030 1BFA  
                         l4022 1BB4                           l4014 1B62                           l4006 1B26  
                         l4104 1FE2                           l4040 215A                           l1376 2C4C  
                         l4032 1C04                           l4024 1BC4                           l4016 1B7E  
                         l4008 1B2C                           l4120 15E0                           l4112 15A0  
                         l4200 2594                           l1289 2A76                           l4106 2016  
                         l4050 21A4                           l4042 2168                           l4034 1C14  
                         l4026 1BCE                           l4018 1B8E                           l4130 1650  
                         l4122 15F4                           l4114 15B2                           l4210 25AA  
                         l4202 2596                           l1299 2A5A                           l3500 1E78  
                         l4108 204A                           l4060 21DE                           l4052 21AC  
                         l4044 2180                           l4036 1C24                           l4028 1BEA  
                         l4132 1688                           l4124 1606                           l4140 16D6  
                         l4116 15C8                           l4212 25AC                           l4204 259E  
                         l4220 2B8E                           l3510 1EAE                           l3502 1E7C  
                         l3430 230A                           l4070 2216                           l4062 21EA  
                         l4054 21C4                           l4046 218E                           l4038 2150  
                         l4142 16F2                           l4134 168E                           l4126 1620  
                         l4118 15DC                           l4150 2A02                           l4214 25AE  
                         l4206 25A0                           l4230 2BA8                           l4222 2B98  
                         l4310 26D4                           l4302 26C4                           l4232 2C22  
                         l3520 1EF0                           l3512 1EC4                           l3504 1E8A  
                         l3440 2336                           l3432 230E                           l4072 221E  
                         l4064 21F4                           l4056 21C6                           l4048 219C  
                         l3600 1DA0                           l4080 2A90                           l4136 1698  
                         l4128 1634                           l4144 16FC                           l4160 27A4  
                         l4152 2A12                           l4216 25B6                           l4208 25A2  
                         l4224 2B9A                           l4240 29E0                           l4312 26D8  
                         l4304 26C8                           l3522 1F0E                           l3514 1ECC  
                         l3530 1F30                           l3506 1E9A                           l3450 2364  
                         l3442 233E                           l3434 231C                           l4074 2236  
                         l4066 2202                           l4058 21D0                           l3610 1DCA  
                         l3602 1DA8                           l4138 16C8                           l4162 27E6  
                         l4090 2AFE                           l4082 2AEA                           l4154 2A1C  
                         l4146 29F4                           l4170 2554                           l4226 2BA4  
                         l4218 2B8A                           l4234 29C0                           l4250 29AC  
                         l4314 26EA                           l4306 26CC                           l3532 1F40  
                         l3524 1F1E                           l3516 1ED8                           l3508 1E9E  
                         l3460 239E                           l3452 236C                           l3444 2342  
                         l3436 2324                           l4068 220E                           l3620 1DF8  
                         l3612 1DCC                           l3604 1DB0                           l3540 2068  
                         l4420 11B2                           l3700 1188                           l4076 2648  
                         l4092 2B00                           l4084 2AF4                           l4148 29F8  
                         l4156 2478                           l4180 256A                           l4172 2558  
                         l4164 251E                           l4228 2BA6                           l4236 29CC  
                         l4244 298C                           l4316 26FC                           l4308 26D0  
                         l3534 1F50                           l3526 1F20                           l3518 1EE6  
                         l3470 23C4                           l3462 23A0                           l3454 237A  
                         l3446 234A                           l3438 2328                           l3630 1E38  
                         l3622 1E06                           l3614 1DD6                           l3606 1DB2  
                         l3550 20A8                           l3542 2076                           l4422 1272  
                         l3702 118E                           l3710 11D0                           l4078 26BE  
                         l4158 27A0                           l4086 2AFA                           l4094 2BAE  
                         l4190 2580                           l4182 256E                           l4174 2560  
                         l4166 253A                           l4238 29D4                           l4246 2998  
                         l4318 2702                           l3528 1F2A                           l3800 2960  
                         l4096 1F62                           l3464 23A6                           l3456 2380  
                         l3448 235C                           l3480 18B2                           l3632 1E3A  
                         l3624 1E12                           l3616 1DE2                           l3608 1DC8  
                         l3640 1C54                           l3560 20FE                           l3552 20BE  
                         l3544 2086                           l3712 11F0                           l3720 125E  
                         l3704 1196                           l4088 2AFC                           l4192 2584  
                         l4184 2574                           l4176 2564                           l4168 254C  
                         l4248 29A0                           l3474 2A5C                           l3802 2986  
                         l4098 1F68                           l3458 2396                           l3466 23AC  
                         l3490 195A                           l3482 18F6                           l3626 1E1A  
                         l3618 1DEE                           l3634 1E3E                           l3650 1C9C  
                         l3642 1C62                           l3810 2BF8                           l3570 213E  
                         l3562 210E                           l3554 20C6                           l3546 208A  
                         l3538 2064                           l3730 12EE                           l3722 1288  
                         l3714 1214                           l4194 2588                           l4186 2578  
                         l4178 2566                           l3476 2A6A                           l3804 2988  
                         l3468 23BC                           l3492 199A                           l3484 1908  
                         l3628 1E22                           l3660 1CC0                           l3652 1CA4  
                         l3644 1C7A                           l3636 1C3E                           l3820 278A  
                         l3812 273C                           l3564 2118                           l3556 20D2  
                         l3548 2098                           l3580 23F8                           l3740 1368  
                         l3732 1322                           l3724 1292                           l3716 123A  
                         l3708 119E                           l4196 258A                           l4188 257C  
                         l3494 1E56                           l3910 1544                           l3902 2B16  
                         l3486 190C                           l3478 1898                           l3830 1780  
                         l3822 172A                           l3590 1D56                           l3670 1CFA  
                         l3662 1CCA                           l3654 1CA6                           l3646 1C86  
                         l3638 1C4A                           l3814 274E                           l3558 20E0  
                         l3566 211E                           l3582 2414                           l3574 23CE  
                         l3742 137E                           l3734 1338                           l3726 1296  
                         l4198 2592                           l3496 1E5A                           l3912 1562  
                         l3904 2B1C                           l3488 1940                           l3840 17B2  
                         l3832 178C                           l3824 173C                           l3592 1D60  
                         l3680 1D2E                           l3672 1D06                           l3664 1CD8  
                         l3656 1CBC                           l3648 1C94                           l3816 2760  
                         l3808 2BE8                           l3920 282C                           l3568 212E  
                         l3584 2446                           l3576 23DE                           l3744 139C  
                         l3736 1348                           l3728 12AA                           l3752 13C0  
                         l3498 1E68                           l3914 1580                           l3906 13E8  
                         l3850 17E8                           l3842 17BC                           l3834 178C  
                         l3826 1756                           l3594 1D6C                           l3674 1D0E  
                         l3666 1CE4                           l3658 1CBE                           l3682 1D32  
                         l3818 2778                           l3930 19FE                           l3922 2830  
                         l3578 23EE                           l3738 1358                           l3746 139E  
                         l3690 114E                           l3684 2B3C                           l3780 2C3C  
                         l3908 152E                           l3860 1826                           l3852 1800  
                         l3844 17CA                           l3836 1796                           l3828 176A  
                         l3596 1D84                           l3588 1D4A                           l3676 1D16  
                         l3668 1CEE                           l3940 1AFE                           l3932 1A3A  
                         l3924 19D8                           l3916 2802                           l3748 13B4  
                         l3692 1156                           l3686 2B4C                           l3790 2C42  
                         l3782 2C18                           l3870 185A                           l3862 1830  
                         l3854 1802                           l3846 17D8                           l3838 17A4  
                         l3598 1D92                           l3678 1D2C                           l3934 1A52  
                         l3926 19E0                           l3918 2806                           l3694 1164  
                         l3950 2A38                           l3960 2B80                           l3792 2C46  
                         l3784 2C1C                           l3872 1872                           l3864 183E  
                         l3856 180C                           l3848 17E0                           l3880 286E  
                         l3936 1AAA                           l3944 1B08                           l3696 1168  
                         l3688 1128                           l3952 2A40                           l3794 294C  
                         l3778 2C38                           l3786 2C2E                           l3970 0E5E  
                         l3874 1874                           l3866 184A                           l3858 181A  
                         l3890 28B4                           l3882 287C                           l3938 1AC2  
                         l3698 1172                           l3954 2A50                           l3946 2A28  
                         l3796 2950                           l3788 2C32                           l3980 108E  
                         l3964 0E3E                           l3868 1852                           l3876 1878  
                         l3884 2892                           l3892 2908                           l3948 2A30  
                         l3958 2B64                           l3798 2958                           l3990 1114  
                         l3982 10B4                           l3966 0E44                           l3886 28A0  
                         l3878 2864                           l3894 2910                           l3984 10C4  
                         l3976 0E66                           l3968 0E4C                           l3888 28AC  
                         l3896 2920                           l3986 10F2                           l3978 101E  
                         l3994 28BE                           l3898 2940                           l3988 10F8  
                         l3996 28C4                           l3998 28CC                           STR_1 0E01  
                         STR_2 0E14                           STR_3 0E34                           STR_4 0E2F  
                         STR_5 0E34                           STR_6 0E1B                           STR_7 0E34  
                         STR_8 0E29                           STR_9 0E34                           u3000 1896  
                         u3001 1892                           u3010 2940                           u3011 293C  
                         u3101 1A6E                           u3110 10B4                           u3111 10B0  
                         u3200 1FE2                   _BAUD4CONbits 0EE9                           u3025 2B24  
                         u3121 10EA                           u3201 1FDE                           u3026 2B26  
                         u3130 1114                           u3210 2016                           u3050 2828  
                         u3035 2B2E                           u3131 1110                           u3211 2012  
                         u3036 2B30                           u3220 204A                           u3060 2852  
                         u3045 2B38                           u3141 111E                           u3221 2046  
                         u3301 1706                           u3046 2B3A                           u2510 231C  
                         u3150 28EE                           u3070 2862                           u2511 2318  
                         u3151 28EA                           u3071 285E                           u3311 1718  
                         u3231 15AA                           u2600 1E68                           u2520 2336  
                         u3080 19FA                           u2601 1E64                           u2521 2332  
                         u3081 19F6                           u3161 2A9A                           u3057 281E  
                         u3241 15BC                           u3401 2512                           u3321 2482  
                         u2610 1E8A                           u2530 235C                           u3250 15DC  
                         _T2PR 0FBC                           u2611 1E86                           u2531 2358  
                         u3091 1A5C                           u3171 2AAC                           u3067 2848  
                         u3251 15D8                           u3411 27AE                           u3331 2494  
                         u2620 1EC4                           u2540 237A                           u2700 20FE  
                         u3260 15F4                           u2621 1EC0                           u3181 1F72  
                         u2541 2376                           u2701 20FA                           u3261 15F0  
                         u3421 27C0                           u3341 24A6                           u2630 1EE6  
                         u3190 1FAE                           u2550 2396                           u2710 212E  
                         u2631 1EE2                           u3191 1FAA                           u2551 2392  
                         u2711 212A                           u3271 15FE                           u3431 27D2  
                         u3351 24B8                           u2640 1F0E                           u2560 23BC  
                         u2720 23DE                           u2800 114E                           u2641 1F0A  
                         u2561 23B8                           u2721 23DA                           u2801 114A  
                         u3281 165A                           u3361 24CA                           u3441 29EA  
                         u3601 271E                           u2650 1F40                           u2570 2A6A  
                         u2730 23EE                           u2810 11F0                           u2651 1F3C  
                         u2571 2A66                           u2731 23EA                           u2811 11EC  
                         u3291 166C                           u3371 24DC                           u3451 29B6  
                         u2900 2974                           u2580 18B2                           u2660 2076  
                         u2740 2414                           u2820 1210                           u2901 296C  
                         u2581 18AE                           u2661 2072                           u2741 2410  
                         u2821 120C                           u3381 24EE                           u2590 195A  
                         u2670 2098                           u2750 2446                           u2830 12A6  
                         u2591 1956                           u2671 2094                           u2751 2442  
                         u2831 12A0                           u3391 2500                           u2760 1E54  
                         u2920 2BF8                           u2680 20BE                           u2840 12A8  
                         u2761 1E50                           u2921 2BF4                           u2681 20BA  
                         u3617 2A08                           u2770 1D48                           u2930 274E  
                         u2690 20E0                           u2850 1338                           u3707 1E2C  
                         u2771 1D44                           u2931 274A                           u2691 20DC  
                         u2851 1334                           u3627 27F2                           u3571 26E2  
                         u2780 2B4C                           u2940 2760                           u2860 1348  
                         u2781 2B48                           u3717 17F2                           u2941 275C  
                         u2861 1344                           u3637 1612                           u3581 26F4  
                         u2790 2B62                           u2918 2976                           u2950 278A  
                         u2870 1358                           u2791 2B5E                           u3727 1864  
                         u2951 2786                           u2871 1354                           u3647 1C2E  
                         u3591 270C                           u2960 173C                           u2880 1368  
                         u3737 21B6                           u2961 1738                           u3657 1A44  
                         u2881 1364                           u2970 1756                           u2890 13B0  
                         u3747 2228                           u2971 1752                           u3667 1AB4  
                         u2891 13AC                           u2980 176A                           u2981 1766  
                         u3677 1CB0                           u2990 1780                           u2991 177C  
                         u3687 1D20                           u3697 1DBC                           abs@a 000F  
                         _dbuf 033C                           _blue 017D                           _away 27A0  
                         _main 26C4                           _bump 2150                           _home 2A90  
                         _hist 0400                           _pink 014B                           _prec 01E6  
                         fsr0h 0FEA                           fsr1h 0FE2                           indf0 0FEF  
                         fsr2h 0FDA                           fsr0l 0FE9                           indf2 0FDF  
                         fsr1l 0FE1                           fsr2l 0FD9                           btemp 005A  
                         _stop 2864                           _turn 273C             useSequence@history 003F  
                         prodh 0FF4                           prodl 0FF3                           start 004E  
              ?_checkIncidence 0001                __end_of_HighISR 004E         __end_of_color_read_all 15A0  
                 ___param_bank 0000                          ??_abs 0011              checkColor@absDiff 007D  
        color2instruction@hist 00CC                __end_of___aldiv 1F62                          ?_away 00D0  
              __end_of___almod 2150                          ?_main 0001                          ?_bump 0013  
                        ?_home 0044                __end_of___awdiv 23CE                          STR_10 0E22  
                        STR_11 0E38                          STR_12 0E3A                          ?_stop 0013  
                        ?_turn 001B                ___awdiv@divisor 0007                          i2l422 2C14  
                        i2l415 2AE8                          i2l597 0042                ___awdiv@counter 0009  
                 vfpfcnvrt@fmt 001A        __end_of_sendCharSerial4 2BFE     __end_of_I2C_2_Master_Start 2C42  
   __end_of_I2C_2_Master_Write 2C22                          _flags 00F8                          _count 01EA  
                        _green 0196                          _fputc 23CE                          _width 01E4  
                        _putch 2C4C                          tablat 0FF5                          plusw0 0FEB  
                        plusw1 0FE3                          plusw2 0FDB                          ttemp5 005B  
                        ttemp6 005E                          ttemp7 0062                          status 0FD8  
                        wtemp8 005B                __end_of_sprintf 2A5C                   useSequence@i 0042  
        _I2C_2_Master_RepStart 2C42                ?_color_read_all 0009                __initialization 25BA  
                 __end_of_away 2802                   __end_of_main 273C                   __end_of_bump 223A  
                 __end_of_home 2ABE                   __end_of_stop 28BE                   __end_of_turn 27A0  
                       ??_away 00E2                         ??_main 0057                         ??_bump 0017  
                       ??_home 0055                         ??_stop 0015                         ??_turn 002F  
                __activetblptr 0003                   ?_setMotorPWM 000D                         ?_fputc 0005  
                       _CCPR1H 0FAA                         _CCPR2H 0FA6                         _CCPR3H 0F25  
                       _CCPR4H 0F21               ___awdiv@dividend 0005                         ?_putch 0001  
                       _RC0PPS 0E62                         _RC4REG 0EE3                         _RE2PPS 0E74  
                       _RD5PPS 0E6F                         _RC7PPS 0E69                         _RD6PPS 0E70  
                       _RE4PPS 0E76                         i2l2184 2BFE                         i2l3322 0012  
                       i2l3180 2ACE                         i2l3324 0022                         i2l3182 2AD2  
                       i2l3326 002A                         i2l3328 003E                         i2l3178 2ABE  
                       _RG6PPS 0E88                  vfpfcnvrt@done 001E                      ??_HighISR 0003  
     __end_of_color_click_init 2A28                         _RX4PPS 0E15                         _TX4REG 0EE4  
                 ?_serialColor 003C                  bump@direction 0015                   _CCPTMRS0bits 0FAD  
                 vfprintf@cfmt 0028               _getCharFromTxBuf 2ABE                      ??___aldiv 0013  
                    ??___almod 000D                         ___wmul 2B64                         _mLinit 29C0  
                       _blackC 02E1                      ??___awdiv 0009                         _mRinit 298C  
                       _minPow 01C8                         clear_0 2600                         clear_1 260C  
                       clear_2 2618                         clear_3 2624               ___awdiv@quotient 000B  
                       _orange 0132                         isa$std 0001                         away@mL 00D0  
                       away@mR 00D8                         _whiteC 0100                         main@mL 00E4  
                       main@mR 00EC                         _yellow 0164                         bump@mL 0013  
                       bump@mR 0014                         home@mL 0044                         home@mR 004C  
                       fputc@c 0005                   __mediumconst 0000                         tblptrh 0FF7  
                       tblptrl 0FF6                         tblptru 0FF8               ?_sendCharSerial4 0001  
                       putch@c 0001               __end_of_vfprintf 294A                  _newColorFound 01EC  
                       stop@mL 0013                         stop@mR 0014              ??_initDCmotorsPWM 0005  
                       turn@mL 001B                         turn@mR 0023                      ??_sprintf 002F  
             __end_of_turnLeft 1E56          __end_of_isDataInTxBuf 2C16                  _storeSequence 2648  
                   __accesstop 0060        __end_of__initialization 263E                  useSequence@mL 002F  
                useSequence@mR 0037         ?_I2C_2_Master_RepStart 0001                  ___rparam_used 0001  
                checkWhite@tmp 00A3                   ?_useSequence 002F                _Interrupts_init 2C22  
               __pcstackCOMRAM 0001                   __pidataBANK1 223A                   __pidataBANK2 2BCC  
            checkIncidence@tmp 0021                  __end_of_fputc 2478                  __end_of_putch 2C4E  
              triLED_tog@state 0005          storeSequence@polarity 0008                        ??_fputc 0008  
                   _checkColor 0E3E                        ??_putch 0005                     _checkWhite 1F62  
                   __pbssBANK0 00F4                     __pbssBANK1 01D0                     __pbssBANK2 0200  
                   __pbssBANK3 0300                     __pbssBANK4 0400               ??_checkIncidence 0021  
               ?_storeSequence 0005              _color_writetoaddr 2BAC                   _T2CLKCONbits 0FBF  
          goStraight@direction 0015             ?_color_writetoaddr 0007                        ?___wmul 0005  
                      ?_mLinit 0005                        ?_mRinit 0005            ??_color_writetoaddr 0008  
          checkColor@colorDiff 0093                     _goStraight 172A                        _SP4BRGH 0EE6  
                      _SP4BRGL 0EE5                        i2u96_40 2C12                        i2u96_41 2C0C  
                      i2u97_40 2C14                        _SSP2ADD 0ED6                        _SSP2BUF 0ED5  
          checkColor@currColor 0060        __end_of_Interrupts_init 2C2E         color_writetoaddr@value 0007  
               checkColor@Vals 0083                        _HighISR 0008               ??_color_read_all 000A  
    __end_of_color_writetoaddr 2BCC             _I2C_2_Master_Start 2C38                     _initUSART4 2B8A  
           _I2C_2_Master_Write 2C16     color2instruction@currColor 00B3                        __Hparam 0000  
                      __Lparam 0000        sendStringSerial4@string 0006                        ___aldiv 1E56  
                      ___almod 2064                        ___awdiv 230A            ?_I2C_2_Master_Start 0001  
          ?_I2C_2_Master_Write 0001                      ?_vfprintf 0025                   __psmallconst 0E00  
                 turn@polarity 002D                        __pcinit 25BA                        __ramtop 0E00  
                    ?_turnLeft 0013              ??_initCalibColors 0005                        __ptext0 26C4  
                      __ptext1 298C                        __ptext2 29C0                        __ptext3 2B8A  
                      __ptext4 251C                        __ptext5 2478                        __ptext6 29F4  
                      __ptext7 2BAC                        __ptext8 2AEA                        __ptext9 27A0  
            color_read_all@tmp 0011                        _maxPowL 01CC                        _maxPowR 01CA  
                    _T2CONbits 0FBD                   turnLeft@iter 0015               ___aldiv@dividend 000B  
                    _T2HLTbits 0FBE                  _RxBufWriteCnt 0059       __end_of_getCharFromTxBuf 2AEA  
              ??_storeSequence 0010                        _sprintf 2A28                    ?_checkColor 0021  
         ??_I2C_2_Master_Start 0006           ??_I2C_2_Master_Write 0006           end_of_initialization 263E  
                  ?_checkWhite 0001                        fputc@fp 0007              ?_color_click_init 0001  
                   _triLED_tog 2B14         color_read_all@readVals 0009             ??_color_click_init 0009  
            __end_of_vfpfcnvrt 13E8               ___aldiv@quotient 0015                        postdec1 0FE5  
                      postdec2 0FDD                        postinc0 0FEE                        postinc1 0FE6  
                      postinc2 0FDE               vfpfcnvrt@convarg 001F           serialColor@currColor 003C  
                   ??_vfprintf 0028                _incidenceThresh 01CE                _initDCmotorsPWM 251C  
                   ??_turnLeft 0017             setMotorPWM@negDuty 0012              __end_of_turnRight 1D4A  
                  ?_goStraight 0013                      _TRISAbits 0F81             setMotorPWM@posDuty 0011  
                    _TRISCbits 0F83                      _TRISDbits 0F84                      _TRISEbits 0F85  
                    _TRISFbits 0F86                      _TRISGbits 0F87                      _TRISHbits 0F88  
     color_writetoaddr@address 0008        ??_I2C_2_Master_RepStart 0006           serialColor@testColor 0060  
             ?_Interrupts_init 0001                    _CCP1CONbits 0FAB                   _EUSART4RXbuf 01D0  
                 _EUSART4TXbuf 0300                    _CCP2CONbits 0FA7                    _CCP3CONbits 0F26  
                  ?_initUSART4 0001                    _CCP4CONbits 0F22      sendCharSerial4@charToSend 0005  
       storeSequence@direction 000A                    vfpfcnvrt@ap 001B                    vfpfcnvrt@cp 0023  
                  vfpfcnvrt@fp 0019                 __end_of___wmul 2B8A                 __end_of_mLinit 29F4  
               __end_of_mRinit 29C0            start_initialization 25BA                    __end_of_abs 2A90  
                _TxBufWriteCnt 0058                    ?_triLED_tog 0001                    _calibColors 0200  
            _color2instruction 15A0             ?_color2instruction 00A3        __end_of_initDCmotorsPWM 25BA  
                  vfprintf@fmt 0026                       ??___wmul 0009                       ??_mLinit 000D  
                     ??_mRinit 000D                    __pdataBANK1 0100                    __pdataBANK2 02E1  
          ??_color2instruction 00CE          checkColor@prevAbsDiff 0079         storeSequence@squaresb4 000C  
                  __pbssCOMRAM 0057                  __pcstackBANK0 0060                  __pcstackBANK3 035C  
         storeSequence@history 0005      __end_of_color2instruction 172A                       ?_HighISR 0001  
         storeSequence@squares 000E             storeSequence@angle 0006                _initCalibColors 2478  
                    __pintcode 0008                       ?___aldiv 000B                       ?___almod 0005  
                     ?___awdiv 0005               ___almod@dividend 0005                   _readingColor 00F6  
         I2C_2_Master_Read@ack 0007           I2C_2_Master_Read@tmp 0008                    __smallconst 0E00  
            _I2C_2_Master_Idle 2B3C              _I2C_2_Master_Init 2AEA              _I2C_2_Master_Read 294A  
            _I2C_2_Master_Stop 2C2E                   _RxBufReadCnt 00F9                      _lightBlue 0119  
           ?_I2C_2_Master_Idle 0001             ?_I2C_2_Master_Init 0001             ?_I2C_2_Master_Read 0001  
                ??_setMotorPWM 000E             ?_I2C_2_Master_Stop 0001                   ??_checkColor 003A  
     initDCmotorsPWM@PWMperiod 0005                       ?_sprintf 0029              ?_getCharFromTxBuf 0001  
                 ??_checkWhite 0042             ??_getCharFromTxBuf 0001                ___aldiv@divisor 000F  
            _sendStringSerial4 2802            ??_I2C_2_Master_Idle 0005                ___aldiv@counter 0013  
          ??_I2C_2_Master_Init 0005            ??_I2C_2_Master_Read 0006                 ___wmul@product 0009  
                     _LATAbits 0F79            ??_I2C_2_Master_Stop 0006                       _LATCbits 0F7B  
                _isDataInTxBuf 2BFE                       _LATDbits 0F7C                       _LATEbits 0F7D  
                     _LATFbits 0F7E                       _LATGbits 0F7F                       _LATHbits 0F80  
           ?_sendStringSerial4 0006                       _PIE4bits 0E2D                  ??_serialColor 0055  
                     i2u221_40 2ACE                       i2u221_41 2ACA                    turnRight@mL 0013  
                  turnRight@mR 0014                       i2u250_40 003E                       i2u250_41 003A  
                     i2u249_40 0022                       i2u249_41 001E                       _PIR4bits 0E37  
             ?_initDCmotorsPWM 0001              ??_sendCharSerial4 0005                       _SSP2CON2 0EDA  
          ??_sendStringSerial4 0008                       _SSP2STAT 0ED8                      _vfpfcnvrt 1128  
           __end_of_checkColor 1128      __end_of_I2C_2_Master_Idle 2B64             __end_of_checkWhite 2064  
    __end_of_I2C_2_Master_Init 2B14      __end_of_I2C_2_Master_Read 298C              ___wmul@multiplier 0005  
    __end_of_I2C_2_Master_Stop 2C38                   setMotorPWM@m 000D    I2C_2_Master_Write@data_byte 0006  
                 ??_goStraight 0019                      _squaresb4 01E8                   _TxBufReadCnt 0057  
                    _turnRight 1C3E                     vfpfcnvrt@c 0024                      copy_data0 25CE  
                    copy_data1 25EE      __end_of_sendStringSerial4 2864          __end_of_storeSequence 26C4  
      __end_of_initCalibColors 251C                 ?_isDataInTxBuf 0001  __end_of_I2C_2_Master_RepStart 2C4C  
          __end_of_setMotorPWM 19D8                   ??_initUSART4 0005                  ??_useSequence 0040  
                     __Hrparam 0000                    checkColor@i 0081                     vfprintf@ap 0027  
                     __Lrparam 0000                     vfprintf@fp 0025             __end_of_goStraight 1898  
          __end_of_serialColor 1C3E                     ?_vfpfcnvrt 0019                     _ANSELDbits 0EA7  
                   sprintf@fmt 002A             __end_of_initUSART4 2BAC                     ?_turnRight 0013  
                     __ptext10 15A0                       __ptext11 2648                       __ptext20 2BE6  
                     __ptext12 1B16                       __ptext21 2A90                       __ptext13 2A28  
                     __ptext30 1898                       __ptext22 19D8                       __ptext14 2908  
                     __ptext31 230A                       __ptext23 273C                       __ptext15 1128  
                     __ptext40 294A                       __ptext32 1F62                       __ptext24 1C3E  
                     __ptext16 23CE                       __ptext41 2B3C                       __ptext33 0E3E  
                     __ptext25 1D4A                       __ptext17 2C4C                       __ptext42 2A5C  
                     __ptext34 2B14                       __ptext26 2864                       __ptext18 2064  
                     __ptext43 2B64                       __ptext35 13E8                       __ptext27 172A  
                     __ptext19 2802                       __ptext44 1E56                       __ptext36 2C16  
                     __ptext28 28BE                       __ptext45 2C22                       __ptext37 2C2E  
                     __ptext29 2150                       __ptext38 2C38                       __ptext47 2BFE  
                     __ptext39 2C42                       __ptext48 2ABE                   _SSP2CON1bits 0ED9  
                 _SSP2CON2bits 0EDA                ___almod@divisor 0009                       _finished 01EE  
                     mLinit@mL 000D                ___almod@counter 000D              goStraight@squares 0017  
                 ??_triLED_tog 0005                     turnLeft@mL 0013                     turnLeft@mR 0014  
                     mRinit@mR 000D                     turnRight@i 0019                       isa$xinst 0000  
                   _RC4STAbits 0EE7                       int$flags 005A                       away@hist 00E0  
                     _vfprintf 2908            __end_of_useSequence 1B16                       _turnLeft 1D4A  
                     home@hist 0054                     _INTCONbits 0FF2             __end_of_triLED_tog 2B3C  
                  _setMotorPWM 1898                ??_isDataInTxBuf 0001                       intlevel2 0000  
                    sprintf@ap 002F               ?_initCalibColors 0001                  turnRight@iter 0015  
                    turnLeft@i 0019                    _serialColor 1B16                 _checkIncidence 28BE  
                  ??_vfpfcnvrt 001C               _color_click_init 29F4                       sprintf@f 0030  
                     sprintf@s 0029                     _SSP2DATPPS 0E1D                     _SSP2CLKPPS 0E1C  
                away@currColor 035C                       turn@iter 002B                   ___aldiv@sign 0014  
                  ??_turnRight 0017                     _TX4STAbits 0EE8                _sendCharSerial4 2BE6  
                 ___almod@sign 000E         __end_of_checkIncidence 2908                    _useSequence 19D8  
