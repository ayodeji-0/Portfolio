

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Tue Dec 12 11:07:37 2023

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=2
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    61                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    62                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    63                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    64   000000                     
    65                           ; Generated 21/07/2023 GMT
    66                           ; 
    67                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    68                           ; All rights reserved.
    69                           ; 
    70                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    71                           ; 
    72                           ; Redistribution and use in source and binary forms, with or without modification, are
    73                           ; permitted provided that the following conditions are met:
    74                           ; 
    75                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    76                           ;        conditions and the following disclaimer.
    77                           ; 
    78                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    79                           ;        of conditions and the following disclaimer in the documentation and/or other
    80                           ;        materials provided with the distribution. Publication is not required when
    81                           ;        this file is used in an embedded application.
    82                           ; 
    83                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    84                           ;        software without specific prior written permission.
    85                           ; 
    86                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    87                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    88                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    89                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    90                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    91                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    92                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    93                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    94                           ; 
    95                           ; 
    96                           ; Code-generator required, PIC18F67K40 Definitions
    97                           ; 
    98                           ; SFR Addresses
    99   000000                     
   100                           	psect	idataBANK1
   101   001EE6                     __pidataBANK1:
   102                           	callstack 0
   103                           
   104                           ;initializer for _lightBlue
   105   001EE6  6C                 	db	108
   106   001EE7  2445               	dw	9285
   107   001EE9  0000               	dw	0
   108   001EEB  0D1B               	dw	3355
   109   001EED  0000               	dw	0
   110   001EEF  0E29               	dw	3625
   111   001EF1  0000               	dw	0
   112   001EF3  0A05               	dw	2565
   113   001EF5  0000               	dw	0
   114   001EF7  0002               	dw	2
   115   001EF9  0003               	dw	3
   116   001EFB  0001               	dw	1
   117   001EFD  0000               	dw	0
   118   001EFF  00                 	db	0
   119   001F00  00                 	db	0
   120                           
   121                           ;initializer for _orange
   122   001F01  6F                 	db	111
   123   001F02  28BA               	dw	10426
   124   001F04  0000               	dw	0
   125   001F06  1A27               	dw	6695
   126   001F08  0000               	dw	0
   127   001F0A  0991               	dw	2449
   128   001F0C  0000               	dw	0
   129   001F0E  076E               	dw	1902
   130   001F10  0000               	dw	0
   131   001F12  0002               	dw	2
   132   001F14  0003               	dw	3
   133   001F16  0000               	dw	0
   134   001F18  0000               	dw	0
   135   001F1A  00                 	db	0
   136   001F1B  00                 	db	0
   137                           
   138                           ;initializer for _pink
   139   001F1C  70                 	db	112
   140   001F1D  2F9E               	dw	12190
   141   001F1F  0000               	dw	0
   142   001F21  18DD               	dw	6365
   143   001F23  0000               	dw	0
   144   001F25  0E33               	dw	3635
   145   001F27  0000               	dw	0
   146   001F29  0ACD               	dw	2765
   147   001F2B  0000               	dw	0
   148   001F2D  0000               	dw	0
   149   001F2F  0002               	dw	2
   150   001F31  0000               	dw	0
   151   001F33  0001               	dw	1
   152   001F35  00                 	db	0
   153   001F36  00                 	db	0
   154                           
   155                           ;initializer for _yellow
   156   001F37  79                 	db	121
   157   001F38  3714               	dw	14100
   158   001F3A  0000               	dw	0
   159   001F3C  1E91               	dw	7825
   160   001F3E  0000               	dw	0
   161   001F40  1126               	dw	4390
   162   001F42  0000               	dw	0
   163   001F44  0A13               	dw	2579
   164   001F46  0000               	dw	0
   165   001F48  0000               	dw	0
   166   001F4A  0002               	dw	2
   167   001F4C  0000               	dw	0
   168   001F4E  0001               	dw	1
   169   001F50  00                 	db	0
   170   001F51  00                 	db	0
   171                           
   172                           ;initializer for _blue
   173   001F52  62                 	db	98
   174   001F53  0BF8               	dw	3064
   175   001F55  0000               	dw	0
   176   001F57  0423               	dw	1059
   177   001F59  0000               	dw	0
   178   001F5B  0402               	dw	1026
   179   001F5D  0000               	dw	0
   180   001F5F  03DC               	dw	988
   181   001F61  0000               	dw	0
   182   001F63  0002               	dw	2
   183   001F65  0004               	dw	4
   184   001F67  0000               	dw	0
   185   001F69  0000               	dw	0
   186   001F6B  00                 	db	0
   187   001F6C  00                 	db	0
   188                           
   189                           ;initializer for _green
   190   001F6D  67                 	db	103
   191   001F6E  21B1               	dw	8625
   192   001F70  0000               	dw	0
   193   001F72  0D52               	dw	3410
   194   001F74  0000               	dw	0
   195   001F76  0E4C               	dw	3660
   196   001F78  0000               	dw	0
   197   001F7A  0706               	dw	1798
   198   001F7C  0000               	dw	0
   199   001F7E  0002               	dw	2
   200   001F80  0002               	dw	2
   201   001F82  0001               	dw	1
   202   001F84  0000               	dw	0
   203   001F86  00                 	db	0
   204   001F87  00                 	db	0
   205                           
   206                           ;initializer for _red
   207   001F88  72                 	db	114
   208   001F89  1C7F               	dw	7295
   209   001F8B  0000               	dw	0
   210   001F8D  1761               	dw	5985
   211   001F8F  0000               	dw	0
   212   001F91  033E               	dw	830
   213   001F93  0000               	dw	0
   214   001F95  0442               	dw	1090
   215   001F97  0000               	dw	0
   216   001F99  0002               	dw	2
   217   001F9B  0002               	dw	2
   218   001F9D  0000               	dw	0
   219   001F9F  0000               	dw	0
   220   001FA1  00                 	db	0
   221   001FA2  00                 	db	0
   222                           
   223                           ;initializer for _minPow
   224   001FA3  000F               	dw	15
   225                           
   226                           ;initializer for _maxPow
   227   001FA5  001B               	dw	27
   228                           
   229                           ;initializer for _incidenceThresh
   230   001FA7  01F4               	dw	500
   231                           
   232                           	psect	idataBANK2
   233   002414                     __pidataBANK2:
   234                           	callstack 0
   235                           
   236                           ;initializer for _blackC
   237   002414  6B                 	db	107
   238   002415  0654               	dw	1620
   239   002417  0000               	dw	0
   240   002419  0306               	dw	774
   241   00241B  0000               	dw	0
   242   00241D  01DB               	dw	475
   243   00241F  0000               	dw	0
   244   002421  0153               	dw	339
   245   002423  0000               	dw	0
   246   002425  0000               	dw	0
   247   002427  0000               	dw	0
   248   002429  0000               	dw	0
   249   00242B  0000               	dw	0
   250   00242D  00                 	db	0
   251   00242E  00                 	db	0
   252                           
   253                           ;initializer for _whiteC
   254   00242F  77                 	db	119
   255   002430  3AFC               	dw	15100
   256   002432  0000               	dw	0
   257   002434  1C2A               	dw	7210
   258   002436  0000               	dw	0
   259   002438  1371               	dw	4977
   260   00243A  0000               	dw	0
   261   00243C  0E01               	dw	3585
   262   00243E  0000               	dw	0
   263   002440  0000               	dw	0
   264   002442  0002               	dw	2
   265   002444  0002               	dw	2
   266   002446  0000               	dw	0
   267   002448  00                 	db	0
   268   002449  00                 	db	0
   269   000000                     _TX4REG	set	3812
   270   000000                     _RC4STAbits	set	3815
   271   000000                     _SP4BRGH	set	3814
   272   000000                     _TRISFbits	set	3974
   273   000000                     _LATFbits	set	3966
   274   000000                     _LATHbits	set	3968
   275   000000                     _SSP2CON2bits	set	3802
   276   000000                     _RX4PPS	set	3605
   277   000000                     _RC0PPS	set	3682
   278   000000                     _RC7PPS	set	3689
   279   000000                     _RE2PPS	set	3700
   280   000000                     _LATAbits	set	3961
   281   000000                     _LATEbits	set	3965
   282   000000                     _LATGbits	set	3967
   283   000000                     _TRISAbits	set	3969
   284   000000                     _TRISEbits	set	3973
   285   000000                     _TRISGbits	set	3975
   286   000000                     _T2PR	set	4028
   287   000000                     _T2CONbits	set	4029
   288   000000                     _TRISHbits	set	3976
   289   000000                     _CCPR2H	set	4006
   290   000000                     _CCPR1H	set	4010
   291   000000                     _TRISCbits	set	3971
   292   000000                     _TRISDbits	set	3972
   293   000000                     _LATCbits	set	3963
   294   000000                     _LATDbits	set	3964
   295   000000                     _RE4PPS	set	3702
   296   000000                     _RG6PPS	set	3720
   297   000000                     _RD5PPS	set	3695
   298   000000                     _ANSELDbits	set	3751
   299   000000                     _SSP2ADD	set	3798
   300   000000                     _SSP2CON1bits	set	3801
   301   000000                     _RC4REG	set	3811
   302   000000                     _SP4BRGL	set	3813
   303   000000                     _TX4STAbits	set	3816
   304   000000                     _BAUD4CONbits	set	3817
   305   000000                     _CCPR4H	set	3873
   306   000000                     _CCPR3H	set	3877
   307   000000                     _INTCONbits	set	4082
   308   000000                     _T2CLKCONbits	set	4031
   309   000000                     _T2HLTbits	set	4030
   310   000000                     _CCP1CONbits	set	4011
   311   000000                     _CCPTMRS0bits	set	4013
   312   000000                     _CCP2CONbits	set	4007
   313   000000                     _CCP3CONbits	set	3878
   314   000000                     _CCP4CONbits	set	3874
   315   000000                     _SSP2CLKPPS	set	3612
   316   000000                     _SSP2DATPPS	set	3613
   317   000000                     _PIE4bits	set	3629
   318   000000                     _PIR4bits	set	3639
   319   000000                     _SSP2CON2	set	3802
   320   000000                     _SSP2STAT	set	3800
   321   000000                     _SSP2BUF	set	3797
   322   000000                     _RD6PPS	set	3696
   323                           
   324                           	psect	smallconst
   325   000E00                     __psmallconst:
   326                           	callstack 0
   327   000E00  00                 	db	0
   328   000E01  43                 	db	67	;'C'
   329   000E02  61                 	db	97	;'a'
   330   000E03  6C                 	db	108	;'l'
   331   000E04  69                 	db	105	;'i'
   332   000E05  62                 	db	98	;'b'
   333   000E06  72                 	db	114	;'r'
   334   000E07  61                 	db	97	;'a'
   335   000E08  74                 	db	116	;'t'
   336   000E09  69                 	db	105	;'i'
   337   000E0A  6E                 	db	110	;'n'
   338   000E0B  67                 	db	103	;'g'
   339   000E0C  20                 	db	32
   340   000E0D  63                 	db	99	;'c'
   341   000E0E  6F                 	db	111	;'o'
   342   000E0F  6C                 	db	108	;'l'
   343   000E10  6F                 	db	111	;'o'
   344   000E11  72                 	db	114	;'r'
   345   000E12  3A                 	db	58	;':'
   346   000E13  00                 	db	0
   347   000E14  4E                 	db	78	;'N'
   348   000E15  61                 	db	97	;'a'
   349   000E16  6D                 	db	109	;'m'
   350   000E17  65                 	db	101	;'e'
   351   000E18  3A                 	db	58	;':'
   352   000E19  20                 	db	32
   353   000E1A  00                 	db	0
   354   000E1B  47                 	db	71	;'G'
   355   000E1C  72                 	db	114	;'r'
   356   000E1D  65                 	db	101	;'e'
   357   000E1E  65                 	db	101	;'e'
   358   000E1F  6E                 	db	110	;'n'
   359   000E20  3A                 	db	58	;':'
   360   000E21  00                 	db	0
   361   000E22  43                 	db	67	;'C'
   362   000E23  6C                 	db	108	;'l'
   363   000E24  65                 	db	101	;'e'
   364   000E25  61                 	db	97	;'a'
   365   000E26  72                 	db	114	;'r'
   366   000E27  3A                 	db	58	;':'
   367   000E28  00                 	db	0
   368   000E29  42                 	db	66	;'B'
   369   000E2A  6C                 	db	108	;'l'
   370   000E2B  75                 	db	117	;'u'
   371   000E2C  65                 	db	101	;'e'
   372   000E2D  3A                 	db	58	;':'
   373   000E2E  00                 	db	0
   374   000E2F  52                 	db	82	;'R'
   375   000E30  65                 	db	101	;'e'
   376   000E31  64                 	db	100	;'d'
   377   000E32  3A                 	db	58	;':'
   378   000E33  00                 	db	0
   379   000E34                     STR_3:
   380   000E34  25                 	db	37
   381   000E35  6C                 	db	108	;'l'
   382   000E36  64                 	db	100	;'d'
   383   000E37  00                 	db	0
   384   000E38  0A                 	db	10
   385   000E39  00                 	db	0
   386   000E3A  0D                 	db	13
   387   000E3B  00                 	db	0
   388   000E3C  00                 	db	0	; dummy byte at the end
   389   000000                     
   390                           ; #config settings
   391                           
   392                           	psect	cinit
   393   0020EC                     __pcinit:
   394                           	callstack 0
   395   0020EC                     start_initialization:
   396                           	callstack 0
   397   0020EC                     __initialization:
   398                           	callstack 0
   399                           
   400                           ; Initialize objects allocated to BANK2 (54 bytes)
   401                           ; load TBLPTR registers with __pidataBANK2
   402   0020EC  0E14               	movlw	low __pidataBANK2
   403   0020EE  6EF6               	movwf	tblptrl,c
   404   0020F0  0E24               	movlw	high __pidataBANK2
   405   0020F2  6EF7               	movwf	tblptrh,c
   406   0020F4  0E00               	movlw	low (__pidataBANK2 shr (0+16))
   407   0020F6  6EF8               	movwf	tblptru,c
   408   0020F8  EE02  F03C         	lfsr	0,__pdataBANK2
   409   0020FC  EE10 F036          	lfsr	1,54
   410   002100                     copy_data0:
   411   002100  0009               	tblrd		*+
   412   002102  CFF5 FFEE          	movff	tablat,postinc0
   413   002106  50E5               	movf	postdec1,w,c
   414   002108  50E1               	movf	fsr1l,w,c
   415   00210A  E1FA               	bnz	copy_data0
   416                           
   417                           ; Initialize objects allocated to BANK1 (195 bytes)
   418                           ; load TBLPTR registers with __pidataBANK1
   419   00210C  0EE6               	movlw	low __pidataBANK1
   420   00210E  6EF6               	movwf	tblptrl,c
   421   002110  0E1E               	movlw	high __pidataBANK1
   422   002112  6EF7               	movwf	tblptrh,c
   423   002114  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   424   002116  6EF8               	movwf	tblptru,c
   425   002118  EE01  F000         	lfsr	0,__pdataBANK1
   426   00211C  EE10 F0C3          	lfsr	1,195
   427   002120                     copy_data1:
   428   002120  0009               	tblrd		*+
   429   002122  CFF5 FFEE          	movff	tablat,postinc0
   430   002126  50E5               	movf	postdec1,w,c
   431   002128  50E1               	movf	fsr1l,w,c
   432   00212A  E1FA               	bnz	copy_data1
   433                           
   434                           ; Clear objects allocated to BANK4 (200 bytes)
   435   00212C  EE04  F000         	lfsr	0,__pbssBANK4
   436   002130  0EC8               	movlw	200
   437   002132                     clear_0:
   438   002132  6AEE               	clrf	postinc0,c
   439   002134  06E8               	decf	wreg,f,c
   440   002136  E1FD               	bnz	clear_0
   441                           
   442                           ; Clear objects allocated to BANK3 (243 bytes)
   443   002138  EE03  F000         	lfsr	0,__pbssBANK3
   444   00213C  0EF3               	movlw	243
   445   00213E                     clear_1:
   446   00213E  6AEE               	clrf	postinc0,c
   447   002140  06E8               	decf	wreg,f,c
   448   002142  E1FD               	bnz	clear_1
   449                           
   450                           ; Clear objects allocated to BANK2 (60 bytes)
   451   002144  EE02  F000         	lfsr	0,__pbssBANK2
   452   002148  0E3C               	movlw	60
   453   00214A                     clear_2:
   454   00214A  6AEE               	clrf	postinc0,c
   455   00214C  06E8               	decf	wreg,f,c
   456   00214E  E1FD               	bnz	clear_2
   457                           
   458                           ; Clear objects allocated to BANK1 (30 bytes)
   459   002150  EE01  F0C3         	lfsr	0,__pbssBANK1
   460   002154  0E1E               	movlw	30
   461   002156                     clear_3:
   462   002156  6AEE               	clrf	postinc0,c
   463   002158  06E8               	decf	wreg,f,c
   464   00215A  E1FD               	bnz	clear_3
   465                           
   466                           ; Clear objects allocated to COMRAM (6 bytes)
   467   00215C  6A5A               	clrf	(__pbssCOMRAM+5)& (0+255),c
   468   00215E  6A59               	clrf	(__pbssCOMRAM+4)& (0+255),c
   469   002160  6A58               	clrf	(__pbssCOMRAM+3)& (0+255),c
   470   002162  6A57               	clrf	(__pbssCOMRAM+2)& (0+255),c
   471   002164  6A56               	clrf	(__pbssCOMRAM+1)& (0+255),c
   472   002166  6A55               	clrf	__pbssCOMRAM& (0+255),c
   473   002168                     end_of_initialization:
   474                           	callstack 0
   475   002168                     __end_of__initialization:
   476                           	callstack 0
   477   002168  905B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   478   00216A  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   479   00216C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   480   00216E  6EF8               	movwf	tblptru,c
   481   002170  0100               	movlb	0
   482   002172  EFF8  F010         	goto	_main	;jump to C main() function
   483                           
   484                           	psect	bssCOMRAM
   485   000055                     __pbssCOMRAM:
   486                           	callstack 0
   487   000055                     _pos:
   488                           	callstack 0
   489   000055                     	ds	2
   490   000057                     _TxBufReadCnt:
   491                           	callstack 0
   492   000057                     	ds	1
   493   000058                     _TxBufWriteCnt:
   494                           	callstack 0
   495   000058                     	ds	1
   496   000059                     _RxBufReadCnt:
   497                           	callstack 0
   498   000059                     	ds	1
   499   00005A                     _RxBufWriteCnt:
   500                           	callstack 0
   501   00005A                     	ds	1
   502                           
   503                           	psect	bssBANK1
   504   0001C3                     __pbssBANK1:
   505                           	callstack 0
   506   0001C3                     _EUSART4RXbuf:
   507                           	callstack 0
   508   0001C3                     	ds	20
   509   0001D7                     _squaresb4:
   510                           	callstack 0
   511   0001D7                     	ds	2
   512   0001D9                     _count:
   513                           	callstack 0
   514   0001D9                     	ds	2
   515   0001DB                     _newColorFound:
   516                           	callstack 0
   517   0001DB                     	ds	2
   518   0001DD                     _finished:
   519                           	callstack 0
   520   0001DD                     	ds	2
   521   0001DF                     _readingColor:
   522                           	callstack 0
   523   0001DF                     	ds	2
   524                           
   525                           	psect	dataBANK1
   526   000100                     __pdataBANK1:
   527                           	callstack 0
   528   000100                     _lightBlue:
   529                           	callstack 0
   530   000100                     	ds	27
   531   00011B                     _orange:
   532                           	callstack 0
   533   00011B                     	ds	27
   534   000136                     _pink:
   535                           	callstack 0
   536   000136                     	ds	27
   537   000151                     _yellow:
   538                           	callstack 0
   539   000151                     	ds	27
   540   00016C                     _blue:
   541                           	callstack 0
   542   00016C                     	ds	27
   543   000187                     _green:
   544                           	callstack 0
   545   000187                     	ds	27
   546   0001A2                     _red:
   547                           	callstack 0
   548   0001A2                     	ds	27
   549   0001BD                     _minPow:
   550                           	callstack 0
   551   0001BD                     	ds	2
   552   0001BF                     _maxPow:
   553                           	callstack 0
   554   0001BF                     	ds	2
   555   0001C1                     _incidenceThresh:
   556                           	callstack 0
   557   0001C1                     	ds	2
   558                           
   559                           	psect	bssBANK2
   560   000200                     __pbssBANK2:
   561                           	callstack 0
   562   000200                     _EUSART4TXbuf:
   563                           	callstack 0
   564   000200                     	ds	60
   565                           
   566                           	psect	dataBANK2
   567   00023C                     __pdataBANK2:
   568                           	callstack 0
   569   00023C                     _blackC:
   570                           	callstack 0
   571   00023C                     	ds	27
   572   000257                     _whiteC:
   573                           	callstack 0
   574   000257                     	ds	27
   575                           
   576                           	psect	bssBANK3
   577   000300                     __pbssBANK3:
   578                           	callstack 0
   579   000300                     _calibColors:
   580                           	callstack 0
   581   000300                     	ds	243
   582                           
   583                           	psect	bssBANK4
   584   000400                     __pbssBANK4:
   585                           	callstack 0
   586   000400                     _hist:
   587                           	callstack 0
   588   000400                     	ds	200
   589                           
   590                           	psect	cstackBANK1
   591   0001E1                     __pcstackBANK1:
   592                           	callstack 0
   593   0001E1                     away@currColor:
   594                           	callstack 0
   595                           
   596                           ; 27 bytes @ 0x0
   597   0001E1                     	ds	27
   598                           
   599                           	psect	cstackBANK0
   600   000060                     __pcstackBANK0:
   601                           	callstack 0
   602   000060                     checkColor@currColor:
   603                           	callstack 0
   604                           
   605                           ; 27 bytes @ 0x0
   606   000060                     	ds	27
   607   00007B                     checkColor@prevAbsDiff:
   608                           	callstack 0
   609                           
   610                           ; 4 bytes @ 0x1B
   611   00007B                     	ds	4
   612   00007F                     checkColor@absDiff:
   613                           	callstack 0
   614                           
   615                           ; 4 bytes @ 0x1F
   616   00007F                     	ds	4
   617   000083                     checkColor@i:
   618                           	callstack 0
   619                           
   620                           ; 2 bytes @ 0x23
   621   000083                     	ds	2
   622   000085                     checkColor@Vals:
   623                           	callstack 0
   624                           
   625                           ; 16 bytes @ 0x25
   626   000085                     	ds	16
   627   000095                     checkColor@colorDiff:
   628                           	callstack 0
   629                           
   630                           ; 16 bytes @ 0x35
   631   000095                     	ds	16
   632   0000A5                     color2instruction@mL:
   633                           	callstack 0
   634   0000A5                     checkWhite@tmp:
   635                           	callstack 0
   636                           
   637                           ; 27 bytes @ 0x45
   638   0000A5                     	ds	8
   639   0000AD                     color2instruction@mR:
   640                           	callstack 0
   641                           
   642                           ; 8 bytes @ 0x4D
   643   0000AD                     	ds	8
   644   0000B5                     color2instruction@currColor:
   645                           	callstack 0
   646                           
   647                           ; 27 bytes @ 0x55
   648   0000B5                     	ds	27
   649   0000D0                     color2instruction@hist:
   650                           	callstack 0
   651                           
   652                           ; 2 bytes @ 0x70
   653   0000D0                     	ds	2
   654   0000D2                     ??_color2instruction:
   655                           
   656                           ; 1 bytes @ 0x72
   657   0000D2                     	ds	2
   658   0000D4                     away@mL:
   659                           	callstack 0
   660                           
   661                           ; 8 bytes @ 0x74
   662   0000D4                     	ds	8
   663   0000DC                     away@mR:
   664                           	callstack 0
   665                           
   666                           ; 8 bytes @ 0x7C
   667   0000DC                     	ds	8
   668   0000E4                     away@hist:
   669                           	callstack 0
   670                           
   671                           ; 2 bytes @ 0x84
   672   0000E4                     	ds	2
   673   0000E6                     ??_away:
   674                           
   675                           ; 1 bytes @ 0x86
   676   0000E6                     	ds	2
   677   0000E8                     main@mL:
   678                           	callstack 0
   679                           
   680                           ; 8 bytes @ 0x88
   681   0000E8                     	ds	8
   682   0000F0                     main@mR:
   683                           	callstack 0
   684                           
   685                           ; 8 bytes @ 0x90
   686   0000F0                     	ds	8
   687                           
   688                           	psect	cstackCOMRAM
   689   000001                     __pcstackCOMRAM:
   690                           	callstack 0
   691   000001                     ??_getCharFromTxBuf:
   692   000001                     
   693                           ; 1 bytes @ 0x0
   694   000001                     	ds	2
   695   000003                     ??_HighISR:
   696                           
   697                           ; 1 bytes @ 0x2
   698   000003                     	ds	2
   699   000005                     ??_I2C_2_Master_Idle:
   700   000005                     ?_abs:
   701                           	callstack 0
   702   000005                     ?___wmul:
   703                           	callstack 0
   704   000005                     ?___awdiv:
   705                           	callstack 0
   706   000005                     ?_mLinit:
   707                           	callstack 0
   708   000005                     ?_mRinit:
   709                           	callstack 0
   710   000005                     triLED_tog@state:
   711                           	callstack 0
   712   000005                     storeSequence@history:
   713                           	callstack 0
   714   000005                     processSequence@history:
   715                           	callstack 0
   716   000005                     initDCmotorsPWM@PWMperiod:
   717                           	callstack 0
   718   000005                     ___wmul@multiplier:
   719                           	callstack 0
   720   000005                     ___awdiv@dividend:
   721                           	callstack 0
   722   000005                     abs@a:
   723                           	callstack 0
   724                           
   725                           ; 2 bytes @ 0x4
   726   000005                     	ds	1
   727   000006                     ??_I2C_2_Master_Read:
   728   000006                     ??_processSequence:
   729   000006                     I2C_2_Master_Write@data_byte:
   730                           	callstack 0
   731   000006                     storeSequence@angle:
   732                           	callstack 0
   733                           
   734                           ; 2 bytes @ 0x5
   735   000006                     	ds	1
   736   000007                     ??_abs:
   737   000007                     color_writetoaddr@value:
   738                           	callstack 0
   739   000007                     I2C_2_Master_Read@ack:
   740                           	callstack 0
   741   000007                     ___wmul@multiplicand:
   742                           	callstack 0
   743   000007                     ___awdiv@divisor:
   744                           	callstack 0
   745                           
   746                           ; 2 bytes @ 0x6
   747   000007                     	ds	1
   748   000008                     color_writetoaddr@address:
   749                           	callstack 0
   750   000008                     I2C_2_Master_Read@tmp:
   751                           	callstack 0
   752   000008                     storeSequence@polarity:
   753                           	callstack 0
   754                           
   755                           ; 2 bytes @ 0x7
   756   000008                     	ds	1
   757   000009                     ??_color_click_init:
   758   000009                     color_read_all@readVals:
   759                           	callstack 0
   760   000009                     ___awdiv@counter:
   761                           	callstack 0
   762   000009                     ___wmul@product:
   763                           	callstack 0
   764                           
   765                           ; 2 bytes @ 0x8
   766   000009                     	ds	1
   767   00000A                     ??_color_read_all:
   768   00000A                     ___awdiv@sign:
   769                           	callstack 0
   770   00000A                     storeSequence@direction:
   771                           	callstack 0
   772   00000A                     processSequence@i:
   773                           	callstack 0
   774                           
   775                           ; 2 bytes @ 0x9
   776   00000A                     	ds	1
   777   00000B                     ?___aldiv:
   778                           	callstack 0
   779   00000B                     ___awdiv@quotient:
   780                           	callstack 0
   781   00000B                     ___aldiv@dividend:
   782                           	callstack 0
   783                           
   784                           ; 4 bytes @ 0xA
   785   00000B                     	ds	1
   786   00000C                     storeSequence@squaresb4:
   787                           	callstack 0
   788                           
   789                           ; 2 bytes @ 0xB
   790   00000C                     	ds	1
   791   00000D                     setMotorPWM@m:
   792                           	callstack 0
   793   00000D                     mLinit@mL:
   794                           	callstack 0
   795   00000D                     mRinit@mR:
   796                           	callstack 0
   797                           
   798                           ; 8 bytes @ 0xC
   799   00000D                     	ds	1
   800   00000E                     ??_setMotorPWM:
   801   00000E                     storeSequence@squares:
   802                           	callstack 0
   803                           
   804                           ; 2 bytes @ 0xD
   805   00000E                     	ds	1
   806   00000F                     ___aldiv@divisor:
   807                           	callstack 0
   808                           
   809                           ; 4 bytes @ 0xE
   810   00000F                     	ds	1
   811   000010                     
   812                           ; 1 bytes @ 0xF
   813   000010                     	ds	1
   814   000011                     setMotorPWM@posDuty:
   815                           	callstack 0
   816   000011                     color_read_all@tmp:
   817                           	callstack 0
   818                           
   819                           ; 16 bytes @ 0x10
   820   000011                     	ds	1
   821   000012                     setMotorPWM@negDuty:
   822                           	callstack 0
   823                           
   824                           ; 1 bytes @ 0x11
   825   000012                     	ds	1
   826   000013                     stop@mL:
   827                           	callstack 0
   828   000013                     turnLeft@mL:
   829                           	callstack 0
   830   000013                     turnRight@mL:
   831                           	callstack 0
   832   000013                     goStraight@mL:
   833                           	callstack 0
   834   000013                     bump@mL:
   835                           	callstack 0
   836   000013                     ___aldiv@counter:
   837                           	callstack 0
   838                           
   839                           ; 1 bytes @ 0x12
   840   000013                     	ds	1
   841   000014                     stop@mR:
   842                           	callstack 0
   843   000014                     turnLeft@mR:
   844                           	callstack 0
   845   000014                     turnRight@mR:
   846                           	callstack 0
   847   000014                     goStraight@mR:
   848                           	callstack 0
   849   000014                     bump@mR:
   850                           	callstack 0
   851   000014                     ___aldiv@sign:
   852                           	callstack 0
   853                           
   854                           ; 1 bytes @ 0x13
   855   000014                     	ds	1
   856   000015                     turnLeft@iter:
   857                           	callstack 0
   858   000015                     turnRight@iter:
   859                           	callstack 0
   860   000015                     goStraight@direction:
   861                           	callstack 0
   862   000015                     bump@direction:
   863                           	callstack 0
   864   000015                     ___aldiv@quotient:
   865                           	callstack 0
   866                           
   867                           ; 4 bytes @ 0x14
   868   000015                     	ds	2
   869   000017                     ??_bump:
   870   000017                     ??_turnLeft:
   871   000017                     ??_turnRight:
   872   000017                     goStraight@squares:
   873                           	callstack 0
   874                           
   875                           ; 2 bytes @ 0x16
   876   000017                     	ds	2
   877   000019                     ??_goStraight:
   878   000019                     turnLeft@i:
   879                           	callstack 0
   880   000019                     turnRight@i:
   881                           	callstack 0
   882                           
   883                           ; 2 bytes @ 0x18
   884   000019                     	ds	2
   885   00001B                     goStraight@i:
   886                           	callstack 0
   887   00001B                     turn@mL:
   888                           	callstack 0
   889                           
   890                           ; 8 bytes @ 0x1A
   891   00001B                     	ds	6
   892   000021                     ?_checkColor:
   893                           	callstack 0
   894   000021                     checkIncidence@tmp:
   895                           	callstack 0
   896                           
   897                           ; 16 bytes @ 0x20
   898   000021                     	ds	2
   899   000023                     turn@mR:
   900                           	callstack 0
   901                           
   902                           ; 8 bytes @ 0x22
   903   000023                     	ds	8
   904   00002B                     turn@iter:
   905                           	callstack 0
   906                           
   907                           ; 2 bytes @ 0x2A
   908   00002B                     	ds	2
   909   00002D                     turn@polarity:
   910                           	callstack 0
   911                           
   912                           ; 2 bytes @ 0x2C
   913   00002D                     	ds	2
   914   00002F                     useSequence@mL:
   915                           	callstack 0
   916                           
   917                           ; 8 bytes @ 0x2E
   918   00002F                     	ds	8
   919   000037                     useSequence@mR:
   920                           	callstack 0
   921                           
   922                           ; 8 bytes @ 0x36
   923   000037                     	ds	5
   924   00003C                     ??_checkColor:
   925                           
   926                           ; 1 bytes @ 0x3B
   927   00003C                     	ds	3
   928   00003F                     useSequence@history:
   929                           	callstack 0
   930                           
   931                           ; 1 bytes @ 0x3E
   932   00003F                     	ds	1
   933   000040                     ??_useSequence:
   934                           
   935                           ; 1 bytes @ 0x3F
   936   000040                     	ds	2
   937   000042                     useSequence@i:
   938                           	callstack 0
   939                           
   940                           ; 2 bytes @ 0x41
   941   000042                     	ds	2
   942   000044                     home@mL:
   943                           	callstack 0
   944                           
   945                           ; 8 bytes @ 0x43
   946   000044                     	ds	8
   947   00004C                     home@mR:
   948                           	callstack 0
   949                           
   950                           ; 8 bytes @ 0x4B
   951   00004C                     	ds	8
   952   000054                     home@hist:
   953                           	callstack 0
   954                           
   955                           ; 1 bytes @ 0x53
   956   000054                     	ds	1
   957   000055                     
   958                           ; 1 bytes @ 0x54
   959 ;;
   960 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   961 ;;
   962 ;; *************** function _main *****************
   963 ;; Defined at:
   964 ;;		line 27 in file "main.c"
   965 ;; Parameters:    Size  Location     Type
   966 ;;		None
   967 ;; Auto vars:     Size  Location     Type
   968 ;;  currColor      27    0        struct color
   969 ;;  Vals           16    0        struct RGBC
   970 ;;  mR              8  144[BANK0 ] struct DC_motor
   971 ;;  mL              8  136[BANK0 ] struct DC_motor
   972 ;; Return value:  Size  Location     Type
   973 ;;                  1    wreg      void 
   974 ;; Registers used:
   975 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   976 ;; Tracked objects:
   977 ;;		On entry : 0/0
   978 ;;		On exit  : 0/0
   979 ;;		Unchanged: 0/0
   980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   982 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   984 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   985 ;;Total ram usage:       16 bytes
   986 ;; Hardware stack levels required when called: 10
   987 ;; This function calls:
   988 ;;		_I2C_2_Master_Init
   989 ;;		_Interrupts_init
   990 ;;		_away
   991 ;;		_color_click_init
   992 ;;		_initCalibColors
   993 ;;		_initDCmotorsPWM
   994 ;;		_initUSART4
   995 ;;		_mLinit
   996 ;;		_mRinit
   997 ;; This function is called by:
   998 ;;		Startup code after reset
   999 ;; This function uses a non-reentrant model
  1000 ;;
  1001                           
  1002                           	psect	text0
  1003   0021F0                     __ptext0:
  1004                           	callstack 0
  1005   0021F0                     _main:
  1006                           	callstack 21
  1007   0021F0                     
  1008                           ;main.c: 29:     initUSART4();
  1009   0021F0  EC0A  F013         	call	_initUSART4	;wreg free
  1010   0021F4                     
  1011                           ;main.c: 31:     Interrupts_init();
  1012   0021F4  EC3D  F013         	call	_Interrupts_init	;wreg free
  1013   0021F8                     
  1014                           ;main.c: 33:     I2C_2_Master_Init();
  1015   0021F8  ECBA  F012         	call	_I2C_2_Master_Init	;wreg free
  1016   0021FC                     
  1017                           ;main.c: 35:     color_click_init();
  1018   0021FC  EC59  F012         	call	_color_click_init	;wreg free
  1019   002200                     
  1020                           ;main.c: 37:     initCalibColors();
  1021   002200  ECD5  F00F         	call	_initCalibColors	;wreg free
  1022   002204                     
  1023                           ;main.c: 39:     DC_motor mL,mR;;main.c: 41:     mL = mLinit();
  1024   002204  EC3F  F012         	call	_mLinit	;wreg free
  1025   002208  EE20  F0E8         	lfsr	2,main@mL
  1026   00220C  0E07               	movlw	7
  1027   00220E                     u2901:
  1028   00220E  CFEB FFDB          	movff	plusw0,plusw2
  1029   002212  06E8               	decf	wreg,f,c
  1030   002214  E2FC               	bc	u2901
  1031   002216                     
  1032                           ;main.c: 42:     mR = mRinit();
  1033   002216  EC25  F012         	call	_mRinit	;wreg free
  1034   00221A  EE20  F0F0         	lfsr	2,main@mR
  1035   00221E  0E07               	movlw	7
  1036   002220                     u2911:
  1037   002220  CFEB FFDB          	movff	plusw0,plusw2
  1038   002224  06E8               	decf	wreg,f,c
  1039   002226  E2FC               	bc	u2911
  1040   002228                     
  1041                           ;main.c: 44:     initDCmotorsPWM(99);
  1042   002228  0E63               	movlw	99
  1043   00222A  EC27  F010         	call	_initDCmotorsPWM
  1044   00222E                     l3583:
  1045                           
  1046                           ;main.c: 72:         away(mL,mR,&hist);
  1047   00222E  EE20  F0E8         	lfsr	2,main@mL
  1048   002232  EE00  F0D4         	lfsr	0,away@mL
  1049   002236  0E07               	movlw	7
  1050   002238                     u2921:
  1051   002238  CFDB FFEB          	movff	plusw2,plusw0
  1052   00223C  06E8               	decf	wreg,f,c
  1053   00223E  E2FC               	bc	u2921
  1054   002240  EE20  F0F0         	lfsr	2,main@mR
  1055   002244  EE00  F0DC         	lfsr	0,away@mR
  1056   002248  0E07               	movlw	7
  1057   00224A                     u2931:
  1058   00224A  CFDB FFEB          	movff	plusw2,plusw0
  1059   00224E  06E8               	decf	wreg,f,c
  1060   002250  E2FC               	bc	u2931
  1061   002252  0E00               	movlw	low _hist
  1062   002254  0100               	movlb	0	; () banked
  1063   002256  6FE4               	movwf	away@hist& (0+255),b
  1064   002258  0E04               	movlw	high _hist
  1065   00225A  6FE5               	movwf	(away@hist+1)& (0+255),b
  1066   00225C  EC66  F011         	call	_away	;wreg free
  1067   002260  EF17  F011         	goto	l3583
  1068   002264  EF27  F000         	goto	start
  1069   002268                     __end_of_main:
  1070                           	callstack 0
  1071                           
  1072 ;; *************** function _mRinit *****************
  1073 ;; Defined at:
  1074 ;;		line 18 in file "breakup.c"
  1075 ;; Parameters:    Size  Location     Type
  1076 ;;		None
  1077 ;; Auto vars:     Size  Location     Type
  1078 ;;  mR              8   12[COMRAM] struct DC_motor
  1079 ;; Return value:  Size  Location     Type
  1080 ;;                  8    4[COMRAM] struct DC_motor
  1081 ;; Registers used:
  1082 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
  1083 ;; Tracked objects:
  1084 ;;		On entry : 0/0
  1085 ;;		On exit  : 0/0
  1086 ;;		Unchanged: 0/0
  1087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1088 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1089 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1091 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1092 ;;Total ram usage:       16 bytes
  1093 ;; Hardware stack levels used: 1
  1094 ;; Hardware stack levels required when called: 2
  1095 ;; This function calls:
  1096 ;;		Nothing
  1097 ;; This function is called by:
  1098 ;;		_main
  1099 ;; This function uses a non-reentrant model
  1100 ;;
  1101                           
  1102                           	psect	text1
  1103   00244A                     __ptext1:
  1104                           	callstack 0
  1105   00244A                     _mRinit:
  1106                           	callstack 28
  1107   00244A                     
  1108                           ;breakup.c: 20:     DC_motor mR;;breakup.c: 21:     mR.power=0;
  1109   00244A  0E00               	movlw	0
  1110   00244C  6E0D               	movwf	mRinit@mR^0,c
  1111                           
  1112                           ;breakup.c: 22:     mR.direction=1;
  1113   00244E  0E01               	movlw	1
  1114   002450  6E0E               	movwf	(mRinit@mR+1)^0,c
  1115                           
  1116                           ;breakup.c: 23:     mR.brakemode=1;
  1117   002452  0E01               	movlw	1
  1118   002454  6E0F               	movwf	(mRinit@mR+2)^0,c
  1119   002456                     
  1120                           ;breakup.c: 24:     mR.posDutyHighByte=(unsigned char *)(&CCPR3H);
  1121   002456  0E25               	movlw	37
  1122   002458  6E11               	movwf	(mRinit@mR+4)^0,c
  1123   00245A  0E0F               	movlw	15
  1124   00245C  6E12               	movwf	(mRinit@mR+5)^0,c
  1125   00245E                     
  1126                           ;breakup.c: 25:     mR.negDutyHighByte=(unsigned char *)(&CCPR4H);
  1127   00245E  0E21               	movlw	33
  1128   002460  6E13               	movwf	(mRinit@mR+6)^0,c
  1129   002462  0E0F               	movlw	15
  1130   002464  6E14               	movwf	(mRinit@mR+7)^0,c
  1131                           
  1132                           ;breakup.c: 26:     mR.PWMperiod=99;
  1133   002466  0E63               	movlw	99
  1134   002468  6E10               	movwf	(mRinit@mR+3)^0,c
  1135   00246A                     
  1136                           ;breakup.c: 28:     return mR;
  1137   00246A  EE20  F00D         	lfsr	2,mRinit@mR
  1138   00246E  EE00  F005         	lfsr	0,?_mRinit
  1139   002472  0E07               	movlw	7
  1140   002474                     u2781:
  1141   002474  CFDB FFEB          	movff	plusw2,plusw0
  1142   002478  06E8               	decf	wreg,f,c
  1143   00247A  E2FC               	bc	u2781
  1144   00247C  0012               	return		;funcret
  1145   00247E                     __end_of_mRinit:
  1146                           	callstack 0
  1147                           
  1148 ;; *************** function _mLinit *****************
  1149 ;; Defined at:
  1150 ;;		line 5 in file "breakup.c"
  1151 ;; Parameters:    Size  Location     Type
  1152 ;;		None
  1153 ;; Auto vars:     Size  Location     Type
  1154 ;;  mL              8   12[COMRAM] struct DC_motor
  1155 ;; Return value:  Size  Location     Type
  1156 ;;                  8    4[COMRAM] struct DC_motor
  1157 ;; Registers used:
  1158 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
  1159 ;; Tracked objects:
  1160 ;;		On entry : 0/0
  1161 ;;		On exit  : 0/0
  1162 ;;		Unchanged: 0/0
  1163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1164 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1165 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1167 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1168 ;;Total ram usage:       16 bytes
  1169 ;; Hardware stack levels used: 1
  1170 ;; Hardware stack levels required when called: 2
  1171 ;; This function calls:
  1172 ;;		Nothing
  1173 ;; This function is called by:
  1174 ;;		_main
  1175 ;; This function uses a non-reentrant model
  1176 ;;
  1177                           
  1178                           	psect	text2
  1179   00247E                     __ptext2:
  1180                           	callstack 0
  1181   00247E                     _mLinit:
  1182                           	callstack 28
  1183   00247E                     
  1184                           ;breakup.c: 7:     DC_motor mL;;breakup.c: 8:     mL.power=0;
  1185   00247E  0E00               	movlw	0
  1186   002480  6E0D               	movwf	mLinit@mL^0,c
  1187                           
  1188                           ;breakup.c: 9:     mL.direction=1;
  1189   002482  0E01               	movlw	1
  1190   002484  6E0E               	movwf	(mLinit@mL+1)^0,c
  1191                           
  1192                           ;breakup.c: 10:     mL.brakemode=1;
  1193   002486  0E01               	movlw	1
  1194   002488  6E0F               	movwf	(mLinit@mL+2)^0,c
  1195   00248A                     
  1196                           ;breakup.c: 11:     mL.posDutyHighByte=(unsigned char *)(&CCPR1H);
  1197   00248A  0EAA               	movlw	170
  1198   00248C  6E11               	movwf	(mLinit@mL+4)^0,c
  1199   00248E  0E0F               	movlw	15
  1200   002490  6E12               	movwf	(mLinit@mL+5)^0,c
  1201   002492                     
  1202                           ;breakup.c: 12:     mL.negDutyHighByte=(unsigned char *)(&CCPR2H);
  1203   002492  0EA6               	movlw	166
  1204   002494  6E13               	movwf	(mLinit@mL+6)^0,c
  1205   002496  0E0F               	movlw	15
  1206   002498  6E14               	movwf	(mLinit@mL+7)^0,c
  1207                           
  1208                           ;breakup.c: 13:     mL.PWMperiod=99;
  1209   00249A  0E63               	movlw	99
  1210   00249C  6E10               	movwf	(mLinit@mL+3)^0,c
  1211   00249E                     
  1212                           ;breakup.c: 15:     return mL;
  1213   00249E  EE20  F00D         	lfsr	2,mLinit@mL
  1214   0024A2  EE00  F005         	lfsr	0,?_mLinit
  1215   0024A6  0E07               	movlw	7
  1216   0024A8                     u2771:
  1217   0024A8  CFDB FFEB          	movff	plusw2,plusw0
  1218   0024AC  06E8               	decf	wreg,f,c
  1219   0024AE  E2FC               	bc	u2771
  1220   0024B0  0012               	return		;funcret
  1221   0024B2                     __end_of_mLinit:
  1222                           	callstack 0
  1223                           
  1224 ;; *************** function _initUSART4 *****************
  1225 ;; Defined at:
  1226 ;;		line 5 in file "serial.c"
  1227 ;; Parameters:    Size  Location     Type
  1228 ;;		None
  1229 ;; Auto vars:     Size  Location     Type
  1230 ;;		None
  1231 ;; Return value:  Size  Location     Type
  1232 ;;                  1    wreg      void 
  1233 ;; Registers used:
  1234 ;;		wreg, status,2
  1235 ;; Tracked objects:
  1236 ;;		On entry : 0/0
  1237 ;;		On exit  : 0/0
  1238 ;;		Unchanged: 0/0
  1239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1243 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1244 ;;Total ram usage:        0 bytes
  1245 ;; Hardware stack levels used: 1
  1246 ;; Hardware stack levels required when called: 2
  1247 ;; This function calls:
  1248 ;;		Nothing
  1249 ;; This function is called by:
  1250 ;;		_main
  1251 ;; This function uses a non-reentrant model
  1252 ;;
  1253                           
  1254                           	psect	text3
  1255   002614                     __ptext3:
  1256                           	callstack 0
  1257   002614                     _initUSART4:
  1258                           	callstack 28
  1259   002614                     
  1260                           ;serial.c: 9:     TRISCbits.TRISC1 = 1;
  1261   002614  8283               	bsf	131,1,c	;volatile
  1262                           
  1263                           ;serial.c: 10:     TRISCbits.TRISC0 = 1;
  1264   002616  8083               	bsf	131,0,c	;volatile
  1265   002618                     
  1266                           ;serial.c: 12:     RC0PPS = 0x12;
  1267   002618  0E12               	movlw	18
  1268   00261A  010E               	movlb	14	; () banked
  1269   00261C  6F62               	movwf	98,b	;volatile
  1270                           
  1271                           ;serial.c: 13:     RX4PPS = 0x11;
  1272   00261E  0E11               	movlw	17
  1273   002620  6F15               	movwf	21,b	;volatile
  1274   002622                     
  1275                           ; BSR set to: 14
  1276                           ;serial.c: 15:     BAUD4CONbits.BRG16 = 0;
  1277   002622  97E9               	bcf	233,3,b	;volatile
  1278   002624                     
  1279                           ; BSR set to: 14
  1280                           ;serial.c: 16:     TX4STAbits.BRGH = 0;
  1281   002624  95E8               	bcf	232,2,b	;volatile
  1282                           
  1283                           ;serial.c: 17:     SP4BRGL = 103;
  1284   002626  0E67               	movlw	103
  1285   002628  6FE5               	movwf	229,b	;volatile
  1286                           
  1287                           ;serial.c: 18:     SP4BRGH = 0;
  1288   00262A  0E00               	movlw	0
  1289   00262C  6FE6               	movwf	230,b	;volatile
  1290   00262E                     
  1291                           ; BSR set to: 14
  1292                           ;serial.c: 20:     RC4STAbits.CREN = 1;
  1293   00262E  89E7               	bsf	231,4,b	;volatile
  1294   002630                     
  1295                           ; BSR set to: 14
  1296                           ;serial.c: 21:     RC4STAbits.SPEN = 1;
  1297   002630  8FE7               	bsf	231,7,b	;volatile
  1298   002632                     
  1299                           ; BSR set to: 14
  1300                           ;serial.c: 22:     TX4STAbits.TXEN = 1;
  1301   002632  8BE8               	bsf	232,5,b	;volatile
  1302   002634                     
  1303                           ; BSR set to: 14
  1304   002634  0012               	return		;funcret
  1305   002636                     __end_of_initUSART4:
  1306                           	callstack 0
  1307                           
  1308 ;; *************** function _initDCmotorsPWM *****************
  1309 ;; Defined at:
  1310 ;;		line 6 in file "dc_motor.c"
  1311 ;; Parameters:    Size  Location     Type
  1312 ;;  PWMperiod       1    wreg     unsigned char 
  1313 ;; Auto vars:     Size  Location     Type
  1314 ;;  PWMperiod       1    4[COMRAM] unsigned char 
  1315 ;; Return value:  Size  Location     Type
  1316 ;;                  1    wreg      void 
  1317 ;; Registers used:
  1318 ;;		wreg, status,2
  1319 ;; Tracked objects:
  1320 ;;		On entry : 0/0
  1321 ;;		On exit  : 0/0
  1322 ;;		Unchanged: 0/0
  1323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1325 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1327 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1328 ;;Total ram usage:        1 bytes
  1329 ;; Hardware stack levels used: 1
  1330 ;; Hardware stack levels required when called: 2
  1331 ;; This function calls:
  1332 ;;		Nothing
  1333 ;; This function is called by:
  1334 ;;		_main
  1335 ;; This function uses a non-reentrant model
  1336 ;;
  1337                           
  1338                           	psect	text4
  1339   00204E                     __ptext4:
  1340                           	callstack 0
  1341   00204E                     _initDCmotorsPWM:
  1342                           	callstack 28
  1343                           
  1344                           ; BSR set to: 14
  1345                           ;incstack = 0
  1346                           ;initDCmotorsPWM@PWMperiod stored from wreg
  1347   00204E  6E05               	movwf	initDCmotorsPWM@PWMperiod^0,c
  1348   002050                     
  1349                           ;dc_motor.c: 6: void initDCmotorsPWM(unsigned char PWMperiod);dc_motor.c: 7: {;dc_motor.
      +                          c: 10:     LATDbits.LATD4=0;
  1350   002050  987C               	bcf	124,4,c	;volatile
  1351                           
  1352                           ;dc_motor.c: 11:     TRISDbits.TRISD4=0;
  1353   002052  9884               	bcf	132,4,c	;volatile
  1354                           
  1355                           ;dc_motor.c: 13:     LATHbits.LATH0=0;
  1356   002054  9080               	bcf	128,0,c	;volatile
  1357                           
  1358                           ;dc_motor.c: 14:     TRISHbits.TRISH0=0;
  1359   002056  9088               	bcf	136,0,c	;volatile
  1360                           
  1361                           ;dc_motor.c: 16:     LATFbits.LATF0=0;
  1362   002058  907E               	bcf	126,0,c	;volatile
  1363                           
  1364                           ;dc_motor.c: 17:     TRISFbits.TRISF0=0;
  1365   00205A  9086               	bcf	134,0,c	;volatile
  1366                           
  1367                           ;dc_motor.c: 20:     LATEbits.LATE2=0;
  1368   00205C  947D               	bcf	125,2,c	;volatile
  1369                           
  1370                           ;dc_motor.c: 21:     LATEbits.LATE4=0;
  1371   00205E  987D               	bcf	125,4,c	;volatile
  1372                           
  1373                           ;dc_motor.c: 22:     LATCbits.LATC7=0;
  1374   002060  9E7B               	bcf	123,7,c	;volatile
  1375                           
  1376                           ;dc_motor.c: 23:     LATGbits.LATG6=0;
  1377   002062  9C7F               	bcf	127,6,c	;volatile
  1378                           
  1379                           ;dc_motor.c: 25:     TRISEbits.TRISE2=0;
  1380   002064  9485               	bcf	133,2,c	;volatile
  1381                           
  1382                           ;dc_motor.c: 26:     TRISEbits.TRISE4=0;
  1383   002066  9885               	bcf	133,4,c	;volatile
  1384                           
  1385                           ;dc_motor.c: 27:     TRISCbits.TRISC7=0;
  1386   002068  9E83               	bcf	131,7,c	;volatile
  1387                           
  1388                           ;dc_motor.c: 28:     TRISGbits.TRISG6=0;
  1389   00206A  9C87               	bcf	135,6,c	;volatile
  1390   00206C                     
  1391                           ;dc_motor.c: 31:     RE2PPS=0x05;
  1392   00206C  0E05               	movlw	5
  1393   00206E  010E               	movlb	14	; () banked
  1394   002070  6F74               	movwf	116,b	;volatile
  1395                           
  1396                           ;dc_motor.c: 32:     RE4PPS=0x06;
  1397   002072  0E06               	movlw	6
  1398   002074  6F76               	movwf	118,b	;volatile
  1399                           
  1400                           ;dc_motor.c: 33:     RC7PPS=0x07;
  1401   002076  0E07               	movlw	7
  1402   002078  6F69               	movwf	105,b	;volatile
  1403                           
  1404                           ;dc_motor.c: 34:     RG6PPS=0x08;
  1405   00207A  0E08               	movlw	8
  1406   00207C  6F88               	movwf	136,b	;volatile
  1407   00207E                     
  1408                           ; BSR set to: 14
  1409                           ;dc_motor.c: 37:     T2CONbits.CKPS=0b0100;
  1410   00207E  50BD               	movf	189,w,c	;volatile
  1411   002080  0B8F               	andlw	-113
  1412   002082  0940               	iorlw	64
  1413   002084  6EBD               	movwf	189,c	;volatile
  1414   002086                     
  1415                           ; BSR set to: 14
  1416                           ;dc_motor.c: 38:     T2HLTbits.MODE=0b00000;
  1417   002086  0EE0               	movlw	-32
  1418   002088  16BE               	andwf	190,f,c	;volatile
  1419   00208A                     
  1420                           ; BSR set to: 14
  1421                           ;dc_motor.c: 39:     T2CLKCONbits.CS=0b0001;
  1422   00208A  50BF               	movf	191,w,c	;volatile
  1423   00208C  0BF0               	andlw	-16
  1424   00208E  0901               	iorlw	1
  1425   002090  6EBF               	movwf	191,c	;volatile
  1426   002092                     
  1427                           ; BSR set to: 14
  1428                           ;dc_motor.c: 43:     T2PR=PWMperiod;
  1429   002092  C005  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  1430   002096                     
  1431                           ; BSR set to: 14
  1432                           ;dc_motor.c: 44:     T2CONbits.ON=1;
  1433   002096  8EBD               	bsf	189,7,c	;volatile
  1434   002098                     
  1435                           ; BSR set to: 14
  1436                           ;dc_motor.c: 48:     CCPR1H=0;
  1437   002098  0E00               	movlw	0
  1438   00209A  6EAA               	movwf	170,c	;volatile
  1439   00209C                     
  1440                           ; BSR set to: 14
  1441                           ;dc_motor.c: 49:     CCPR2H=0;
  1442   00209C  0E00               	movlw	0
  1443   00209E  6EA6               	movwf	166,c	;volatile
  1444   0020A0                     
  1445                           ; BSR set to: 14
  1446                           ;dc_motor.c: 50:     CCPR3H=0;
  1447   0020A0  0E00               	movlw	0
  1448   0020A2  010F               	movlb	15	; () banked
  1449   0020A4  6F25               	movwf	37,b	;volatile
  1450   0020A6                     
  1451                           ; BSR set to: 15
  1452                           ;dc_motor.c: 51:     CCPR4H=0;
  1453   0020A6  0E00               	movlw	0
  1454   0020A8  6F21               	movwf	33,b	;volatile
  1455   0020AA                     
  1456                           ; BSR set to: 15
  1457                           ;dc_motor.c: 54:     CCPTMRS0bits.C1TSEL=0;
  1458   0020AA  0EFC               	movlw	-4
  1459   0020AC  16AD               	andwf	173,f,c	;volatile
  1460   0020AE                     
  1461                           ; BSR set to: 15
  1462                           ;dc_motor.c: 55:     CCPTMRS0bits.C2TSEL=0;
  1463   0020AE  0EF3               	movlw	-13
  1464   0020B0  16AD               	andwf	173,f,c	;volatile
  1465   0020B2                     
  1466                           ; BSR set to: 15
  1467                           ;dc_motor.c: 56:     CCPTMRS0bits.C3TSEL=0;
  1468   0020B2  0ECF               	movlw	-49
  1469   0020B4  16AD               	andwf	173,f,c	;volatile
  1470   0020B6                     
  1471                           ; BSR set to: 15
  1472                           ;dc_motor.c: 57:     CCPTMRS0bits.C4TSEL=0;
  1473   0020B6  0E3F               	movlw	-193
  1474   0020B8  16AD               	andwf	173,f,c	;volatile
  1475   0020BA                     
  1476                           ; BSR set to: 15
  1477                           ;dc_motor.c: 60:     CCP1CONbits.FMT=1;
  1478   0020BA  88AB               	bsf	171,4,c	;volatile
  1479   0020BC                     
  1480                           ; BSR set to: 15
  1481                           ;dc_motor.c: 61:     CCP1CONbits.CCP1MODE=0b1100;
  1482   0020BC  50AB               	movf	171,w,c	;volatile
  1483   0020BE  0BF0               	andlw	-16
  1484   0020C0  090C               	iorlw	12
  1485   0020C2  6EAB               	movwf	171,c	;volatile
  1486   0020C4                     
  1487                           ; BSR set to: 15
  1488                           ;dc_motor.c: 62:     CCP1CONbits.EN=1;
  1489   0020C4  8EAB               	bsf	171,7,c	;volatile
  1490   0020C6                     
  1491                           ; BSR set to: 15
  1492                           ;dc_motor.c: 64:     CCP2CONbits.FMT=1;
  1493   0020C6  88A7               	bsf	167,4,c	;volatile
  1494   0020C8                     
  1495                           ; BSR set to: 15
  1496                           ;dc_motor.c: 65:     CCP2CONbits.CCP2MODE=0b1100;
  1497   0020C8  50A7               	movf	167,w,c	;volatile
  1498   0020CA  0BF0               	andlw	-16
  1499   0020CC  090C               	iorlw	12
  1500   0020CE  6EA7               	movwf	167,c	;volatile
  1501   0020D0                     
  1502                           ; BSR set to: 15
  1503                           ;dc_motor.c: 66:     CCP2CONbits.EN=1;
  1504   0020D0  8EA7               	bsf	167,7,c	;volatile
  1505   0020D2                     
  1506                           ; BSR set to: 15
  1507                           ;dc_motor.c: 68:     CCP3CONbits.FMT=1;
  1508   0020D2  8926               	bsf	38,4,b	;volatile
  1509   0020D4                     
  1510                           ; BSR set to: 15
  1511                           ;dc_motor.c: 69:     CCP3CONbits.CCP3MODE=0b1100;
  1512   0020D4  5126               	movf	38,w,b	;volatile
  1513   0020D6  0BF0               	andlw	-16
  1514   0020D8  090C               	iorlw	12
  1515   0020DA  6F26               	movwf	38,b	;volatile
  1516   0020DC                     
  1517                           ; BSR set to: 15
  1518                           ;dc_motor.c: 70:     CCP3CONbits.EN=1;
  1519   0020DC  8F26               	bsf	38,7,b	;volatile
  1520   0020DE                     
  1521                           ; BSR set to: 15
  1522                           ;dc_motor.c: 72:     CCP4CONbits.FMT=1;
  1523   0020DE  8922               	bsf	34,4,b	;volatile
  1524   0020E0                     
  1525                           ; BSR set to: 15
  1526                           ;dc_motor.c: 73:     CCP4CONbits.CCP4MODE=0b1100;
  1527   0020E0  5122               	movf	34,w,b	;volatile
  1528   0020E2  0BF0               	andlw	-16
  1529   0020E4  090C               	iorlw	12
  1530   0020E6  6F22               	movwf	34,b	;volatile
  1531   0020E8                     
  1532                           ; BSR set to: 15
  1533                           ;dc_motor.c: 74:     CCP4CONbits.EN=1;
  1534   0020E8  8F22               	bsf	34,7,b	;volatile
  1535   0020EA                     
  1536                           ; BSR set to: 15
  1537   0020EA  0012               	return		;funcret
  1538   0020EC                     __end_of_initDCmotorsPWM:
  1539                           	callstack 0
  1540                           
  1541 ;; *************** function _initCalibColors *****************
  1542 ;; Defined at:
  1543 ;;		line 75 in file "color.c"
  1544 ;; Parameters:    Size  Location     Type
  1545 ;;		None
  1546 ;; Auto vars:     Size  Location     Type
  1547 ;;		None
  1548 ;; Return value:  Size  Location     Type
  1549 ;;                  1    wreg      void 
  1550 ;; Registers used:
  1551 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  1552 ;; Tracked objects:
  1553 ;;		On entry : 0/0
  1554 ;;		On exit  : 0/0
  1555 ;;		Unchanged: 0/0
  1556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1560 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1561 ;;Total ram usage:        0 bytes
  1562 ;; Hardware stack levels used: 1
  1563 ;; Hardware stack levels required when called: 2
  1564 ;; This function calls:
  1565 ;;		Nothing
  1566 ;; This function is called by:
  1567 ;;		_main
  1568 ;; This function uses a non-reentrant model
  1569 ;;
  1570                           
  1571                           	psect	text5
  1572   001FAA                     __ptext5:
  1573                           	callstack 0
  1574   001FAA                     _initCalibColors:
  1575                           	callstack 28
  1576   001FAA                     
  1577                           ;color.c: 76:  calibColors[0] = red;
  1578   001FAA  EE21  F0A2         	lfsr	2,_red
  1579   001FAE  EE13  F000         	lfsr	1,_calibColors
  1580   001FB2  0E1A               	movlw	26
  1581   001FB4                     u2651:
  1582   001FB4  CFDB FFE3          	movff	plusw2,plusw1
  1583   001FB8  06E8               	decf	wreg,f,c
  1584   001FBA  E2FC               	bc	u2651
  1585                           
  1586                           ;color.c: 77:     calibColors[1] = green;
  1587   001FBC  EE21  F087         	lfsr	2,_green
  1588   001FC0  EE13  F01B         	lfsr	1,_calibColors+27
  1589   001FC4  0E1A               	movlw	26
  1590   001FC6                     u2661:
  1591   001FC6  CFDB FFE3          	movff	plusw2,plusw1
  1592   001FCA  06E8               	decf	wreg,f,c
  1593   001FCC  E2FC               	bc	u2661
  1594                           
  1595                           ;color.c: 78:     calibColors[2] = blue;
  1596   001FCE  EE21  F06C         	lfsr	2,_blue
  1597   001FD2  EE13  F036         	lfsr	1,_calibColors+54
  1598   001FD6  0E1A               	movlw	26
  1599   001FD8                     u2671:
  1600   001FD8  CFDB FFE3          	movff	plusw2,plusw1
  1601   001FDC  06E8               	decf	wreg,f,c
  1602   001FDE  E2FC               	bc	u2671
  1603                           
  1604                           ;color.c: 79:     calibColors[3] = yellow;
  1605   001FE0  EE21  F051         	lfsr	2,_yellow
  1606   001FE4  EE13  F051         	lfsr	1,_calibColors+81
  1607   001FE8  0E1A               	movlw	26
  1608   001FEA                     u2681:
  1609   001FEA  CFDB FFE3          	movff	plusw2,plusw1
  1610   001FEE  06E8               	decf	wreg,f,c
  1611   001FF0  E2FC               	bc	u2681
  1612                           
  1613                           ;color.c: 80:     calibColors[4] = pink;
  1614   001FF2  EE21  F036         	lfsr	2,_pink
  1615   001FF6  EE13  F06C         	lfsr	1,_calibColors+108
  1616   001FFA  0E1A               	movlw	26
  1617   001FFC                     u2691:
  1618   001FFC  CFDB FFE3          	movff	plusw2,plusw1
  1619   002000  06E8               	decf	wreg,f,c
  1620   002002  E2FC               	bc	u2691
  1621                           
  1622                           ;color.c: 81:     calibColors[5] = orange;
  1623   002004  EE21  F01B         	lfsr	2,_orange
  1624   002008  EE13  F087         	lfsr	1,_calibColors+135
  1625   00200C  0E1A               	movlw	26
  1626   00200E                     u2701:
  1627   00200E  CFDB FFE3          	movff	plusw2,plusw1
  1628   002012  06E8               	decf	wreg,f,c
  1629   002014  E2FC               	bc	u2701
  1630                           
  1631                           ;color.c: 82:     calibColors[6] = lightBlue;
  1632   002016  EE21  F000         	lfsr	2,_lightBlue
  1633   00201A  EE13  F0A2         	lfsr	1,_calibColors+162
  1634   00201E  0E1A               	movlw	26
  1635   002020                     u2711:
  1636   002020  CFDB FFE3          	movff	plusw2,plusw1
  1637   002024  06E8               	decf	wreg,f,c
  1638   002026  E2FC               	bc	u2711
  1639                           
  1640                           ;color.c: 83:     calibColors[7] = whiteC;
  1641   002028  EE22  F057         	lfsr	2,_whiteC
  1642   00202C  EE13  F0BD         	lfsr	1,_calibColors+189
  1643   002030  0E1A               	movlw	26
  1644   002032                     u2721:
  1645   002032  CFDB FFE3          	movff	plusw2,plusw1
  1646   002036  06E8               	decf	wreg,f,c
  1647   002038  E2FC               	bc	u2721
  1648                           
  1649                           ;color.c: 84:     calibColors[8] = blackC;
  1650   00203A  EE22  F03C         	lfsr	2,_blackC
  1651   00203E  EE13  F0D8         	lfsr	1,_calibColors+216
  1652   002042  0E1A               	movlw	26
  1653   002044                     u2731:
  1654   002044  CFDB FFE3          	movff	plusw2,plusw1
  1655   002048  06E8               	decf	wreg,f,c
  1656   00204A  E2FC               	bc	u2731
  1657   00204C  0012               	return		;funcret
  1658   00204E                     __end_of_initCalibColors:
  1659                           	callstack 0
  1660                           
  1661 ;; *************** function _color_click_init *****************
  1662 ;; Defined at:
  1663 ;;		line 10 in file "color.c"
  1664 ;; Parameters:    Size  Location     Type
  1665 ;;		None
  1666 ;; Auto vars:     Size  Location     Type
  1667 ;;		None
  1668 ;; Return value:  Size  Location     Type
  1669 ;;                  1    wreg      void 
  1670 ;; Registers used:
  1671 ;;		wreg, status,2, status,0, cstack
  1672 ;; Tracked objects:
  1673 ;;		On entry : 0/0
  1674 ;;		On exit  : 0/0
  1675 ;;		Unchanged: 0/0
  1676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1678 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1679 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1680 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1681 ;;Total ram usage:        1 bytes
  1682 ;; Hardware stack levels used: 1
  1683 ;; Hardware stack levels required when called: 5
  1684 ;; This function calls:
  1685 ;;		_I2C_2_Master_Init
  1686 ;;		_color_writetoaddr
  1687 ;; This function is called by:
  1688 ;;		_main
  1689 ;; This function uses a non-reentrant model
  1690 ;;
  1691                           
  1692                           	psect	text6
  1693   0024B2                     __ptext6:
  1694                           	callstack 0
  1695   0024B2                     _color_click_init:
  1696                           	callstack 25
  1697   0024B2                     
  1698                           ;color.c: 13:     I2C_2_Master_Init();
  1699   0024B2  ECBA  F012         	call	_I2C_2_Master_Init	;wreg free
  1700   0024B6                     
  1701                           ;color.c: 16:   color_writetoaddr(0x00, 0x01);
  1702   0024B6  0E01               	movlw	1
  1703   0024B8  6E07               	movwf	color_writetoaddr@value^0,c
  1704   0024BA  0E00               	movlw	0
  1705   0024BC  EC1B  F013         	call	_color_writetoaddr
  1706   0024C0                     
  1707                           ;color.c: 17:     _delay((unsigned long)((3)*(64000000/4000.0)));
  1708   0024C0  0E3F               	movlw	63
  1709   0024C2  6E09               	movwf	??_color_click_init^0,c
  1710   0024C4  0E55               	movlw	85
  1711   0024C6                     u2947:
  1712   0024C6  2EE8               	decfsz	wreg,f,c
  1713   0024C8  D7FE               	bra	u2947
  1714   0024CA  2E09               	decfsz	??_color_click_init^0,f,c
  1715   0024CC  D7FC               	bra	u2947
  1716   0024CE  0000               	nop	
  1717   0024D0                     
  1718                           ;color.c: 20:  color_writetoaddr(0x00, 0x03);
  1719   0024D0  0E03               	movlw	3
  1720   0024D2  6E07               	movwf	color_writetoaddr@value^0,c
  1721   0024D4  0E00               	movlw	0
  1722   0024D6  EC1B  F013         	call	_color_writetoaddr
  1723   0024DA                     
  1724                           ;color.c: 23:  color_writetoaddr(0x01, 0xD5);
  1725   0024DA  0ED5               	movlw	213
  1726   0024DC  6E07               	movwf	color_writetoaddr@value^0,c
  1727   0024DE  0E01               	movlw	1
  1728   0024E0  EC1B  F013         	call	_color_writetoaddr
  1729   0024E4  0012               	return		;funcret
  1730   0024E6                     __end_of_color_click_init:
  1731                           	callstack 0
  1732                           
  1733 ;; *************** function _color_writetoaddr *****************
  1734 ;; Defined at:
  1735 ;;		line 39 in file "color.c"
  1736 ;; Parameters:    Size  Location     Type
  1737 ;;  address         1    wreg     unsigned char 
  1738 ;;  value           1    6[COMRAM] unsigned char 
  1739 ;; Auto vars:     Size  Location     Type
  1740 ;;  address         1    7[COMRAM] unsigned char 
  1741 ;; Return value:  Size  Location     Type
  1742 ;;                  1    wreg      void 
  1743 ;; Registers used:
  1744 ;;		wreg, status,2, status,0, cstack
  1745 ;; Tracked objects:
  1746 ;;		On entry : 0/0
  1747 ;;		On exit  : 0/0
  1748 ;;		Unchanged: 0/0
  1749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1750 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1751 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1753 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1754 ;;Total ram usage:        2 bytes
  1755 ;; Hardware stack levels used: 1
  1756 ;; Hardware stack levels required when called: 4
  1757 ;; This function calls:
  1758 ;;		_I2C_2_Master_Start
  1759 ;;		_I2C_2_Master_Stop
  1760 ;;		_I2C_2_Master_Write
  1761 ;; This function is called by:
  1762 ;;		_color_click_init
  1763 ;; This function uses a non-reentrant model
  1764 ;;
  1765                           
  1766                           	psect	text7
  1767   002636                     __ptext7:
  1768                           	callstack 0
  1769   002636                     _color_writetoaddr:
  1770                           	callstack 25
  1771                           
  1772                           ;incstack = 0
  1773                           ;color_writetoaddr@address stored from wreg
  1774   002636  6E08               	movwf	color_writetoaddr@address^0,c
  1775   002638                     
  1776                           ;color.c: 40:     I2C_2_Master_Start();
  1777   002638  EC48  F013         	call	_I2C_2_Master_Start	;wreg free
  1778                           
  1779                           ;color.c: 41:     I2C_2_Master_Write(0x52 | 0x00);
  1780   00263C  0E52               	movlw	82
  1781   00263E  EC37  F013         	call	_I2C_2_Master_Write
  1782                           
  1783                           ;color.c: 42:     I2C_2_Master_Write(0x80 | address);
  1784   002642  5008               	movf	color_writetoaddr@address^0,w,c
  1785   002644  0980               	iorlw	128
  1786   002646  EC37  F013         	call	_I2C_2_Master_Write
  1787                           
  1788                           ;color.c: 43:     I2C_2_Master_Write(value);
  1789   00264A  5007               	movf	color_writetoaddr@value^0,w,c
  1790   00264C  EC37  F013         	call	_I2C_2_Master_Write
  1791                           
  1792                           ;color.c: 44:     I2C_2_Master_Stop();
  1793   002650  EC43  F013         	call	_I2C_2_Master_Stop	;wreg free
  1794   002654  0012               	return		;funcret
  1795   002656                     __end_of_color_writetoaddr:
  1796                           	callstack 0
  1797                           
  1798 ;; *************** function _I2C_2_Master_Init *****************
  1799 ;; Defined at:
  1800 ;;		line 4 in file "i2c.c"
  1801 ;; Parameters:    Size  Location     Type
  1802 ;;		None
  1803 ;; Auto vars:     Size  Location     Type
  1804 ;;		None
  1805 ;; Return value:  Size  Location     Type
  1806 ;;                  1    wreg      void 
  1807 ;; Registers used:
  1808 ;;		wreg, status,2
  1809 ;; Tracked objects:
  1810 ;;		On entry : 0/0
  1811 ;;		On exit  : 0/0
  1812 ;;		Unchanged: 0/0
  1813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1815 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1817 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1818 ;;Total ram usage:        0 bytes
  1819 ;; Hardware stack levels used: 1
  1820 ;; Hardware stack levels required when called: 2
  1821 ;; This function calls:
  1822 ;;		Nothing
  1823 ;; This function is called by:
  1824 ;;		_color_click_init
  1825 ;;		_main
  1826 ;; This function uses a non-reentrant model
  1827 ;;
  1828                           
  1829                           	psect	text8
  1830   002574                     __ptext8:
  1831                           	callstack 0
  1832   002574                     _I2C_2_Master_Init:
  1833                           	callstack 27
  1834   002574                     
  1835                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  1836   002574  010E               	movlb	14	; () banked
  1837   002576  51D9               	movf	217,w,b	;volatile
  1838   002578  0BF0               	andlw	-16
  1839   00257A  0908               	iorlw	8
  1840   00257C  6FD9               	movwf	217,b	;volatile
  1841   00257E                     
  1842                           ; BSR set to: 14
  1843                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  1844   00257E  8BD9               	bsf	217,5,b	;volatile
  1845                           
  1846                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  1847   002580  0E9F               	movlw	159
  1848   002582  6FD6               	movwf	214,b	;volatile
  1849   002584                     
  1850                           ; BSR set to: 14
  1851                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  1852   002584  8A84               	bsf	132,5,c	;volatile
  1853   002586                     
  1854                           ; BSR set to: 14
  1855                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  1856   002586  8C84               	bsf	132,6,c	;volatile
  1857   002588                     
  1858                           ; BSR set to: 14
  1859                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  1860   002588  9BA7               	bcf	167,5,b	;volatile
  1861   00258A                     
  1862                           ; BSR set to: 14
  1863                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  1864   00258A  9DA7               	bcf	167,6,b	;volatile
  1865                           
  1866                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  1867   00258C  0E1D               	movlw	29
  1868   00258E  6F1D               	movwf	29,b	;volatile
  1869                           
  1870                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  1871   002590  0E1E               	movlw	30
  1872   002592  6F1C               	movwf	28,b	;volatile
  1873                           
  1874                           ;i2c.c: 18:   RD5PPS=0x1C;
  1875   002594  0E1C               	movlw	28
  1876   002596  6F6F               	movwf	111,b	;volatile
  1877                           
  1878                           ;i2c.c: 19:   RD6PPS=0x1B;
  1879   002598  0E1B               	movlw	27
  1880   00259A  6F70               	movwf	112,b	;volatile
  1881   00259C                     
  1882                           ; BSR set to: 14
  1883   00259C  0012               	return		;funcret
  1884   00259E                     __end_of_I2C_2_Master_Init:
  1885                           	callstack 0
  1886                           
  1887 ;; *************** function _away *****************
  1888 ;; Defined at:
  1889 ;;		line 319 in file "color.c"
  1890 ;; Parameters:    Size  Location     Type
  1891 ;;  mL              8  116[BANK0 ] struct DC_motor
  1892 ;;  mR              8  124[BANK0 ] struct DC_motor
  1893 ;;  hist            2  132[BANK0 ] PTR struct colorHistory
  1894 ;;		 -> hist(200), 
  1895 ;; Auto vars:     Size  Location     Type
  1896 ;;  currColor      27    0[BANK1 ] struct color
  1897 ;; Return value:  Size  Location     Type
  1898 ;;                  1    wreg      void 
  1899 ;; Registers used:
  1900 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1901 ;; Tracked objects:
  1902 ;;		On entry : 0/0
  1903 ;;		On exit  : 0/0
  1904 ;;		Unchanged: 0/0
  1905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1906 ;;      Params:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1907 ;;      Locals:         0       0      27       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1908 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1909 ;;      Totals:         0      20      27       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1910 ;;Total ram usage:       47 bytes
  1911 ;; Hardware stack levels used: 1
  1912 ;; Hardware stack levels required when called: 9
  1913 ;; This function calls:
  1914 ;;		_checkWhite
  1915 ;;		_color2instruction
  1916 ;; This function is called by:
  1917 ;;		_main
  1918 ;; This function uses a non-reentrant model
  1919 ;;
  1920                           
  1921                           	psect	text9
  1922   0022CC                     __ptext9:
  1923                           	callstack 0
  1924   0022CC                     _away:
  1925                           	callstack 21
  1926   0022CC                     
  1927                           ;color.c: 320:  color currColor;;color.c: 321:  checkWhite();
  1928   0022CC  ECAF  F00D         	call	_checkWhite	;wreg free
  1929                           
  1930                           ;color.c: 323:  color2instruction(mL,mR,currColor,hist);
  1931   0022D0  EE20  F0D4         	lfsr	2,away@mL
  1932   0022D4  EE00  F0A5         	lfsr	0,color2instruction@mL
  1933   0022D8  0E07               	movlw	7
  1934   0022DA                     u2741:
  1935   0022DA  CFDB FFEB          	movff	plusw2,plusw0
  1936   0022DE  06E8               	decf	wreg,f,c
  1937   0022E0  E2FC               	bc	u2741
  1938   0022E2  EE20  F0DC         	lfsr	2,away@mR
  1939   0022E6  EE00  F0AD         	lfsr	0,color2instruction@mR
  1940   0022EA  0E07               	movlw	7
  1941   0022EC                     u2751:
  1942   0022EC  CFDB FFEB          	movff	plusw2,plusw0
  1943   0022F0  06E8               	decf	wreg,f,c
  1944   0022F2  E2FC               	bc	u2751
  1945   0022F4  EE21  F0E1         	lfsr	2,away@currColor
  1946   0022F8  EE00  F0B5         	lfsr	0,color2instruction@currColor
  1947   0022FC  0E1A               	movlw	26
  1948   0022FE                     u2761:
  1949   0022FE  CFDB FFEB          	movff	plusw2,plusw0
  1950   002302  06E8               	decf	wreg,f,c
  1951   002304  E2FC               	bc	u2761
  1952   002306  C0E4  F0D0         	movff	away@hist,color2instruction@hist
  1953   00230A  C0E5  F0D1         	movff	away@hist+1,color2instruction@hist+1
  1954   00230E  EC70  F009         	call	_color2instruction	;wreg free
  1955   002312                     
  1956                           ;color.c: 324:  _delay((unsigned long)((2000)*(64000000/4000.0)));
  1957   002312  0EA3               	movlw	163
  1958   002314  0100               	movlb	0	; () banked
  1959   002316  6FE7               	movwf	(??_away+1)& (0+255),b
  1960   002318  0E57               	movlw	87
  1961   00231A  6FE6               	movwf	??_away& (0+255),b
  1962   00231C  0E02               	movlw	2
  1963   00231E                     u2957:
  1964   00231E  2EE8               	decfsz	wreg,f,c
  1965   002320  D7FE               	bra	u2957
  1966   002322  2FE6               	decfsz	??_away& (0+255),f,b
  1967   002324  D7FC               	bra	u2957
  1968   002326  2FE7               	decfsz	(??_away+1)& (0+255),f,b
  1969   002328  D7FA               	bra	u2957
  1970   00232A  0000               	nop	
  1971   00232C  0012               	return		;funcret
  1972   00232E                     __end_of_away:
  1973                           	callstack 0
  1974                           
  1975 ;; *************** function _color2instruction *****************
  1976 ;; Defined at:
  1977 ;;		line 212 in file "color.c"
  1978 ;; Parameters:    Size  Location     Type
  1979 ;;  mL              8   69[BANK0 ] struct DC_motor
  1980 ;;  mR              8   77[BANK0 ] struct DC_motor
  1981 ;;  currColor      27   85[BANK0 ] struct color
  1982 ;;  hist            2  112[BANK0 ] PTR struct colorHistory
  1983 ;;		 -> hist(200), 
  1984 ;; Auto vars:     Size  Location     Type
  1985 ;;		None
  1986 ;; Return value:  Size  Location     Type
  1987 ;;                  1    wreg      void 
  1988 ;; Registers used:
  1989 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1990 ;; Tracked objects:
  1991 ;;		On entry : 0/0
  1992 ;;		On exit  : 0/0
  1993 ;;		Unchanged: 0/0
  1994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1995 ;;      Params:         0      45       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1996 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1997 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1998 ;;      Totals:         0      47       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1999 ;;Total ram usage:       47 bytes
  2000 ;; Hardware stack levels used: 1
  2001 ;; Hardware stack levels required when called: 8
  2002 ;; This function calls:
  2003 ;;		_bump
  2004 ;;		_checkColor
  2005 ;;		_checkIncidence
  2006 ;;		_goStraight
  2007 ;;		_home
  2008 ;;		_processSequence
  2009 ;;		_storeSequence
  2010 ;;		_triLED_tog
  2011 ;;		_turn
  2012 ;; This function is called by:
  2013 ;;		_away
  2014 ;; This function uses a non-reentrant model
  2015 ;;
  2016                           
  2017                           	psect	text10
  2018   0012E0                     __ptext10:
  2019                           	callstack 0
  2020   0012E0                     _color2instruction:
  2021                           	callstack 21
  2022   0012E0  EC1F  F007         	call	_checkColor	;wreg free
  2023   0012E4                     
  2024                           ;color.c: 224:  if(!finished){
  2025   0012E4  0101               	movlb	1	; () banked
  2026   0012E6  51DD               	movf	_finished& (0+255),w,b
  2027   0012E8  11DE               	iorwf	(_finished+1)& (0+255),w,b
  2028   0012EA  A4D8               	btfss	status,2,c
  2029   0012EC  EF7A  F009         	goto	u2581
  2030   0012F0  EF7C  F009         	goto	u2580
  2031   0012F4                     u2581:
  2032   0012F4  EF0C  F00A         	goto	l3409
  2033   0012F8                     u2580:
  2034   0012F8                     
  2035                           ; BSR set to: 1
  2036                           ;color.c: 227:    checkIncidence();
  2037   0012F8  ECC4  F011         	call	_checkIncidence	;wreg free
  2038   0012FC                     
  2039                           ;color.c: 229:   if(readingColor == 1){
  2040   0012FC  0101               	movlb	1	; () banked
  2041   0012FE  05DF               	decf	_readingColor& (0+255),w,b
  2042   001300  11E0               	iorwf	(_readingColor+1)& (0+255),w,b
  2043   001302  A4D8               	btfss	status,2,c
  2044   001304  EF86  F009         	goto	u2591
  2045   001308  EF88  F009         	goto	u2590
  2046   00130C                     u2591:
  2047   00130C  EFF9  F009         	goto	l3405
  2048   001310                     u2590:
  2049   001310                     
  2050                           ; BSR set to: 1
  2051                           ;color.c: 230:    currColor = checkColor();
  2052   001310  EC1F  F007         	call	_checkColor	;wreg free
  2053   001314  EE20  F0B5         	lfsr	2,color2instruction@currColor
  2054   001318  0E1A               	movlw	26
  2055   00131A                     u2601:
  2056   00131A  CFEB FFDB          	movff	plusw0,plusw2
  2057   00131E  06E8               	decf	wreg,f,c
  2058   001320  E2FC               	bc	u2601
  2059   001322                     
  2060                           ;color.c: 231:    _delay((unsigned long)((1000)*(64000000/4000.0)));
  2061   001322  0E52               	movlw	82
  2062   001324  0100               	movlb	0	; () banked
  2063   001326  6FD3               	movwf	(??_color2instruction+1)& (0+255),b
  2064   001328  0E2B               	movlw	43
  2065   00132A  6FD2               	movwf	??_color2instruction& (0+255),b
  2066   00132C  0E00               	movlw	0
  2067   00132E                     u2967:
  2068   00132E  2EE8               	decfsz	wreg,f,c
  2069   001330  D7FE               	bra	u2967
  2070   001332  2FD2               	decfsz	??_color2instruction& (0+255),f,b
  2071   001334  D7FC               	bra	u2967
  2072   001336  2FD3               	decfsz	(??_color2instruction+1)& (0+255),f,b
  2073   001338  D7FA               	bra	u2967
  2074   00133A  0000               	nop	
  2075   00133C                     
  2076                           ;color.c: 233:    bump(&mL,&mR,0);
  2077   00133C  0EA5               	movlw	low color2instruction@mL
  2078   00133E  6E13               	movwf	bump@mL^0,c
  2079   001340  0EAD               	movlw	low color2instruction@mR
  2080   001342  6E14               	movwf	bump@mR^0,c
  2081   001344  0E00               	movlw	0
  2082   001346  6E16               	movwf	(bump@direction+1)^0,c
  2083   001348  0E00               	movlw	0
  2084   00134A  6E15               	movwf	bump@direction^0,c
  2085   00134C  EC30  F00E         	call	_bump	;wreg free
  2086   001350                     
  2087                           ;color.c: 238:    goStraight(&mL,&mR,currColor.direction,currColor.squares);
  2088   001350  0EA5               	movlw	low color2instruction@mL
  2089   001352  6E13               	movwf	goStraight@mL^0,c
  2090   001354  0EAD               	movlw	low color2instruction@mR
  2091   001356  6E14               	movwf	goStraight@mR^0,c
  2092   001358  C0C6  F015         	movff	color2instruction@currColor+17,goStraight@direction
  2093   00135C  C0C7  F016         	movff	color2instruction@currColor+18,goStraight@direction+1
  2094   001360  C0CC  F017         	movff	color2instruction@currColor+23,goStraight@squares
  2095   001364  C0CD  F018         	movff	color2instruction@currColor+24,goStraight@squares+1
  2096   001368  EC27  F00A         	call	_goStraight	;wreg free
  2097   00136C                     
  2098                           ;color.c: 240:    turn(mL,mR,currColor.angle,currColor.polarity);
  2099   00136C  EE20  F0A5         	lfsr	2,color2instruction@mL
  2100   001370  EE00  F01B         	lfsr	0,turn@mL
  2101   001374  0E07               	movlw	7
  2102   001376                     u2611:
  2103   001376  CFDB FFEB          	movff	plusw2,plusw0
  2104   00137A  06E8               	decf	wreg,f,c
  2105   00137C  E2FC               	bc	u2611
  2106   00137E  EE20  F0AD         	lfsr	2,color2instruction@mR
  2107   001382  EE00  F023         	lfsr	0,turn@mR
  2108   001386  0E07               	movlw	7
  2109   001388                     u2621:
  2110   001388  CFDB FFEB          	movff	plusw2,plusw0
  2111   00138C  06E8               	decf	wreg,f,c
  2112   00138E  E2FC               	bc	u2621
  2113   001390  C0C8  F02B         	movff	color2instruction@currColor+19,turn@iter
  2114   001394  C0C9  F02C         	movff	color2instruction@currColor+20,turn@iter+1
  2115   001398  C0CA  F02D         	movff	color2instruction@currColor+21,turn@polarity
  2116   00139C  C0CB  F02E         	movff	color2instruction@currColor+22,turn@polarity+1
  2117   0013A0  EC34  F011         	call	_turn	;wreg free
  2118   0013A4                     
  2119                           ;color.c: 244:    triLED_tog(0);
  2120   0013A4  0E00               	movlw	0
  2121   0013A6  ECCF  F012         	call	_triLED_tog
  2122   0013AA                     
  2123                           ;color.c: 245:    readingColor =0;
  2124   0013AA  0E00               	movlw	0
  2125   0013AC  0101               	movlb	1	; () banked
  2126   0013AE  6FE0               	movwf	(_readingColor+1)& (0+255),b
  2127   0013B0  0E00               	movlw	0
  2128   0013B2  6FDF               	movwf	_readingColor& (0+255),b
  2129   0013B4                     
  2130                           ; BSR set to: 1
  2131                           ;color.c: 247:    storeSequence(&hist,currColor.angle,currColor.polarity,currColor.direc
      +                          tion,squaresb4,currColor.squares);
  2132   0013B4  0ED0               	movlw	low color2instruction@hist
  2133   0013B6  6E05               	movwf	storeSequence@history^0,c
  2134   0013B8  C0C8  F006         	movff	color2instruction@currColor+19,storeSequence@angle
  2135   0013BC  C0C9  F007         	movff	color2instruction@currColor+20,storeSequence@angle+1
  2136   0013C0  C0CA  F008         	movff	color2instruction@currColor+21,storeSequence@polarity
  2137   0013C4  C0CB  F009         	movff	color2instruction@currColor+22,storeSequence@polarity+1
  2138   0013C8  C0C6  F00A         	movff	color2instruction@currColor+17,storeSequence@direction
  2139   0013CC  C0C7  F00B         	movff	color2instruction@currColor+18,storeSequence@direction+1
  2140   0013D0  C1D7  F00C         	movff	_squaresb4,storeSequence@squaresb4
  2141   0013D4  C1D8  F00D         	movff	_squaresb4+1,storeSequence@squaresb4+1
  2142   0013D8  C0CC  F00E         	movff	color2instruction@currColor+23,storeSequence@squares
  2143   0013DC  C0CD  F00F         	movff	color2instruction@currColor+24,storeSequence@squares+1
  2144   0013E0  ECBB  F010         	call	_storeSequence	;wreg free
  2145   0013E4                     
  2146                           ;color.c: 250:    squaresb4 = 0;
  2147   0013E4  0E00               	movlw	0
  2148   0013E6  0101               	movlb	1	; () banked
  2149   0013E8  6FD8               	movwf	(_squaresb4+1)& (0+255),b
  2150   0013EA  0E00               	movlw	0
  2151   0013EC  6FD7               	movwf	_squaresb4& (0+255),b
  2152                           
  2153                           ;color.c: 251:    }
  2154   0013EE  EF26  F00A         	goto	l150
  2155   0013F2                     l3405:
  2156                           
  2157                           ; BSR set to: 1
  2158                           ;color.c: 254:    goStraight(&mL,&mR,1,1);
  2159   0013F2  0EA5               	movlw	low color2instruction@mL
  2160   0013F4  6E13               	movwf	goStraight@mL^0,c
  2161   0013F6  0EAD               	movlw	low color2instruction@mR
  2162   0013F8  6E14               	movwf	goStraight@mR^0,c
  2163   0013FA  0E00               	movlw	0
  2164   0013FC  6E16               	movwf	(goStraight@direction+1)^0,c
  2165   0013FE  0E01               	movlw	1
  2166   001400  6E15               	movwf	goStraight@direction^0,c
  2167   001402  0E00               	movlw	0
  2168   001404  6E18               	movwf	(goStraight@squares+1)^0,c
  2169   001406  0E01               	movlw	1
  2170   001408  6E17               	movwf	goStraight@squares^0,c
  2171   00140A  EC27  F00A         	call	_goStraight	;wreg free
  2172   00140E                     
  2173                           ;color.c: 255:    squaresb4++;
  2174   00140E  0101               	movlb	1	; () banked
  2175   001410  4BD7               	infsnz	_squaresb4& (0+255),f,b
  2176   001412  2BD8               	incf	(_squaresb4+1)& (0+255),f,b
  2177   001414  EF26  F00A         	goto	l150
  2178   001418                     l3409:
  2179                           
  2180                           ; BSR set to: 1
  2181                           ;color.c: 265:   processSequence(&hist);
  2182   001418  0ED0               	movlw	low color2instruction@hist
  2183   00141A  6E05               	movwf	processSequence@history^0,c
  2184   00141C  ECA5  F00E         	call	_processSequence	;wreg free
  2185   001420                     
  2186                           ;color.c: 266:   home(mL,mR,&hist);
  2187   001420  EE20  F0A5         	lfsr	2,color2instruction@mL
  2188   001424  EE00  F044         	lfsr	0,home@mL
  2189   001428  0E07               	movlw	7
  2190   00142A                     u2631:
  2191   00142A  CFDB FFEB          	movff	plusw2,plusw0
  2192   00142E  06E8               	decf	wreg,f,c
  2193   001430  E2FC               	bc	u2631
  2194   001432  EE20  F0AD         	lfsr	2,color2instruction@mR
  2195   001436  EE00  F04C         	lfsr	0,home@mR
  2196   00143A  0E07               	movlw	7
  2197   00143C                     u2641:
  2198   00143C  CFDB FFEB          	movff	plusw2,plusw0
  2199   001440  06E8               	decf	wreg,f,c
  2200   001442  E2FC               	bc	u2641
  2201   001444  0ED0               	movlw	low color2instruction@hist
  2202   001446  6E54               	movwf	home@hist^0,c
  2203   001448  EC8D  F012         	call	_home	;wreg free
  2204   00144C                     l150:
  2205   00144C  0012               	return		;funcret
  2206   00144E                     __end_of_color2instruction:
  2207                           	callstack 0
  2208                           
  2209 ;; *************** function _storeSequence *****************
  2210 ;; Defined at:
  2211 ;;		line 273 in file "color.c"
  2212 ;; Parameters:    Size  Location     Type
  2213 ;;  history         1    4[COMRAM] PTR struct colorHistory
  2214 ;;		 -> color2instruction@hist(2), 
  2215 ;;  angle           2    5[COMRAM] int 
  2216 ;;  polarity        2    7[COMRAM] int 
  2217 ;;  direction       2    9[COMRAM] int 
  2218 ;;  squaresb4       2   11[COMRAM] int 
  2219 ;;  squares         2   13[COMRAM] int 
  2220 ;; Auto vars:     Size  Location     Type
  2221 ;;		None
  2222 ;; Return value:  Size  Location     Type
  2223 ;;                  1    wreg      void 
  2224 ;; Registers used:
  2225 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2226 ;; Tracked objects:
  2227 ;;		On entry : 0/0
  2228 ;;		On exit  : 0/0
  2229 ;;		Unchanged: 0/0
  2230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2231 ;;      Params:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2232 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2233 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2234 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2235 ;;Total ram usage:       11 bytes
  2236 ;; Hardware stack levels used: 1
  2237 ;; Hardware stack levels required when called: 2
  2238 ;; This function calls:
  2239 ;;		Nothing
  2240 ;; This function is called by:
  2241 ;;		_color2instruction
  2242 ;; This function uses a non-reentrant model
  2243 ;;
  2244                           
  2245                           	psect	text11
  2246   002176                     __ptext11:
  2247                           	callstack 0
  2248   002176                     _storeSequence:
  2249                           	callstack 26
  2250   002176                     
  2251                           ;color.c: 276:  history -> angle[pos] = angle;
  2252   002176  5055               	movf	_pos^0,w,c
  2253   002178  0D02               	mullw	2
  2254   00217A  5005               	movf	storeSequence@history^0,w,c
  2255   00217C  24F3               	addwf	243,w,c
  2256   00217E  6ED9               	movwf	fsr2l,c
  2257   002180  6ADA               	clrf	fsr2h,c
  2258   002182  C006  FFDE         	movff	storeSequence@angle,postinc2
  2259   002186  C007  FFDD         	movff	storeSequence@angle+1,postdec2
  2260                           
  2261                           ;color.c: 277:  history -> polarity[pos] = polarity;
  2262   00218A  5055               	movf	_pos^0,w,c
  2263   00218C  0D02               	mullw	2
  2264   00218E  5005               	movf	storeSequence@history^0,w,c
  2265   002190  24F3               	addwf	243,w,c
  2266   002192  6ED9               	movwf	fsr2l,c
  2267   002194  6ADA               	clrf	fsr2h,c
  2268   002196  0E28               	movlw	40
  2269   002198  26D9               	addwf	fsr2l,f,c
  2270   00219A  C008  FFDE         	movff	storeSequence@polarity,postinc2
  2271   00219E  C009  FFDD         	movff	storeSequence@polarity+1,postdec2
  2272                           
  2273                           ;color.c: 278:  history -> direction[pos] = direction;
  2274   0021A2  5055               	movf	_pos^0,w,c
  2275   0021A4  0D02               	mullw	2
  2276   0021A6  5005               	movf	storeSequence@history^0,w,c
  2277   0021A8  24F3               	addwf	243,w,c
  2278   0021AA  6ED9               	movwf	fsr2l,c
  2279   0021AC  6ADA               	clrf	fsr2h,c
  2280   0021AE  0E50               	movlw	80
  2281   0021B0  26D9               	addwf	fsr2l,f,c
  2282   0021B2  C00A  FFDE         	movff	storeSequence@direction,postinc2
  2283   0021B6  C00B  FFDD         	movff	storeSequence@direction+1,postdec2
  2284                           
  2285                           ;color.c: 279:  history -> squaresb4[pos] = squaresb4;
  2286   0021BA  5055               	movf	_pos^0,w,c
  2287   0021BC  0D02               	mullw	2
  2288   0021BE  5005               	movf	storeSequence@history^0,w,c
  2289   0021C0  24F3               	addwf	243,w,c
  2290   0021C2  6ED9               	movwf	fsr2l,c
  2291   0021C4  6ADA               	clrf	fsr2h,c
  2292   0021C6  0E78               	movlw	120
  2293   0021C8  26D9               	addwf	fsr2l,f,c
  2294   0021CA  C00C  FFDE         	movff	storeSequence@squaresb4,postinc2
  2295   0021CE  C00D  FFDD         	movff	storeSequence@squaresb4+1,postdec2
  2296                           
  2297                           ;color.c: 280:  history -> squares[pos] = squares;
  2298   0021D2  5055               	movf	_pos^0,w,c
  2299   0021D4  0D02               	mullw	2
  2300   0021D6  5005               	movf	storeSequence@history^0,w,c
  2301   0021D8  24F3               	addwf	243,w,c
  2302   0021DA  6ED9               	movwf	fsr2l,c
  2303   0021DC  6ADA               	clrf	fsr2h,c
  2304   0021DE  0EA0               	movlw	160
  2305   0021E0  26D9               	addwf	fsr2l,f,c
  2306   0021E2  C00E  FFDE         	movff	storeSequence@squares,postinc2
  2307   0021E6  C00F  FFDD         	movff	storeSequence@squares+1,postdec2
  2308   0021EA                     
  2309                           ;color.c: 281:  pos++;
  2310   0021EA  4A55               	infsnz	_pos^0,f,c
  2311   0021EC  2A56               	incf	(_pos+1)^0,f,c
  2312   0021EE  0012               	return		;funcret
  2313   0021F0                     __end_of_storeSequence:
  2314                           	callstack 0
  2315                           
  2316 ;; *************** function _processSequence *****************
  2317 ;; Defined at:
  2318 ;;		line 287 in file "color.c"
  2319 ;; Parameters:    Size  Location     Type
  2320 ;;  history         1    4[COMRAM] PTR struct colorHistory
  2321 ;;		 -> color2instruction@hist(2), 
  2322 ;; Auto vars:     Size  Location     Type
  2323 ;;  i               2    9[COMRAM] int 
  2324 ;; Return value:  Size  Location     Type
  2325 ;;                  1    wreg      void 
  2326 ;; Registers used:
  2327 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2328 ;; Tracked objects:
  2329 ;;		On entry : 0/0
  2330 ;;		On exit  : 0/0
  2331 ;;		Unchanged: 0/0
  2332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2333 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2334 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2335 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2336 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2337 ;;Total ram usage:        7 bytes
  2338 ;; Hardware stack levels used: 1
  2339 ;; Hardware stack levels required when called: 2
  2340 ;; This function calls:
  2341 ;;		Nothing
  2342 ;; This function is called by:
  2343 ;;		_color2instruction
  2344 ;; This function uses a non-reentrant model
  2345 ;;
  2346                           
  2347                           	psect	text12
  2348   001D4A                     __ptext12:
  2349                           	callstack 0
  2350   001D4A                     _processSequence:
  2351                           	callstack 26
  2352   001D4A                     
  2353                           ;color.c: 291:  for(int i = 0; i < pos; i++){
  2354   001D4A  0E00               	movlw	0
  2355   001D4C  6E0B               	movwf	(processSequence@i+1)^0,c
  2356   001D4E  0E00               	movlw	0
  2357   001D50  6E0A               	movwf	processSequence@i^0,c
  2358   001D52  EF01  F00F         	goto	l3345
  2359   001D56                     l3339:
  2360                           
  2361                           ;color.c: 292:   history -> polarity[i] = !history -> polarity[i];
  2362   001D56  500A               	movf	processSequence@i^0,w,c
  2363   001D58  0D02               	mullw	2
  2364   001D5A  5005               	movf	processSequence@history^0,w,c
  2365   001D5C  24F3               	addwf	243,w,c
  2366   001D5E  6ED9               	movwf	fsr2l,c
  2367   001D60  6ADA               	clrf	fsr2h,c
  2368   001D62  0E28               	movlw	40
  2369   001D64  26D9               	addwf	fsr2l,f,c
  2370   001D66  50DE               	movf	postinc2,w,c
  2371   001D68  10DE               	iorwf	postinc2,w,c
  2372   001D6A  B4D8               	btfsc	status,2,c
  2373   001D6C  EFBA  F00E         	goto	u2451
  2374   001D70  EFBD  F00E         	goto	u2450
  2375   001D74                     u2451:
  2376   001D74  0E01               	movlw	1
  2377   001D76  EFBE  F00E         	goto	u2460
  2378   001D7A                     u2450:
  2379   001D7A  0E00               	movlw	0
  2380   001D7C                     u2460:
  2381   001D7C  6E08               	movwf	(??_processSequence+2)^0,c
  2382   001D7E  6A09               	clrf	(??_processSequence+3)^0,c
  2383   001D80  500A               	movf	processSequence@i^0,w,c
  2384   001D82  0D02               	mullw	2
  2385   001D84  5005               	movf	processSequence@history^0,w,c
  2386   001D86  24F3               	addwf	243,w,c
  2387   001D88  6ED9               	movwf	fsr2l,c
  2388   001D8A  6ADA               	clrf	fsr2h,c
  2389   001D8C  0E28               	movlw	40
  2390   001D8E  26D9               	addwf	fsr2l,f,c
  2391   001D90  C008  FFDE         	movff	??_processSequence+2,postinc2
  2392   001D94  C009  FFDD         	movff	??_processSequence+3,postdec2
  2393                           
  2394                           ;color.c: 293:         if(history -> direction[i] != 2){
  2395   001D98  500A               	movf	processSequence@i^0,w,c
  2396   001D9A  0D02               	mullw	2
  2397   001D9C  5005               	movf	processSequence@history^0,w,c
  2398   001D9E  24F3               	addwf	243,w,c
  2399   001DA0  6ED9               	movwf	fsr2l,c
  2400   001DA2  6ADA               	clrf	fsr2h,c
  2401   001DA4  0E50               	movlw	80
  2402   001DA6  26D9               	addwf	fsr2l,f,c
  2403   001DA8  0E02               	movlw	2
  2404   001DAA  18DE               	xorwf	postinc2,w,c
  2405   001DAC  10DE               	iorwf	postinc2,w,c
  2406   001DAE  B4D8               	btfsc	status,2,c
  2407   001DB0  EFDC  F00E         	goto	u2471
  2408   001DB4  EFDE  F00E         	goto	u2470
  2409   001DB8                     u2471:
  2410   001DB8  EFFF  F00E         	goto	l3343
  2411   001DBC                     u2470:
  2412   001DBC                     
  2413                           ;color.c: 294:             history ->direction[i] = !history -> direction[i];
  2414   001DBC  500A               	movf	processSequence@i^0,w,c
  2415   001DBE  0D02               	mullw	2
  2416   001DC0  5005               	movf	processSequence@history^0,w,c
  2417   001DC2  24F3               	addwf	243,w,c
  2418   001DC4  6ED9               	movwf	fsr2l,c
  2419   001DC6  6ADA               	clrf	fsr2h,c
  2420   001DC8  0E50               	movlw	80
  2421   001DCA  26D9               	addwf	fsr2l,f,c
  2422   001DCC  50DE               	movf	postinc2,w,c
  2423   001DCE  10DE               	iorwf	postinc2,w,c
  2424   001DD0  B4D8               	btfsc	status,2,c
  2425   001DD2  EFED  F00E         	goto	u2481
  2426   001DD6  EFF0  F00E         	goto	u2480
  2427   001DDA                     u2481:
  2428   001DDA  0E01               	movlw	1
  2429   001DDC  EFF1  F00E         	goto	u2490
  2430   001DE0                     u2480:
  2431   001DE0  0E00               	movlw	0
  2432   001DE2                     u2490:
  2433   001DE2  6E08               	movwf	(??_processSequence+2)^0,c
  2434   001DE4  6A09               	clrf	(??_processSequence+3)^0,c
  2435   001DE6  500A               	movf	processSequence@i^0,w,c
  2436   001DE8  0D02               	mullw	2
  2437   001DEA  5005               	movf	processSequence@history^0,w,c
  2438   001DEC  24F3               	addwf	243,w,c
  2439   001DEE  6ED9               	movwf	fsr2l,c
  2440   001DF0  6ADA               	clrf	fsr2h,c
  2441   001DF2  0E50               	movlw	80
  2442   001DF4  26D9               	addwf	fsr2l,f,c
  2443   001DF6  C008  FFDE         	movff	??_processSequence+2,postinc2
  2444   001DFA  C009  FFDD         	movff	??_processSequence+3,postdec2
  2445   001DFE                     l3343:
  2446                           
  2447                           ;color.c: 297:  }
  2448   001DFE  4A0A               	infsnz	processSequence@i^0,f,c
  2449   001E00  2A0B               	incf	(processSequence@i+1)^0,f,c
  2450   001E02                     l3345:
  2451   001E02  5055               	movf	_pos^0,w,c
  2452   001E04  5C0A               	subwf	processSequence@i^0,w,c
  2453   001E06  500B               	movf	(processSequence@i+1)^0,w,c
  2454   001E08  0A80               	xorlw	128
  2455   001E0A  6E06               	movwf	??_processSequence^0,c
  2456   001E0C  5056               	movf	(_pos+1)^0,w,c
  2457   001E0E  0A80               	xorlw	128
  2458   001E10  5806               	subwfb	??_processSequence^0,w,c
  2459   001E12  A0D8               	btfss	status,0,c
  2460   001E14  EF0E  F00F         	goto	u2501
  2461   001E18  EF10  F00F         	goto	u2500
  2462   001E1C                     u2501:
  2463   001E1C  EFAB  F00E         	goto	l3339
  2464   001E20                     u2500:
  2465   001E20  0012               	return		;funcret
  2466   001E22                     __end_of_processSequence:
  2467                           	callstack 0
  2468                           
  2469 ;; *************** function _home *****************
  2470 ;; Defined at:
  2471 ;;		line 328 in file "color.c"
  2472 ;; Parameters:    Size  Location     Type
  2473 ;;  mL              8   67[COMRAM] struct DC_motor
  2474 ;;  mR              8   75[COMRAM] struct DC_motor
  2475 ;;  hist            1   83[COMRAM] PTR struct colorHistory
  2476 ;;		 -> color2instruction@hist(2), 
  2477 ;; Auto vars:     Size  Location     Type
  2478 ;;		None
  2479 ;; Return value:  Size  Location     Type
  2480 ;;                  1    wreg      void 
  2481 ;; Registers used:
  2482 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2483 ;; Tracked objects:
  2484 ;;		On entry : 0/0
  2485 ;;		On exit  : 0/0
  2486 ;;		Unchanged: 0/0
  2487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2488 ;;      Params:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2489 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2491 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2492 ;;Total ram usage:       17 bytes
  2493 ;; Hardware stack levels used: 1
  2494 ;; Hardware stack levels required when called: 7
  2495 ;; This function calls:
  2496 ;;		_useSequence
  2497 ;; This function is called by:
  2498 ;;		_color2instruction
  2499 ;; This function uses a non-reentrant model
  2500 ;;
  2501                           
  2502                           	psect	text13
  2503   00251A                     __ptext13:
  2504                           	callstack 0
  2505   00251A                     _home:
  2506                           	callstack 21
  2507   00251A                     
  2508                           ;color.c: 330:   useSequence(mL,mR,hist);
  2509   00251A  EE20  F044         	lfsr	2,home@mL
  2510   00251E  EE00  F02F         	lfsr	0,useSequence@mL
  2511   002522  0E07               	movlw	7
  2512   002524                     u2511:
  2513   002524  CFDB FFEB          	movff	plusw2,plusw0
  2514   002528  06E8               	decf	wreg,f,c
  2515   00252A  E2FC               	bc	u2511
  2516   00252C  EE20  F04C         	lfsr	2,home@mR
  2517   002530  EE00  F037         	lfsr	0,useSequence@mR
  2518   002534  0E07               	movlw	7
  2519   002536                     u2521:
  2520   002536  CFDB FFEB          	movff	plusw2,plusw0
  2521   00253A  06E8               	decf	wreg,f,c
  2522   00253C  E2FC               	bc	u2521
  2523   00253E  C054  F03F         	movff	home@hist,useSequence@history
  2524   002542  EC7E  F00B         	call	_useSequence	;wreg free
  2525   002546  0012               	return		;funcret
  2526   002548                     __end_of_home:
  2527                           	callstack 0
  2528                           
  2529 ;; *************** function _useSequence *****************
  2530 ;; Defined at:
  2531 ;;		line 300 in file "color.c"
  2532 ;; Parameters:    Size  Location     Type
  2533 ;;  mL              8   46[COMRAM] struct DC_motor
  2534 ;;  mR              8   54[COMRAM] struct DC_motor
  2535 ;;  history         1   62[COMRAM] PTR struct colorHistory
  2536 ;;		 -> color2instruction@hist(2), 
  2537 ;; Auto vars:     Size  Location     Type
  2538 ;;  i               2   65[COMRAM] int 
  2539 ;; Return value:  Size  Location     Type
  2540 ;;                  1    wreg      void 
  2541 ;; Registers used:
  2542 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2543 ;; Tracked objects:
  2544 ;;		On entry : 0/0
  2545 ;;		On exit  : 0/0
  2546 ;;		Unchanged: 0/0
  2547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2548 ;;      Params:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2549 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2550 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2551 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2552 ;;Total ram usage:       21 bytes
  2553 ;; Hardware stack levels used: 1
  2554 ;; Hardware stack levels required when called: 6
  2555 ;; This function calls:
  2556 ;;		_goStraight
  2557 ;;		_stop
  2558 ;;		_turn
  2559 ;; This function is called by:
  2560 ;;		_home
  2561 ;; This function uses a non-reentrant model
  2562 ;;
  2563                           
  2564                           	psect	text14
  2565   0016FC                     __ptext14:
  2566                           	callstack 0
  2567   0016FC                     _useSequence:
  2568                           	callstack 21
  2569   0016FC                     
  2570                           ;color.c: 307:  for(int i = pos; i > 0; i--){
  2571   0016FC  C055  F042         	movff	_pos,useSequence@i
  2572   001700  C056  F043         	movff	_pos+1,useSequence@i+1
  2573   001704                     l3185:
  2574   001704  BE43               	btfsc	(useSequence@i+1)^0,7,c
  2575   001706  EF8F  F00B         	goto	u2310
  2576   00170A  5043               	movf	(useSequence@i+1)^0,w,c
  2577   00170C  E106               	bnz	u2311
  2578   00170E  0442               	decf	useSequence@i^0,w,c
  2579   001710  B0D8               	btfsc	status,0,c
  2580   001712  EF8D  F00B         	goto	u2311
  2581   001716  EF8F  F00B         	goto	u2310
  2582   00171A                     u2311:
  2583   00171A  EF91  F00B         	goto	l3189
  2584   00171E                     u2310:
  2585   00171E  EF16  F00C         	goto	l3203
  2586   001722                     l3189:
  2587                           
  2588                           ;color.c: 308:    goStraight(&mL,&mR,history -> direction[i-1],history -> squaresb4[i-1]
      +                          );
  2589   001722  0E2F               	movlw	low useSequence@mL
  2590   001724  6E13               	movwf	goStraight@mL^0,c
  2591   001726  0E37               	movlw	low useSequence@mR
  2592   001728  6E14               	movwf	goStraight@mR^0,c
  2593   00172A  5042               	movf	useSequence@i^0,w,c
  2594   00172C  0D02               	mullw	2
  2595   00172E  503F               	movf	useSequence@history^0,w,c
  2596   001730  24F3               	addwf	243,w,c
  2597   001732  6ED9               	movwf	fsr2l,c
  2598   001734  6ADA               	clrf	fsr2h,c
  2599   001736  0E4E               	movlw	78
  2600   001738  26D9               	addwf	fsr2l,f,c
  2601   00173A  CFDE F015          	movff	postinc2,goStraight@direction
  2602   00173E  CFDD F016          	movff	postdec2,goStraight@direction+1
  2603   001742  5042               	movf	useSequence@i^0,w,c
  2604   001744  0D02               	mullw	2
  2605   001746  503F               	movf	useSequence@history^0,w,c
  2606   001748  24F3               	addwf	243,w,c
  2607   00174A  6ED9               	movwf	fsr2l,c
  2608   00174C  6ADA               	clrf	fsr2h,c
  2609   00174E  0E76               	movlw	118
  2610   001750  26D9               	addwf	fsr2l,f,c
  2611   001752  CFDE F017          	movff	postinc2,goStraight@squares
  2612   001756  CFDD F018          	movff	postdec2,goStraight@squares+1
  2613   00175A  EC27  F00A         	call	_goStraight	;wreg free
  2614   00175E                     
  2615                           ;color.c: 309:    _delay((unsigned long)((1000)*(64000000/4000.0)));
  2616   00175E  0E52               	movlw	82
  2617   001760  6E41               	movwf	(??_useSequence+1)^0,c
  2618   001762  0E2B               	movlw	43
  2619   001764  6E40               	movwf	??_useSequence^0,c
  2620   001766  0E00               	movlw	0
  2621   001768                     u2977:
  2622   001768  2EE8               	decfsz	wreg,f,c
  2623   00176A  D7FE               	bra	u2977
  2624   00176C  2E40               	decfsz	??_useSequence^0,f,c
  2625   00176E  D7FC               	bra	u2977
  2626   001770  2E41               	decfsz	(??_useSequence+1)^0,f,c
  2627   001772  D7FA               	bra	u2977
  2628   001774  D000               	nop2	
  2629   001776                     
  2630                           ;color.c: 310:    turn(mL,mR,history -> angle[i-1],history -> polarity[i-1]);
  2631   001776  EE20  F02F         	lfsr	2,useSequence@mL
  2632   00177A  EE00  F01B         	lfsr	0,turn@mL
  2633   00177E  0E07               	movlw	7
  2634   001780                     u2321:
  2635   001780  CFDB FFEB          	movff	plusw2,plusw0
  2636   001784  06E8               	decf	wreg,f,c
  2637   001786  E2FC               	bc	u2321
  2638   001788  EE20  F037         	lfsr	2,useSequence@mR
  2639   00178C  EE00  F023         	lfsr	0,turn@mR
  2640   001790  0E07               	movlw	7
  2641   001792                     u2331:
  2642   001792  CFDB FFEB          	movff	plusw2,plusw0
  2643   001796  06E8               	decf	wreg,f,c
  2644   001798  E2FC               	bc	u2331
  2645   00179A  5042               	movf	useSequence@i^0,w,c
  2646   00179C  0D02               	mullw	2
  2647   00179E  503F               	movf	useSequence@history^0,w,c
  2648   0017A0  24F3               	addwf	243,w,c
  2649   0017A2  6ED9               	movwf	fsr2l,c
  2650   0017A4  6ADA               	clrf	fsr2h,c
  2651   0017A6  0EFE               	movlw	254
  2652   0017A8  26D9               	addwf	fsr2l,f,c
  2653   0017AA  CFDE F02B          	movff	postinc2,turn@iter
  2654   0017AE  CFDD F02C          	movff	postdec2,turn@iter+1
  2655   0017B2  5042               	movf	useSequence@i^0,w,c
  2656   0017B4  0D02               	mullw	2
  2657   0017B6  503F               	movf	useSequence@history^0,w,c
  2658   0017B8  24F3               	addwf	243,w,c
  2659   0017BA  6ED9               	movwf	fsr2l,c
  2660   0017BC  6ADA               	clrf	fsr2h,c
  2661   0017BE  0E26               	movlw	38
  2662   0017C0  26D9               	addwf	fsr2l,f,c
  2663   0017C2  CFDE F02D          	movff	postinc2,turn@polarity
  2664   0017C6  CFDD F02E          	movff	postdec2,turn@polarity+1
  2665   0017CA  EC34  F011         	call	_turn	;wreg free
  2666   0017CE                     
  2667                           ;color.c: 311:    _delay((unsigned long)((1000)*(64000000/4000.0)));
  2668   0017CE  0E52               	movlw	82
  2669   0017D0  6E41               	movwf	(??_useSequence+1)^0,c
  2670   0017D2  0E2B               	movlw	43
  2671   0017D4  6E40               	movwf	??_useSequence^0,c
  2672   0017D6  0E00               	movlw	0
  2673   0017D8                     u2987:
  2674   0017D8  2EE8               	decfsz	wreg,f,c
  2675   0017DA  D7FE               	bra	u2987
  2676   0017DC  2E40               	decfsz	??_useSequence^0,f,c
  2677   0017DE  D7FC               	bra	u2987
  2678   0017E0  2E41               	decfsz	(??_useSequence+1)^0,f,c
  2679   0017E2  D7FA               	bra	u2987
  2680   0017E4  D000               	nop2	
  2681   0017E6                     
  2682                           ;color.c: 312:    goStraight(&mL,&mR,history -> direction[i-1],history -> squares[i-1]);
  2683   0017E6  0E2F               	movlw	low useSequence@mL
  2684   0017E8  6E13               	movwf	goStraight@mL^0,c
  2685   0017EA  0E37               	movlw	low useSequence@mR
  2686   0017EC  6E14               	movwf	goStraight@mR^0,c
  2687   0017EE  5042               	movf	useSequence@i^0,w,c
  2688   0017F0  0D02               	mullw	2
  2689   0017F2  503F               	movf	useSequence@history^0,w,c
  2690   0017F4  24F3               	addwf	243,w,c
  2691   0017F6  6ED9               	movwf	fsr2l,c
  2692   0017F8  6ADA               	clrf	fsr2h,c
  2693   0017FA  0E4E               	movlw	78
  2694   0017FC  26D9               	addwf	fsr2l,f,c
  2695   0017FE  CFDE F015          	movff	postinc2,goStraight@direction
  2696   001802  CFDD F016          	movff	postdec2,goStraight@direction+1
  2697   001806  5042               	movf	useSequence@i^0,w,c
  2698   001808  0D02               	mullw	2
  2699   00180A  503F               	movf	useSequence@history^0,w,c
  2700   00180C  24F3               	addwf	243,w,c
  2701   00180E  6ED9               	movwf	fsr2l,c
  2702   001810  6ADA               	clrf	fsr2h,c
  2703   001812  0E9E               	movlw	158
  2704   001814  26D9               	addwf	fsr2l,f,c
  2705   001816  CFDE F017          	movff	postinc2,goStraight@squares
  2706   00181A  CFDD F018          	movff	postdec2,goStraight@squares+1
  2707   00181E  EC27  F00A         	call	_goStraight	;wreg free
  2708   001822                     
  2709                           ;color.c: 313:   }
  2710   001822  0642               	decf	useSequence@i^0,f,c
  2711   001824  A0D8               	btfss	status,0,c
  2712   001826  0643               	decf	(useSequence@i+1)^0,f,c
  2713   001828  EF82  F00B         	goto	l3185
  2714   00182C                     l3203:
  2715                           
  2716                           ;color.c: 314:    stop(&mL,&mR);
  2717   00182C  0E2F               	movlw	low useSequence@mL
  2718   00182E  6E13               	movwf	stop@mL^0,c
  2719   001830  0E37               	movlw	low useSequence@mR
  2720   001832  6E14               	movwf	stop@mR^0,c
  2721   001834  EC97  F011         	call	_stop	;wreg free
  2722   001838  0012               	return		;funcret
  2723   00183A                     __end_of_useSequence:
  2724                           	callstack 0
  2725                           
  2726 ;; *************** function _turn *****************
  2727 ;; Defined at:
  2728 ;;		line 282 in file "dc_motor.c"
  2729 ;; Parameters:    Size  Location     Type
  2730 ;;  mL              8   26[COMRAM] struct DC_motor
  2731 ;;  mR              8   34[COMRAM] struct DC_motor
  2732 ;;  iter            2   42[COMRAM] unsigned int 
  2733 ;;  polarity        2   44[COMRAM] unsigned int 
  2734 ;; Auto vars:     Size  Location     Type
  2735 ;;		None
  2736 ;; Return value:  Size  Location     Type
  2737 ;;                  1    wreg      void 
  2738 ;; Registers used:
  2739 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2740 ;; Tracked objects:
  2741 ;;		On entry : 0/0
  2742 ;;		On exit  : 0/0
  2743 ;;		Unchanged: 0/0
  2744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2745 ;;      Params:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2746 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2748 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2749 ;;Total ram usage:       20 bytes
  2750 ;; Hardware stack levels used: 1
  2751 ;; Hardware stack levels required when called: 5
  2752 ;; This function calls:
  2753 ;;		_turnLeft
  2754 ;;		_turnRight
  2755 ;; This function is called by:
  2756 ;;		_color2instruction
  2757 ;;		_useSequence
  2758 ;;		_checkWall
  2759 ;; This function uses a non-reentrant model
  2760 ;;
  2761                           
  2762                           	psect	text15
  2763   002268                     __ptext15:
  2764                           	callstack 0
  2765   002268                     _turn:
  2766                           	callstack 23
  2767   002268                     
  2768                           ;dc_motor.c: 283:     if(iter!= 0){
  2769   002268  502B               	movf	turn@iter^0,w,c
  2770   00226A  102C               	iorwf	(turn@iter+1)^0,w,c
  2771   00226C  B4D8               	btfsc	status,2,c
  2772   00226E  EF3B  F011         	goto	u2191
  2773   002272  EF3D  F011         	goto	u2190
  2774   002276                     u2191:
  2775   002276  EF65  F011         	goto	l315
  2776   00227A                     u2190:
  2777   00227A                     
  2778                           ;dc_motor.c: 284:         if(polarity == 0){
  2779   00227A  502D               	movf	turn@polarity^0,w,c
  2780   00227C  102E               	iorwf	(turn@polarity+1)^0,w,c
  2781   00227E  A4D8               	btfss	status,2,c
  2782   002280  EF44  F011         	goto	u2201
  2783   002284  EF46  F011         	goto	u2200
  2784   002288                     u2201:
  2785   002288  EF52  F011         	goto	l3091
  2786   00228C                     u2200:
  2787   00228C                     
  2788                           ;dc_motor.c: 285:             turnRight(&mL,&mR,iter);
  2789   00228C  0E1B               	movlw	low turn@mL
  2790   00228E  6E13               	movwf	turnRight@mL^0,c
  2791   002290  0E23               	movlw	low turn@mR
  2792   002292  6E14               	movwf	turnRight@mR^0,c
  2793   002294  C02B  F015         	movff	turn@iter,turnRight@iter
  2794   002298  C02C  F016         	movff	turn@iter+1,turnRight@iter+1
  2795   00229C  EC1D  F00C         	call	_turnRight	;wreg free
  2796                           
  2797                           ;dc_motor.c: 286:         }
  2798   0022A0  EF65  F011         	goto	l315
  2799   0022A4                     l3091:
  2800   0022A4  042D               	decf	turn@polarity^0,w,c
  2801   0022A6  102E               	iorwf	(turn@polarity+1)^0,w,c
  2802   0022A8  A4D8               	btfss	status,2,c
  2803   0022AA  EF59  F011         	goto	u2211
  2804   0022AE  EF5B  F011         	goto	u2210
  2805   0022B2                     u2211:
  2806   0022B2  EF65  F011         	goto	l315
  2807   0022B6                     u2210:
  2808   0022B6                     
  2809                           ;dc_motor.c: 288:             turnLeft(&mL,&mR,iter);
  2810   0022B6  0E1B               	movlw	low turn@mL
  2811   0022B8  6E13               	movwf	turnLeft@mL^0,c
  2812   0022BA  0E23               	movlw	low turn@mR
  2813   0022BC  6E14               	movwf	turnLeft@mR^0,c
  2814   0022BE  C02B  F015         	movff	turn@iter,turnLeft@iter
  2815   0022C2  C02C  F016         	movff	turn@iter+1,turnLeft@iter+1
  2816   0022C6  ECA3  F00C         	call	_turnLeft	;wreg free
  2817   0022CA                     l315:
  2818   0022CA  0012               	return		;funcret
  2819   0022CC                     __end_of_turn:
  2820                           	callstack 0
  2821                           
  2822 ;; *************** function _turnRight *****************
  2823 ;; Defined at:
  2824 ;;		line 165 in file "dc_motor.c"
  2825 ;; Parameters:    Size  Location     Type
  2826 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  2827 ;;		 -> turn@mL(8), dance@mL(8), 
  2828 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  2829 ;;		 -> turn@mR(8), dance@mR(8), 
  2830 ;;  iter            2   20[COMRAM] unsigned int 
  2831 ;; Auto vars:     Size  Location     Type
  2832 ;;  i               2   24[COMRAM] int 
  2833 ;; Return value:  Size  Location     Type
  2834 ;;                  1    wreg      void 
  2835 ;; Registers used:
  2836 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2837 ;; Tracked objects:
  2838 ;;		On entry : 0/0
  2839 ;;		On exit  : 0/0
  2840 ;;		Unchanged: 0/0
  2841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2842 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2843 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2844 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2845 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2846 ;;Total ram usage:        8 bytes
  2847 ;; Hardware stack levels used: 1
  2848 ;; Hardware stack levels required when called: 4
  2849 ;; This function calls:
  2850 ;;		_setMotorPWM
  2851 ;; This function is called by:
  2852 ;;		_turn
  2853 ;;		_dance
  2854 ;; This function uses a non-reentrant model
  2855 ;;
  2856                           
  2857                           	psect	text16
  2858   00183A                     __ptext16:
  2859                           	callstack 0
  2860   00183A                     _turnRight:
  2861                           	callstack 23
  2862   00183A                     
  2863                           ;dc_motor.c: 165: void turnRight(DC_motor *mL, DC_motor *mR, unsigned int iter);dc_motor
      +                          .c: 166: {;dc_motor.c: 167:     for(int i =0; i<iter; i++)
  2864   00183A  0E00               	movlw	0
  2865   00183C  6E1A               	movwf	(turnRight@i+1)^0,c
  2866   00183E  0E00               	movlw	0
  2867   001840  6E19               	movwf	turnRight@i^0,c
  2868   001842  EF97  F00C         	goto	l3049
  2869   001846                     l3005:
  2870                           
  2871                           ;dc_motor.c: 168:     {;dc_motor.c: 169:         (mL->power) = maxPow;
  2872   001846  5013               	movf	turnRight@mL^0,w,c
  2873   001848  6ED9               	movwf	fsr2l,c
  2874   00184A  6ADA               	clrf	fsr2h,c
  2875   00184C  0E1B               	movlw	27
  2876   00184E  6EDF               	movwf	indf2,c
  2877   001850                     
  2878                           ;dc_motor.c: 170:         (mL->direction) = 1;
  2879   001850  5013               	movf	turnRight@mL^0,w,c
  2880   001852  6ED9               	movwf	fsr2l,c
  2881   001854  6ADA               	clrf	fsr2h,c
  2882   001856  0E01               	movlw	1
  2883   001858  26D9               	addwf	fsr2l,f,c
  2884   00185A  0E01               	movlw	1
  2885   00185C  6EDF               	movwf	indf2,c
  2886   00185E                     
  2887                           ;dc_motor.c: 171:         (mL->brakemode) = 1;
  2888   00185E  5013               	movf	turnRight@mL^0,w,c
  2889   001860  6ED9               	movwf	fsr2l,c
  2890   001862  6ADA               	clrf	fsr2h,c
  2891   001864  0E02               	movlw	2
  2892   001866  26D9               	addwf	fsr2l,f,c
  2893   001868  0E01               	movlw	1
  2894   00186A  6EDF               	movwf	indf2,c
  2895                           
  2896                           ;dc_motor.c: 173:         (mR->power) = maxPow;
  2897   00186C  5014               	movf	turnRight@mR^0,w,c
  2898   00186E  6ED9               	movwf	fsr2l,c
  2899   001870  6ADA               	clrf	fsr2h,c
  2900   001872  0E1B               	movlw	27
  2901   001874  6EDF               	movwf	indf2,c
  2902   001876                     
  2903                           ;dc_motor.c: 174:         (mR->direction) = 0;
  2904   001876  5014               	movf	turnRight@mR^0,w,c
  2905   001878  6ED9               	movwf	fsr2l,c
  2906   00187A  6ADA               	clrf	fsr2h,c
  2907   00187C  0E01               	movlw	1
  2908   00187E  26D9               	addwf	fsr2l,f,c
  2909   001880  6ADF               	clrf	indf2,c
  2910   001882                     
  2911                           ;dc_motor.c: 175:         (mR->brakemode) = 1;
  2912   001882  5014               	movf	turnRight@mR^0,w,c
  2913   001884  6ED9               	movwf	fsr2l,c
  2914   001886  6ADA               	clrf	fsr2h,c
  2915   001888  0E02               	movlw	2
  2916   00188A  26D9               	addwf	fsr2l,f,c
  2917   00188C  0E01               	movlw	1
  2918   00188E  6EDF               	movwf	indf2,c
  2919   001890                     
  2920                           ;dc_motor.c: 177:         setMotorPWM(mL);
  2921   001890  C013  F00D         	movff	turnRight@mL,setMotorPWM@m
  2922   001894  ECDE  F00A         	call	_setMotorPWM	;wreg free
  2923   001898                     
  2924                           ;dc_motor.c: 178:         setMotorPWM(mR);
  2925   001898  C014  F00D         	movff	turnRight@mR,setMotorPWM@m
  2926   00189C  ECDE  F00A         	call	_setMotorPWM	;wreg free
  2927   0018A0                     
  2928                           ;dc_motor.c: 180:         LATFbits.LATF0 = 1;
  2929   0018A0  807E               	bsf	126,0,c	;volatile
  2930   0018A2                     
  2931                           ;dc_motor.c: 182:         _delay((unsigned long)((300)*(64000000/4000.0)));
  2932   0018A2  0E19               	movlw	25
  2933   0018A4  6E18               	movwf	(??_turnRight+1)^0,c
  2934   0018A6  0E5A               	movlw	90
  2935   0018A8  6E17               	movwf	??_turnRight^0,c
  2936   0018AA  0EB2               	movlw	178
  2937   0018AC                     u2997:
  2938   0018AC  2EE8               	decfsz	wreg,f,c
  2939   0018AE  D7FE               	bra	u2997
  2940   0018B0  2E17               	decfsz	??_turnRight^0,f,c
  2941   0018B2  D7FC               	bra	u2997
  2942   0018B4  2E18               	decfsz	(??_turnRight+1)^0,f,c
  2943   0018B6  D7FA               	bra	u2997
  2944   0018B8                     
  2945                           ;dc_motor.c: 184:         LATDbits.LATD4 = 1;
  2946   0018B8  887C               	bsf	124,4,c	;volatile
  2947   0018BA                     
  2948                           ;dc_motor.c: 185:         LATFbits.LATF0 = 0;
  2949   0018BA  907E               	bcf	126,0,c	;volatile
  2950   0018BC                     
  2951                           ;dc_motor.c: 187:         (mL->power) = minPow;
  2952   0018BC  5013               	movf	turnRight@mL^0,w,c
  2953   0018BE  6ED9               	movwf	fsr2l,c
  2954   0018C0  6ADA               	clrf	fsr2h,c
  2955   0018C2  0E0F               	movlw	15
  2956   0018C4  6EDF               	movwf	indf2,c
  2957   0018C6                     
  2958                           ;dc_motor.c: 188:         (mL->direction) = 1;
  2959   0018C6  5013               	movf	turnRight@mL^0,w,c
  2960   0018C8  6ED9               	movwf	fsr2l,c
  2961   0018CA  6ADA               	clrf	fsr2h,c
  2962   0018CC  0E01               	movlw	1
  2963   0018CE  26D9               	addwf	fsr2l,f,c
  2964   0018D0  0E01               	movlw	1
  2965   0018D2  6EDF               	movwf	indf2,c
  2966   0018D4                     
  2967                           ;dc_motor.c: 189:         (mL->brakemode) = 0;
  2968   0018D4  5013               	movf	turnRight@mL^0,w,c
  2969   0018D6  6ED9               	movwf	fsr2l,c
  2970   0018D8  6ADA               	clrf	fsr2h,c
  2971   0018DA  0E02               	movlw	2
  2972   0018DC  26D9               	addwf	fsr2l,f,c
  2973   0018DE  6ADF               	clrf	indf2,c
  2974   0018E0                     
  2975                           ;dc_motor.c: 191:         (mR->power) = minPow;
  2976   0018E0  5014               	movf	turnRight@mR^0,w,c
  2977   0018E2  6ED9               	movwf	fsr2l,c
  2978   0018E4  6ADA               	clrf	fsr2h,c
  2979   0018E6  0E0F               	movlw	15
  2980   0018E8  6EDF               	movwf	indf2,c
  2981   0018EA                     
  2982                           ;dc_motor.c: 192:         (mR->direction) = 0;
  2983   0018EA  5014               	movf	turnRight@mR^0,w,c
  2984   0018EC  6ED9               	movwf	fsr2l,c
  2985   0018EE  6ADA               	clrf	fsr2h,c
  2986   0018F0  0E01               	movlw	1
  2987   0018F2  26D9               	addwf	fsr2l,f,c
  2988   0018F4  6ADF               	clrf	indf2,c
  2989   0018F6                     
  2990                           ;dc_motor.c: 193:         (mR->brakemode) = 0;
  2991   0018F6  5014               	movf	turnRight@mR^0,w,c
  2992   0018F8  6ED9               	movwf	fsr2l,c
  2993   0018FA  6ADA               	clrf	fsr2h,c
  2994   0018FC  0E02               	movlw	2
  2995   0018FE  26D9               	addwf	fsr2l,f,c
  2996   001900  6ADF               	clrf	indf2,c
  2997   001902                     
  2998                           ;dc_motor.c: 195:         setMotorPWM(mL);
  2999   001902  C013  F00D         	movff	turnRight@mL,setMotorPWM@m
  3000   001906  ECDE  F00A         	call	_setMotorPWM	;wreg free
  3001   00190A                     
  3002                           ;dc_motor.c: 196:         setMotorPWM(mR);
  3003   00190A  C014  F00D         	movff	turnRight@mR,setMotorPWM@m
  3004   00190E  ECDE  F00A         	call	_setMotorPWM	;wreg free
  3005   001912                     
  3006                           ;dc_motor.c: 198:         _delay((unsigned long)((300)*(64000000/4000.0)));
  3007   001912  0E19               	movlw	25
  3008   001914  6E18               	movwf	(??_turnRight+1)^0,c
  3009   001916  0E5A               	movlw	90
  3010   001918  6E17               	movwf	??_turnRight^0,c
  3011   00191A  0EB2               	movlw	178
  3012   00191C                     u3007:
  3013   00191C  2EE8               	decfsz	wreg,f,c
  3014   00191E  D7FE               	bra	u3007
  3015   001920  2E17               	decfsz	??_turnRight^0,f,c
  3016   001922  D7FC               	bra	u3007
  3017   001924  2E18               	decfsz	(??_turnRight+1)^0,f,c
  3018   001926  D7FA               	bra	u3007
  3019   001928                     
  3020                           ;dc_motor.c: 200:         LATDbits.LATD4 = 0;
  3021   001928  987C               	bcf	124,4,c	;volatile
  3022   00192A                     
  3023                           ;dc_motor.c: 201:     }
  3024   00192A  4A19               	infsnz	turnRight@i^0,f,c
  3025   00192C  2A1A               	incf	(turnRight@i+1)^0,f,c
  3026   00192E                     l3049:
  3027   00192E  5015               	movf	turnRight@iter^0,w,c
  3028   001930  5C19               	subwf	turnRight@i^0,w,c
  3029   001932  5016               	movf	(turnRight@iter+1)^0,w,c
  3030   001934  581A               	subwfb	(turnRight@i+1)^0,w,c
  3031   001936  A0D8               	btfss	status,0,c
  3032   001938  EFA0  F00C         	goto	u2141
  3033   00193C  EFA2  F00C         	goto	u2140
  3034   001940                     u2141:
  3035   001940  EF23  F00C         	goto	l3005
  3036   001944                     u2140:
  3037   001944  0012               	return		;funcret
  3038   001946                     __end_of_turnRight:
  3039                           	callstack 0
  3040                           
  3041 ;; *************** function _turnLeft *****************
  3042 ;; Defined at:
  3043 ;;		line 125 in file "dc_motor.c"
  3044 ;; Parameters:    Size  Location     Type
  3045 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  3046 ;;		 -> turn@mL(8), dance@mL(8), 
  3047 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  3048 ;;		 -> turn@mR(8), dance@mR(8), 
  3049 ;;  iter            2   20[COMRAM] unsigned int 
  3050 ;; Auto vars:     Size  Location     Type
  3051 ;;  i               2   24[COMRAM] int 
  3052 ;; Return value:  Size  Location     Type
  3053 ;;                  1    wreg      void 
  3054 ;; Registers used:
  3055 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3056 ;; Tracked objects:
  3057 ;;		On entry : 0/0
  3058 ;;		On exit  : 0/0
  3059 ;;		Unchanged: 0/0
  3060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3061 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3062 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3063 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3064 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3065 ;;Total ram usage:        8 bytes
  3066 ;; Hardware stack levels used: 1
  3067 ;; Hardware stack levels required when called: 4
  3068 ;; This function calls:
  3069 ;;		_setMotorPWM
  3070 ;; This function is called by:
  3071 ;;		_turn
  3072 ;;		_dance
  3073 ;; This function uses a non-reentrant model
  3074 ;;
  3075                           
  3076                           	psect	text17
  3077   001946                     __ptext17:
  3078                           	callstack 0
  3079   001946                     _turnLeft:
  3080                           	callstack 23
  3081   001946                     
  3082                           ;dc_motor.c: 125: void turnLeft(DC_motor *mL, DC_motor *mR, unsigned int iter);dc_motor.
      +                          c: 126: {;dc_motor.c: 127:     for(int i= 0; i< iter; i++)
  3083   001946  0E00               	movlw	0
  3084   001948  6E1A               	movwf	(turnLeft@i+1)^0,c
  3085   00194A  0E00               	movlw	0
  3086   00194C  6E19               	movwf	turnLeft@i^0,c
  3087   00194E  EF1D  F00D         	goto	l3001
  3088   001952                     l2957:
  3089                           
  3090                           ;dc_motor.c: 128:     {;dc_motor.c: 129:         (mL->power) = maxPow;
  3091   001952  5013               	movf	turnLeft@mL^0,w,c
  3092   001954  6ED9               	movwf	fsr2l,c
  3093   001956  6ADA               	clrf	fsr2h,c
  3094   001958  0E1B               	movlw	27
  3095   00195A  6EDF               	movwf	indf2,c
  3096   00195C                     
  3097                           ;dc_motor.c: 130:         (mL->direction) = 0;
  3098   00195C  5013               	movf	turnLeft@mL^0,w,c
  3099   00195E  6ED9               	movwf	fsr2l,c
  3100   001960  6ADA               	clrf	fsr2h,c
  3101   001962  0E01               	movlw	1
  3102   001964  26D9               	addwf	fsr2l,f,c
  3103   001966  6ADF               	clrf	indf2,c
  3104   001968                     
  3105                           ;dc_motor.c: 131:         (mL->brakemode) = 1;
  3106   001968  5013               	movf	turnLeft@mL^0,w,c
  3107   00196A  6ED9               	movwf	fsr2l,c
  3108   00196C  6ADA               	clrf	fsr2h,c
  3109   00196E  0E02               	movlw	2
  3110   001970  26D9               	addwf	fsr2l,f,c
  3111   001972  0E01               	movlw	1
  3112   001974  6EDF               	movwf	indf2,c
  3113                           
  3114                           ;dc_motor.c: 133:         (mR->power) = maxPow;
  3115   001976  5014               	movf	turnLeft@mR^0,w,c
  3116   001978  6ED9               	movwf	fsr2l,c
  3117   00197A  6ADA               	clrf	fsr2h,c
  3118   00197C  0E1B               	movlw	27
  3119   00197E  6EDF               	movwf	indf2,c
  3120   001980                     
  3121                           ;dc_motor.c: 134:         (mR->direction) = 1;
  3122   001980  5014               	movf	turnLeft@mR^0,w,c
  3123   001982  6ED9               	movwf	fsr2l,c
  3124   001984  6ADA               	clrf	fsr2h,c
  3125   001986  0E01               	movlw	1
  3126   001988  26D9               	addwf	fsr2l,f,c
  3127   00198A  0E01               	movlw	1
  3128   00198C  6EDF               	movwf	indf2,c
  3129   00198E                     
  3130                           ;dc_motor.c: 135:         (mR->brakemode) = 1;
  3131   00198E  5014               	movf	turnLeft@mR^0,w,c
  3132   001990  6ED9               	movwf	fsr2l,c
  3133   001992  6ADA               	clrf	fsr2h,c
  3134   001994  0E02               	movlw	2
  3135   001996  26D9               	addwf	fsr2l,f,c
  3136   001998  0E01               	movlw	1
  3137   00199A  6EDF               	movwf	indf2,c
  3138   00199C                     
  3139                           ;dc_motor.c: 137:         setMotorPWM(mL);
  3140   00199C  C013  F00D         	movff	turnLeft@mL,setMotorPWM@m
  3141   0019A0  ECDE  F00A         	call	_setMotorPWM	;wreg free
  3142   0019A4                     
  3143                           ;dc_motor.c: 138:         setMotorPWM(mR);
  3144   0019A4  C014  F00D         	movff	turnLeft@mR,setMotorPWM@m
  3145   0019A8  ECDE  F00A         	call	_setMotorPWM	;wreg free
  3146   0019AC                     
  3147                           ;dc_motor.c: 140:         LATHbits.LATH0 = 1;
  3148   0019AC  8080               	bsf	128,0,c	;volatile
  3149   0019AE                     
  3150                           ;dc_motor.c: 142:         _delay((unsigned long)((300)*(64000000/4000.0)));
  3151   0019AE  0E19               	movlw	25
  3152   0019B0  6E18               	movwf	(??_turnLeft+1)^0,c
  3153   0019B2  0E5A               	movlw	90
  3154   0019B4  6E17               	movwf	??_turnLeft^0,c
  3155   0019B6  0EB2               	movlw	178
  3156   0019B8                     u3017:
  3157   0019B8  2EE8               	decfsz	wreg,f,c
  3158   0019BA  D7FE               	bra	u3017
  3159   0019BC  2E17               	decfsz	??_turnLeft^0,f,c
  3160   0019BE  D7FC               	bra	u3017
  3161   0019C0  2E18               	decfsz	(??_turnLeft+1)^0,f,c
  3162   0019C2  D7FA               	bra	u3017
  3163   0019C4                     
  3164                           ;dc_motor.c: 144:         LATDbits.LATD4 = 1;
  3165   0019C4  887C               	bsf	124,4,c	;volatile
  3166   0019C6                     
  3167                           ;dc_motor.c: 145:         LATHbits.LATH0 = 0;
  3168   0019C6  9080               	bcf	128,0,c	;volatile
  3169   0019C8                     
  3170                           ;dc_motor.c: 147:         (mL->power) = minPow;
  3171   0019C8  5013               	movf	turnLeft@mL^0,w,c
  3172   0019CA  6ED9               	movwf	fsr2l,c
  3173   0019CC  6ADA               	clrf	fsr2h,c
  3174   0019CE  0E0F               	movlw	15
  3175   0019D0  6EDF               	movwf	indf2,c
  3176   0019D2                     
  3177                           ;dc_motor.c: 148:         (mL->direction) = 0;
  3178   0019D2  5013               	movf	turnLeft@mL^0,w,c
  3179   0019D4  6ED9               	movwf	fsr2l,c
  3180   0019D6  6ADA               	clrf	fsr2h,c
  3181   0019D8  0E01               	movlw	1
  3182   0019DA  26D9               	addwf	fsr2l,f,c
  3183   0019DC  6ADF               	clrf	indf2,c
  3184   0019DE                     
  3185                           ;dc_motor.c: 149:         (mL->brakemode) = 0;
  3186   0019DE  5013               	movf	turnLeft@mL^0,w,c
  3187   0019E0  6ED9               	movwf	fsr2l,c
  3188   0019E2  6ADA               	clrf	fsr2h,c
  3189   0019E4  0E02               	movlw	2
  3190   0019E6  26D9               	addwf	fsr2l,f,c
  3191   0019E8  6ADF               	clrf	indf2,c
  3192   0019EA                     
  3193                           ;dc_motor.c: 151:         (mR->power) = minPow;
  3194   0019EA  5014               	movf	turnLeft@mR^0,w,c
  3195   0019EC  6ED9               	movwf	fsr2l,c
  3196   0019EE  6ADA               	clrf	fsr2h,c
  3197   0019F0  0E0F               	movlw	15
  3198   0019F2  6EDF               	movwf	indf2,c
  3199   0019F4                     
  3200                           ;dc_motor.c: 152:         (mR->direction) = 1;
  3201   0019F4  5014               	movf	turnLeft@mR^0,w,c
  3202   0019F6  6ED9               	movwf	fsr2l,c
  3203   0019F8  6ADA               	clrf	fsr2h,c
  3204   0019FA  0E01               	movlw	1
  3205   0019FC  26D9               	addwf	fsr2l,f,c
  3206   0019FE  0E01               	movlw	1
  3207   001A00  6EDF               	movwf	indf2,c
  3208   001A02                     
  3209                           ;dc_motor.c: 153:         (mR->brakemode) = 0;
  3210   001A02  5014               	movf	turnLeft@mR^0,w,c
  3211   001A04  6ED9               	movwf	fsr2l,c
  3212   001A06  6ADA               	clrf	fsr2h,c
  3213   001A08  0E02               	movlw	2
  3214   001A0A  26D9               	addwf	fsr2l,f,c
  3215   001A0C  6ADF               	clrf	indf2,c
  3216   001A0E                     
  3217                           ;dc_motor.c: 155:         setMotorPWM(mL);
  3218   001A0E  C013  F00D         	movff	turnLeft@mL,setMotorPWM@m
  3219   001A12  ECDE  F00A         	call	_setMotorPWM	;wreg free
  3220   001A16                     
  3221                           ;dc_motor.c: 156:         setMotorPWM(mR);
  3222   001A16  C014  F00D         	movff	turnLeft@mR,setMotorPWM@m
  3223   001A1A  ECDE  F00A         	call	_setMotorPWM	;wreg free
  3224   001A1E                     
  3225                           ;dc_motor.c: 158:         _delay((unsigned long)((300)*(64000000/4000.0)));
  3226   001A1E  0E19               	movlw	25
  3227   001A20  6E18               	movwf	(??_turnLeft+1)^0,c
  3228   001A22  0E5A               	movlw	90
  3229   001A24  6E17               	movwf	??_turnLeft^0,c
  3230   001A26  0EB2               	movlw	178
  3231   001A28                     u3027:
  3232   001A28  2EE8               	decfsz	wreg,f,c
  3233   001A2A  D7FE               	bra	u3027
  3234   001A2C  2E17               	decfsz	??_turnLeft^0,f,c
  3235   001A2E  D7FC               	bra	u3027
  3236   001A30  2E18               	decfsz	(??_turnLeft+1)^0,f,c
  3237   001A32  D7FA               	bra	u3027
  3238   001A34                     
  3239                           ;dc_motor.c: 160:         LATDbits.LATD4 = 0;
  3240   001A34  987C               	bcf	124,4,c	;volatile
  3241   001A36                     
  3242                           ;dc_motor.c: 161:     }
  3243   001A36  4A19               	infsnz	turnLeft@i^0,f,c
  3244   001A38  2A1A               	incf	(turnLeft@i+1)^0,f,c
  3245   001A3A                     l3001:
  3246   001A3A  5015               	movf	turnLeft@iter^0,w,c
  3247   001A3C  5C19               	subwf	turnLeft@i^0,w,c
  3248   001A3E  5016               	movf	(turnLeft@iter+1)^0,w,c
  3249   001A40  581A               	subwfb	(turnLeft@i+1)^0,w,c
  3250   001A42  A0D8               	btfss	status,0,c
  3251   001A44  EF26  F00D         	goto	u2131
  3252   001A48  EF28  F00D         	goto	u2130
  3253   001A4C                     u2131:
  3254   001A4C  EFA9  F00C         	goto	l2957
  3255   001A50                     u2130:
  3256   001A50  0012               	return		;funcret
  3257   001A52                     __end_of_turnLeft:
  3258                           	callstack 0
  3259                           
  3260 ;; *************** function _stop *****************
  3261 ;; Defined at:
  3262 ;;		line 103 in file "dc_motor.c"
  3263 ;; Parameters:    Size  Location     Type
  3264 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  3265 ;;		 -> useSequence@mL(8), 
  3266 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  3267 ;;		 -> useSequence@mR(8), 
  3268 ;; Auto vars:     Size  Location     Type
  3269 ;;		None
  3270 ;; Return value:  Size  Location     Type
  3271 ;;                  1    wreg      void 
  3272 ;; Registers used:
  3273 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3274 ;; Tracked objects:
  3275 ;;		On entry : 0/0
  3276 ;;		On exit  : 0/0
  3277 ;;		Unchanged: 0/0
  3278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3279 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3280 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3282 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3283 ;;Total ram usage:        2 bytes
  3284 ;; Hardware stack levels used: 1
  3285 ;; Hardware stack levels required when called: 4
  3286 ;; This function calls:
  3287 ;;		_setMotorPWM
  3288 ;; This function is called by:
  3289 ;;		_useSequence
  3290 ;; This function uses a non-reentrant model
  3291 ;;
  3292                           
  3293                           	psect	text18
  3294   00232E                     __ptext18:
  3295                           	callstack 0
  3296   00232E                     _stop:
  3297                           	callstack 22
  3298   00232E                     
  3299                           ;dc_motor.c: 103: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 104: {;dc_motor.c: 1
      +                          05:     (mL->power) = 10;
  3300   00232E  5013               	movf	stop@mL^0,w,c
  3301   002330  6ED9               	movwf	fsr2l,c
  3302   002332  6ADA               	clrf	fsr2h,c
  3303   002334  0E0A               	movlw	10
  3304   002336  6EDF               	movwf	indf2,c
  3305   002338                     
  3306                           ;dc_motor.c: 106:     (mL->direction) = 1;
  3307   002338  5013               	movf	stop@mL^0,w,c
  3308   00233A  6ED9               	movwf	fsr2l,c
  3309   00233C  6ADA               	clrf	fsr2h,c
  3310   00233E  0E01               	movlw	1
  3311   002340  26D9               	addwf	fsr2l,f,c
  3312   002342  0E01               	movlw	1
  3313   002344  6EDF               	movwf	indf2,c
  3314   002346                     
  3315                           ;dc_motor.c: 107:     (mL->brakemode) = 0;
  3316   002346  5013               	movf	stop@mL^0,w,c
  3317   002348  6ED9               	movwf	fsr2l,c
  3318   00234A  6ADA               	clrf	fsr2h,c
  3319   00234C  0E02               	movlw	2
  3320   00234E  26D9               	addwf	fsr2l,f,c
  3321   002350  6ADF               	clrf	indf2,c
  3322                           
  3323                           ;dc_motor.c: 109:     (mR->power) = 10;
  3324   002352  5014               	movf	stop@mR^0,w,c
  3325   002354  6ED9               	movwf	fsr2l,c
  3326   002356  6ADA               	clrf	fsr2h,c
  3327   002358  0E0A               	movlw	10
  3328   00235A  6EDF               	movwf	indf2,c
  3329   00235C                     
  3330                           ;dc_motor.c: 110:     (mR->direction) = 1;
  3331   00235C  5014               	movf	stop@mR^0,w,c
  3332   00235E  6ED9               	movwf	fsr2l,c
  3333   002360  6ADA               	clrf	fsr2h,c
  3334   002362  0E01               	movlw	1
  3335   002364  26D9               	addwf	fsr2l,f,c
  3336   002366  0E01               	movlw	1
  3337   002368  6EDF               	movwf	indf2,c
  3338   00236A                     
  3339                           ;dc_motor.c: 111:     (mR->brakemode) = 0;
  3340   00236A  5014               	movf	stop@mR^0,w,c
  3341   00236C  6ED9               	movwf	fsr2l,c
  3342   00236E  6ADA               	clrf	fsr2h,c
  3343   002370  0E02               	movlw	2
  3344   002372  26D9               	addwf	fsr2l,f,c
  3345   002374  6ADF               	clrf	indf2,c
  3346   002376                     
  3347                           ;dc_motor.c: 113:     setMotorPWM(mL);
  3348   002376  C013  F00D         	movff	stop@mL,setMotorPWM@m
  3349   00237A  ECDE  F00A         	call	_setMotorPWM	;wreg free
  3350   00237E                     
  3351                           ;dc_motor.c: 114:     setMotorPWM(mR);
  3352   00237E  C014  F00D         	movff	stop@mR,setMotorPWM@m
  3353   002382  ECDE  F00A         	call	_setMotorPWM	;wreg free
  3354   002386  0012               	return		;funcret
  3355   002388                     __end_of_stop:
  3356                           	callstack 0
  3357                           
  3358 ;; *************** function _goStraight *****************
  3359 ;; Defined at:
  3360 ;;		line 205 in file "dc_motor.c"
  3361 ;; Parameters:    Size  Location     Type
  3362 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  3363 ;;		 -> useSequence@mL(8), color2instruction@mL(8), 
  3364 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  3365 ;;		 -> useSequence@mR(8), color2instruction@mR(8), 
  3366 ;;  direction       2   20[COMRAM] unsigned int 
  3367 ;;  squares         2   22[COMRAM] int 
  3368 ;; Auto vars:     Size  Location     Type
  3369 ;;  maxPow          2    0        unsigned int 
  3370 ;;  i               2   26[COMRAM] int 
  3371 ;; Return value:  Size  Location     Type
  3372 ;;                  1    wreg      void 
  3373 ;; Registers used:
  3374 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3375 ;; Tracked objects:
  3376 ;;		On entry : 0/0
  3377 ;;		On exit  : 0/0
  3378 ;;		Unchanged: 0/0
  3379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3380 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3381 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3382 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3383 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3384 ;;Total ram usage:       10 bytes
  3385 ;; Hardware stack levels used: 1
  3386 ;; Hardware stack levels required when called: 4
  3387 ;; This function calls:
  3388 ;;		_setMotorPWM
  3389 ;; This function is called by:
  3390 ;;		_color2instruction
  3391 ;;		_useSequence
  3392 ;; This function uses a non-reentrant model
  3393 ;;
  3394                           
  3395                           	psect	text19
  3396   00144E                     __ptext19:
  3397                           	callstack 0
  3398   00144E                     _goStraight:
  3399                           	callstack 22
  3400   00144E                     
  3401                           ;dc_motor.c: 205: void goStraight(DC_motor *mL, DC_motor *mR, unsigned int direction, in
      +                          t squares);dc_motor.c: 206: {;dc_motor.c: 207:     if(squares != 0 && squares >0){
  3402   00144E  5017               	movf	goStraight@squares^0,w,c
  3403   001450  1018               	iorwf	(goStraight@squares+1)^0,w,c
  3404   001452  B4D8               	btfsc	status,2,c
  3405   001454  EF2E  F00A         	goto	u2221
  3406   001458  EF30  F00A         	goto	u2220
  3407   00145C                     u2221:
  3408   00145C  EFDD  F00A         	goto	l305
  3409   001460                     u2220:
  3410   001460  BE18               	btfsc	(goStraight@squares+1)^0,7,c
  3411   001462  EF3B  F00A         	goto	u2231
  3412   001466  5018               	movf	(goStraight@squares+1)^0,w,c
  3413   001468  E108               	bnz	u2230
  3414   00146A  0417               	decf	goStraight@squares^0,w,c
  3415   00146C  A0D8               	btfss	status,0,c
  3416   00146E  EF3B  F00A         	goto	u2231
  3417   001472  EF3D  F00A         	goto	u2230
  3418   001476                     u2231:
  3419   001476  EFDD  F00A         	goto	l305
  3420   00147A                     u2230:
  3421   00147A                     
  3422                           ;dc_motor.c: 208:     if(direction != 2 && direction <2){
  3423   00147A  0E02               	movlw	2
  3424   00147C  1815               	xorwf	goStraight@direction^0,w,c
  3425   00147E  1016               	iorwf	(goStraight@direction+1)^0,w,c
  3426   001480  B4D8               	btfsc	status,2,c
  3427   001482  EF45  F00A         	goto	u2241
  3428   001486  EF47  F00A         	goto	u2240
  3429   00148A                     u2241:
  3430   00148A  EFDD  F00A         	goto	l305
  3431   00148E                     u2240:
  3432   00148E  5016               	movf	(goStraight@direction+1)^0,w,c
  3433   001490  E107               	bnz	u2251
  3434   001492  0E02               	movlw	2
  3435   001494  5C15               	subwf	goStraight@direction^0,w,c
  3436   001496  B0D8               	btfsc	status,0,c
  3437   001498  EF50  F00A         	goto	u2251
  3438   00149C  EF52  F00A         	goto	u2250
  3439   0014A0                     u2251:
  3440   0014A0  EFDD  F00A         	goto	l305
  3441   0014A4                     u2250:
  3442   0014A4                     
  3443                           ;dc_motor.c: 209:     for(int i =0; i< squares; i++)
  3444   0014A4  0E00               	movlw	0
  3445   0014A6  6E1C               	movwf	(goStraight@i+1)^0,c
  3446   0014A8  0E00               	movlw	0
  3447   0014AA  6E1B               	movwf	goStraight@i^0,c
  3448   0014AC  EFCE  F00A         	goto	l3149
  3449   0014B0                     l3105:
  3450   0014B0                     
  3451                           ;dc_motor.c: 212:         (mL->power) = maxPow;
  3452   0014B0  5013               	movf	goStraight@mL^0,w,c
  3453   0014B2  6ED9               	movwf	fsr2l,c
  3454   0014B4  6ADA               	clrf	fsr2h,c
  3455   0014B6  0E2D               	movlw	45
  3456   0014B8  6EDF               	movwf	indf2,c
  3457   0014BA                     
  3458                           ;dc_motor.c: 214:         (mL->direction) = direction;
  3459   0014BA  5013               	movf	goStraight@mL^0,w,c
  3460   0014BC  6ED9               	movwf	fsr2l,c
  3461   0014BE  6ADA               	clrf	fsr2h,c
  3462   0014C0  0E01               	movlw	1
  3463   0014C2  26D9               	addwf	fsr2l,f,c
  3464   0014C4  C015  FFDF         	movff	goStraight@direction,indf2
  3465   0014C8                     
  3466                           ;dc_motor.c: 215:         (mL->brakemode) = 1;
  3467   0014C8  5013               	movf	goStraight@mL^0,w,c
  3468   0014CA  6ED9               	movwf	fsr2l,c
  3469   0014CC  6ADA               	clrf	fsr2h,c
  3470   0014CE  0E02               	movlw	2
  3471   0014D0  26D9               	addwf	fsr2l,f,c
  3472   0014D2  0E01               	movlw	1
  3473   0014D4  6EDF               	movwf	indf2,c
  3474   0014D6                     
  3475                           ;dc_motor.c: 217:         (mR->power) = maxPow;
  3476   0014D6  5014               	movf	goStraight@mR^0,w,c
  3477   0014D8  6ED9               	movwf	fsr2l,c
  3478   0014DA  6ADA               	clrf	fsr2h,c
  3479   0014DC  0E2D               	movlw	45
  3480   0014DE  6EDF               	movwf	indf2,c
  3481   0014E0                     
  3482                           ;dc_motor.c: 219:         (mR->direction) = direction;
  3483   0014E0  5014               	movf	goStraight@mR^0,w,c
  3484   0014E2  6ED9               	movwf	fsr2l,c
  3485   0014E4  6ADA               	clrf	fsr2h,c
  3486   0014E6  0E01               	movlw	1
  3487   0014E8  26D9               	addwf	fsr2l,f,c
  3488   0014EA  C015  FFDF         	movff	goStraight@direction,indf2
  3489   0014EE                     
  3490                           ;dc_motor.c: 220:         (mR->brakemode) = 1;
  3491   0014EE  5014               	movf	goStraight@mR^0,w,c
  3492   0014F0  6ED9               	movwf	fsr2l,c
  3493   0014F2  6ADA               	clrf	fsr2h,c
  3494   0014F4  0E02               	movlw	2
  3495   0014F6  26D9               	addwf	fsr2l,f,c
  3496   0014F8  0E01               	movlw	1
  3497   0014FA  6EDF               	movwf	indf2,c
  3498   0014FC                     
  3499                           ;dc_motor.c: 222:         setMotorPWM(mL);
  3500   0014FC  C013  F00D         	movff	goStraight@mL,setMotorPWM@m
  3501   001500  ECDE  F00A         	call	_setMotorPWM	;wreg free
  3502   001504                     
  3503                           ;dc_motor.c: 223:         setMotorPWM(mR);
  3504   001504  C014  F00D         	movff	goStraight@mR,setMotorPWM@m
  3505   001508  ECDE  F00A         	call	_setMotorPWM	;wreg free
  3506   00150C                     
  3507                           ;dc_motor.c: 225:         _delay((unsigned long)((850)*(64000000/4000.0)));
  3508   00150C  0E45               	movlw	69
  3509   00150E  6E1A               	movwf	(??_goStraight+1)^0,c
  3510   001510  0EFF               	movlw	255
  3511   001512  6E19               	movwf	??_goStraight^0,c
  3512   001514  0E26               	movlw	38
  3513   001516                     u3037:
  3514   001516  2EE8               	decfsz	wreg,f,c
  3515   001518  D7FE               	bra	u3037
  3516   00151A  2E19               	decfsz	??_goStraight^0,f,c
  3517   00151C  D7FC               	bra	u3037
  3518   00151E  2E1A               	decfsz	(??_goStraight+1)^0,f,c
  3519   001520  D7FA               	bra	u3037
  3520   001522  D000               	nop2	
  3521   001524                     
  3522                           ;dc_motor.c: 227:         LATDbits.LATD4 = 1;
  3523   001524  887C               	bsf	124,4,c	;volatile
  3524   001526                     
  3525                           ;dc_motor.c: 229:         (mL->power) = 15;
  3526   001526  5013               	movf	goStraight@mL^0,w,c
  3527   001528  6ED9               	movwf	fsr2l,c
  3528   00152A  6ADA               	clrf	fsr2h,c
  3529   00152C  0E0F               	movlw	15
  3530   00152E  6EDF               	movwf	indf2,c
  3531   001530                     
  3532                           ;dc_motor.c: 230:         (mL->direction) = direction;
  3533   001530  5013               	movf	goStraight@mL^0,w,c
  3534   001532  6ED9               	movwf	fsr2l,c
  3535   001534  6ADA               	clrf	fsr2h,c
  3536   001536  0E01               	movlw	1
  3537   001538  26D9               	addwf	fsr2l,f,c
  3538   00153A  C015  FFDF         	movff	goStraight@direction,indf2
  3539   00153E                     
  3540                           ;dc_motor.c: 231:         (mL->brakemode) = 0;
  3541   00153E  5013               	movf	goStraight@mL^0,w,c
  3542   001540  6ED9               	movwf	fsr2l,c
  3543   001542  6ADA               	clrf	fsr2h,c
  3544   001544  0E02               	movlw	2
  3545   001546  26D9               	addwf	fsr2l,f,c
  3546   001548  6ADF               	clrf	indf2,c
  3547   00154A                     
  3548                           ;dc_motor.c: 233:         (mR->power) = 15;
  3549   00154A  5014               	movf	goStraight@mR^0,w,c
  3550   00154C  6ED9               	movwf	fsr2l,c
  3551   00154E  6ADA               	clrf	fsr2h,c
  3552   001550  0E0F               	movlw	15
  3553   001552  6EDF               	movwf	indf2,c
  3554   001554                     
  3555                           ;dc_motor.c: 234:         (mR->direction) = direction;
  3556   001554  5014               	movf	goStraight@mR^0,w,c
  3557   001556  6ED9               	movwf	fsr2l,c
  3558   001558  6ADA               	clrf	fsr2h,c
  3559   00155A  0E01               	movlw	1
  3560   00155C  26D9               	addwf	fsr2l,f,c
  3561   00155E  C015  FFDF         	movff	goStraight@direction,indf2
  3562   001562                     
  3563                           ;dc_motor.c: 235:         (mR->brakemode) = 0;
  3564   001562  5014               	movf	goStraight@mR^0,w,c
  3565   001564  6ED9               	movwf	fsr2l,c
  3566   001566  6ADA               	clrf	fsr2h,c
  3567   001568  0E02               	movlw	2
  3568   00156A  26D9               	addwf	fsr2l,f,c
  3569   00156C  6ADF               	clrf	indf2,c
  3570   00156E                     
  3571                           ;dc_motor.c: 237:         setMotorPWM(mL);
  3572   00156E  C013  F00D         	movff	goStraight@mL,setMotorPWM@m
  3573   001572  ECDE  F00A         	call	_setMotorPWM	;wreg free
  3574   001576                     
  3575                           ;dc_motor.c: 238:         setMotorPWM(mR);
  3576   001576  C014  F00D         	movff	goStraight@mR,setMotorPWM@m
  3577   00157A  ECDE  F00A         	call	_setMotorPWM	;wreg free
  3578   00157E                     
  3579                           ;dc_motor.c: 240:         _delay((unsigned long)((250)*(64000000/4000.0)));
  3580   00157E  0E15               	movlw	21
  3581   001580  6E1A               	movwf	(??_goStraight+1)^0,c
  3582   001582  0E4B               	movlw	75
  3583   001584  6E19               	movwf	??_goStraight^0,c
  3584   001586  0EBE               	movlw	190
  3585   001588                     u3047:
  3586   001588  2EE8               	decfsz	wreg,f,c
  3587   00158A  D7FE               	bra	u3047
  3588   00158C  2E19               	decfsz	??_goStraight^0,f,c
  3589   00158E  D7FC               	bra	u3047
  3590   001590  2E1A               	decfsz	(??_goStraight+1)^0,f,c
  3591   001592  D7FA               	bra	u3047
  3592   001594  D000               	nop2	
  3593   001596                     
  3594                           ;dc_motor.c: 242:         LATDbits.LATD4 = 0;
  3595   001596  987C               	bcf	124,4,c	;volatile
  3596   001598                     
  3597                           ;dc_motor.c: 243:     }
  3598   001598  4A1B               	infsnz	goStraight@i^0,f,c
  3599   00159A  2A1C               	incf	(goStraight@i+1)^0,f,c
  3600   00159C                     l3149:
  3601   00159C  5017               	movf	goStraight@squares^0,w,c
  3602   00159E  5C1B               	subwf	goStraight@i^0,w,c
  3603   0015A0  501C               	movf	(goStraight@i+1)^0,w,c
  3604   0015A2  0A80               	xorlw	128
  3605   0015A4  6E19               	movwf	??_goStraight^0,c
  3606   0015A6  5018               	movf	(goStraight@squares+1)^0,w,c
  3607   0015A8  0A80               	xorlw	128
  3608   0015AA  5819               	subwfb	??_goStraight^0,w,c
  3609   0015AC  A0D8               	btfss	status,0,c
  3610   0015AE  EFDB  F00A         	goto	u2261
  3611   0015B2  EFDD  F00A         	goto	u2260
  3612   0015B6                     u2261:
  3613   0015B6  EF58  F00A         	goto	l3105
  3614   0015BA                     u2260:
  3615   0015BA                     l305:
  3616   0015BA  0012               	return		;funcret
  3617   0015BC                     __end_of_goStraight:
  3618                           	callstack 0
  3619                           
  3620 ;; *************** function _checkIncidence *****************
  3621 ;; Defined at:
  3622 ;;		line 182 in file "color.c"
  3623 ;; Parameters:    Size  Location     Type
  3624 ;;		None
  3625 ;; Auto vars:     Size  Location     Type
  3626 ;;  tmp            16   32[COMRAM] struct RGBC
  3627 ;; Return value:  Size  Location     Type
  3628 ;;                  1    wreg      void 
  3629 ;; Registers used:
  3630 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3631 ;; Tracked objects:
  3632 ;;		On entry : 0/0
  3633 ;;		On exit  : 0/0
  3634 ;;		Unchanged: 0/0
  3635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3637 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3638 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3639 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3640 ;;Total ram usage:       16 bytes
  3641 ;; Hardware stack levels used: 1
  3642 ;; Hardware stack levels required when called: 5
  3643 ;; This function calls:
  3644 ;;		_color_read_all
  3645 ;;		_triLED_tog
  3646 ;; This function is called by:
  3647 ;;		_color2instruction
  3648 ;; This function uses a non-reentrant model
  3649 ;;
  3650                           
  3651                           	psect	text20
  3652   002388                     __ptext20:
  3653                           	callstack 0
  3654   002388                     _checkIncidence:
  3655                           	callstack 23
  3656   002388                     
  3657                           ;color.c: 183:     triLED_tog(1);
  3658   002388  0E01               	movlw	1
  3659   00238A  ECCF  F012         	call	_triLED_tog
  3660   00238E                     
  3661                           ;color.c: 184:  RGBC tmp;;color.c: 187:  color_read_all(&tmp);
  3662   00238E  0E21               	movlw	low checkIncidence@tmp
  3663   002390  6E09               	movwf	color_read_all@readVals^0,c
  3664   002392  EC94  F008         	call	_color_read_all	;wreg free
  3665   002396                     
  3666                           ;color.c: 188:  if(tmp.clear > incidenceThresh){
  3667   002396  BE30               	btfsc	(checkIncidence@tmp+15)^0,7,c
  3668   002398  EFDA  F011         	goto	u2441
  3669   00239C  5030               	movf	(checkIncidence@tmp+15)^0,w,c
  3670   00239E  102F               	iorwf	(checkIncidence@tmp+14)^0,w,c
  3671   0023A0  E10B               	bnz	u2440
  3672   0023A2  0EF5               	movlw	245
  3673   0023A4  5C2D               	subwf	(checkIncidence@tmp+12)^0,w,c
  3674   0023A6  0E01               	movlw	1
  3675   0023A8  582E               	subwfb	(checkIncidence@tmp+13)^0,w,c
  3676   0023AA  A0D8               	btfss	status,0,c
  3677   0023AC  EFDA  F011         	goto	u2441
  3678   0023B0  EFDC  F011         	goto	u2440
  3679   0023B4                     u2441:
  3680   0023B4  EFE3  F011         	goto	l3293
  3681   0023B8                     u2440:
  3682   0023B8                     
  3683                           ;color.c: 189:   readingColor = 1;
  3684   0023B8  0E00               	movlw	0
  3685   0023BA  0101               	movlb	1	; () banked
  3686   0023BC  6FE0               	movwf	(_readingColor+1)& (0+255),b
  3687   0023BE  0E01               	movlw	1
  3688   0023C0  6FDF               	movwf	_readingColor& (0+255),b
  3689                           
  3690                           ;color.c: 190:  }
  3691   0023C2  EFE8  F011         	goto	l130
  3692   0023C6                     l3293:
  3693                           
  3694                           ;color.c: 192:   readingColor = 0;
  3695   0023C6  0E00               	movlw	0
  3696   0023C8  0101               	movlb	1	; () banked
  3697   0023CA  6FE0               	movwf	(_readingColor+1)& (0+255),b
  3698   0023CC  0E00               	movlw	0
  3699   0023CE  6FDF               	movwf	_readingColor& (0+255),b
  3700   0023D0                     l130:
  3701                           
  3702                           ; BSR set to: 1
  3703   0023D0  0012               	return		;funcret
  3704   0023D2                     __end_of_checkIncidence:
  3705                           	callstack 0
  3706                           
  3707 ;; *************** function _bump *****************
  3708 ;; Defined at:
  3709 ;;		line 248 in file "dc_motor.c"
  3710 ;; Parameters:    Size  Location     Type
  3711 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  3712 ;;		 -> color2instruction@mL(8), 
  3713 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  3714 ;;		 -> color2instruction@mR(8), 
  3715 ;;  direction       2   20[COMRAM] unsigned int 
  3716 ;; Auto vars:     Size  Location     Type
  3717 ;;		None
  3718 ;; Return value:  Size  Location     Type
  3719 ;;                  1    wreg      void 
  3720 ;; Registers used:
  3721 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3722 ;; Tracked objects:
  3723 ;;		On entry : 0/0
  3724 ;;		On exit  : 0/0
  3725 ;;		Unchanged: 0/0
  3726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3727 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3728 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3729 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3730 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3731 ;;Total ram usage:        6 bytes
  3732 ;; Hardware stack levels used: 1
  3733 ;; Hardware stack levels required when called: 4
  3734 ;; This function calls:
  3735 ;;		_setMotorPWM
  3736 ;; This function is called by:
  3737 ;;		_color2instruction
  3738 ;; This function uses a non-reentrant model
  3739 ;;
  3740                           
  3741                           	psect	text21
  3742   001C60                     __ptext21:
  3743                           	callstack 0
  3744   001C60                     _bump:
  3745                           	callstack 24
  3746   001C60                     
  3747                           ;dc_motor.c: 248: void bump(DC_motor *mL, DC_motor *mR, unsigned int direction);dc_motor
      +                          .c: 249: {;dc_motor.c: 250:     (mL->power) = 35;
  3748   001C60  5013               	movf	bump@mL^0,w,c
  3749   001C62  6ED9               	movwf	fsr2l,c
  3750   001C64  6ADA               	clrf	fsr2h,c
  3751   001C66  0E23               	movlw	35
  3752   001C68  6EDF               	movwf	indf2,c
  3753   001C6A                     
  3754                           ;dc_motor.c: 251:     (mL->direction) = direction;
  3755   001C6A  5013               	movf	bump@mL^0,w,c
  3756   001C6C  6ED9               	movwf	fsr2l,c
  3757   001C6E  6ADA               	clrf	fsr2h,c
  3758   001C70  0E01               	movlw	1
  3759   001C72  26D9               	addwf	fsr2l,f,c
  3760   001C74  C015  FFDF         	movff	bump@direction,indf2
  3761   001C78                     
  3762                           ;dc_motor.c: 252:     (mL->brakemode) = 1;
  3763   001C78  5013               	movf	bump@mL^0,w,c
  3764   001C7A  6ED9               	movwf	fsr2l,c
  3765   001C7C  6ADA               	clrf	fsr2h,c
  3766   001C7E  0E02               	movlw	2
  3767   001C80  26D9               	addwf	fsr2l,f,c
  3768   001C82  0E01               	movlw	1
  3769   001C84  6EDF               	movwf	indf2,c
  3770                           
  3771                           ;dc_motor.c: 254:     (mR->power) = 35;
  3772   001C86  5014               	movf	bump@mR^0,w,c
  3773   001C88  6ED9               	movwf	fsr2l,c
  3774   001C8A  6ADA               	clrf	fsr2h,c
  3775   001C8C  0E23               	movlw	35
  3776   001C8E  6EDF               	movwf	indf2,c
  3777   001C90                     
  3778                           ;dc_motor.c: 255:     (mR->direction) = direction;
  3779   001C90  5014               	movf	bump@mR^0,w,c
  3780   001C92  6ED9               	movwf	fsr2l,c
  3781   001C94  6ADA               	clrf	fsr2h,c
  3782   001C96  0E01               	movlw	1
  3783   001C98  26D9               	addwf	fsr2l,f,c
  3784   001C9A  C015  FFDF         	movff	bump@direction,indf2
  3785   001C9E                     
  3786                           ;dc_motor.c: 256:     (mR->brakemode) = 1;
  3787   001C9E  5014               	movf	bump@mR^0,w,c
  3788   001CA0  6ED9               	movwf	fsr2l,c
  3789   001CA2  6ADA               	clrf	fsr2h,c
  3790   001CA4  0E02               	movlw	2
  3791   001CA6  26D9               	addwf	fsr2l,f,c
  3792   001CA8  0E01               	movlw	1
  3793   001CAA  6EDF               	movwf	indf2,c
  3794   001CAC                     
  3795                           ;dc_motor.c: 258:     setMotorPWM(mL);
  3796   001CAC  C013  F00D         	movff	bump@mL,setMotorPWM@m
  3797   001CB0  ECDE  F00A         	call	_setMotorPWM	;wreg free
  3798   001CB4                     
  3799                           ;dc_motor.c: 259:     setMotorPWM(mR);
  3800   001CB4  C014  F00D         	movff	bump@mR,setMotorPWM@m
  3801   001CB8  ECDE  F00A         	call	_setMotorPWM	;wreg free
  3802   001CBC                     
  3803                           ;dc_motor.c: 261:     _delay((unsigned long)((400)*(64000000/4000.0)));
  3804   001CBC  0E21               	movlw	33
  3805   001CBE  6E18               	movwf	(??_bump+1)^0,c
  3806   001CC0  0E78               	movlw	120
  3807   001CC2  6E17               	movwf	??_bump^0,c
  3808   001CC4  0E98               	movlw	152
  3809   001CC6                     u3057:
  3810   001CC6  2EE8               	decfsz	wreg,f,c
  3811   001CC8  D7FE               	bra	u3057
  3812   001CCA  2E17               	decfsz	??_bump^0,f,c
  3813   001CCC  D7FC               	bra	u3057
  3814   001CCE  2E18               	decfsz	(??_bump+1)^0,f,c
  3815   001CD0  D7FA               	bra	u3057
  3816   001CD2  D000               	nop2	
  3817   001CD4                     
  3818                           ;dc_motor.c: 263:     LATDbits.LATD4 = 1;
  3819   001CD4  887C               	bsf	124,4,c	;volatile
  3820   001CD6                     
  3821                           ;dc_motor.c: 265:     (mL->power) = 15;
  3822   001CD6  5013               	movf	bump@mL^0,w,c
  3823   001CD8  6ED9               	movwf	fsr2l,c
  3824   001CDA  6ADA               	clrf	fsr2h,c
  3825   001CDC  0E0F               	movlw	15
  3826   001CDE  6EDF               	movwf	indf2,c
  3827   001CE0                     
  3828                           ;dc_motor.c: 266:     (mL->direction) = direction;
  3829   001CE0  5013               	movf	bump@mL^0,w,c
  3830   001CE2  6ED9               	movwf	fsr2l,c
  3831   001CE4  6ADA               	clrf	fsr2h,c
  3832   001CE6  0E01               	movlw	1
  3833   001CE8  26D9               	addwf	fsr2l,f,c
  3834   001CEA  C015  FFDF         	movff	bump@direction,indf2
  3835   001CEE                     
  3836                           ;dc_motor.c: 267:     (mL->brakemode) = 0;
  3837   001CEE  5013               	movf	bump@mL^0,w,c
  3838   001CF0  6ED9               	movwf	fsr2l,c
  3839   001CF2  6ADA               	clrf	fsr2h,c
  3840   001CF4  0E02               	movlw	2
  3841   001CF6  26D9               	addwf	fsr2l,f,c
  3842   001CF8  6ADF               	clrf	indf2,c
  3843   001CFA                     
  3844                           ;dc_motor.c: 269:     (mR->power) = 15;
  3845   001CFA  5014               	movf	bump@mR^0,w,c
  3846   001CFC  6ED9               	movwf	fsr2l,c
  3847   001CFE  6ADA               	clrf	fsr2h,c
  3848   001D00  0E0F               	movlw	15
  3849   001D02  6EDF               	movwf	indf2,c
  3850   001D04                     
  3851                           ;dc_motor.c: 270:     (mR->direction) = direction;
  3852   001D04  5014               	movf	bump@mR^0,w,c
  3853   001D06  6ED9               	movwf	fsr2l,c
  3854   001D08  6ADA               	clrf	fsr2h,c
  3855   001D0A  0E01               	movlw	1
  3856   001D0C  26D9               	addwf	fsr2l,f,c
  3857   001D0E  C015  FFDF         	movff	bump@direction,indf2
  3858   001D12                     
  3859                           ;dc_motor.c: 271:     (mR->brakemode) = 0;
  3860   001D12  5014               	movf	bump@mR^0,w,c
  3861   001D14  6ED9               	movwf	fsr2l,c
  3862   001D16  6ADA               	clrf	fsr2h,c
  3863   001D18  0E02               	movlw	2
  3864   001D1A  26D9               	addwf	fsr2l,f,c
  3865   001D1C  6ADF               	clrf	indf2,c
  3866   001D1E                     
  3867                           ;dc_motor.c: 273:     setMotorPWM(mL);
  3868   001D1E  C013  F00D         	movff	bump@mL,setMotorPWM@m
  3869   001D22  ECDE  F00A         	call	_setMotorPWM	;wreg free
  3870   001D26                     
  3871                           ;dc_motor.c: 274:     setMotorPWM(mR);
  3872   001D26  C014  F00D         	movff	bump@mR,setMotorPWM@m
  3873   001D2A  ECDE  F00A         	call	_setMotorPWM	;wreg free
  3874   001D2E                     
  3875                           ;dc_motor.c: 276:     _delay((unsigned long)((200)*(64000000/4000.0)));
  3876   001D2E  0E11               	movlw	17
  3877   001D30  6E18               	movwf	(??_bump+1)^0,c
  3878   001D32  0E3C               	movlw	60
  3879   001D34  6E17               	movwf	??_bump^0,c
  3880   001D36  0ECB               	movlw	203
  3881   001D38                     u3067:
  3882   001D38  2EE8               	decfsz	wreg,f,c
  3883   001D3A  D7FE               	bra	u3067
  3884   001D3C  2E17               	decfsz	??_bump^0,f,c
  3885   001D3E  D7FC               	bra	u3067
  3886   001D40  2E18               	decfsz	(??_bump+1)^0,f,c
  3887   001D42  D7FA               	bra	u3067
  3888   001D44  0000               	nop	
  3889   001D46                     
  3890                           ;dc_motor.c: 278:     LATDbits.LATD4 = 0;
  3891   001D46  987C               	bcf	124,4,c	;volatile
  3892   001D48  0012               	return		;funcret
  3893   001D4A                     __end_of_bump:
  3894                           	callstack 0
  3895                           
  3896 ;; *************** function _setMotorPWM *****************
  3897 ;; Defined at:
  3898 ;;		line 80 in file "dc_motor.c"
  3899 ;; Parameters:    Size  Location     Type
  3900 ;;  m               1   12[COMRAM] PTR struct DC_motor
  3901 ;;		 -> turn@mR(8), turn@mL(8), dance@mR(8), dance@mL(8), 
  3902 ;;		 -> useSequence@mR(8), useSequence@mL(8), color2instruction@mR(8), color2instruction@mL(8), 
  3903 ;; Auto vars:     Size  Location     Type
  3904 ;;  negDuty         1   17[COMRAM] unsigned char 
  3905 ;;  posDuty         1   16[COMRAM] unsigned char 
  3906 ;; Return value:  Size  Location     Type
  3907 ;;                  1    wreg      void 
  3908 ;; Registers used:
  3909 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3910 ;; Tracked objects:
  3911 ;;		On entry : 0/0
  3912 ;;		On exit  : 0/0
  3913 ;;		Unchanged: 0/0
  3914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3915 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3916 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3917 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3918 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3919 ;;Total ram usage:        6 bytes
  3920 ;; Hardware stack levels used: 1
  3921 ;; Hardware stack levels required when called: 3
  3922 ;; This function calls:
  3923 ;;		___awdiv
  3924 ;; This function is called by:
  3925 ;;		_stop
  3926 ;;		_turnLeft
  3927 ;;		_turnRight
  3928 ;;		_goStraight
  3929 ;;		_bump
  3930 ;; This function uses a non-reentrant model
  3931 ;;
  3932                           
  3933                           	psect	text22
  3934   0015BC                     __ptext22:
  3935                           	callstack 0
  3936   0015BC                     _setMotorPWM:
  3937                           	callstack 23
  3938   0015BC                     
  3939                           ;dc_motor.c: 80: void setMotorPWM(DC_motor *m);dc_motor.c: 81: {;dc_motor.c: 82:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 84:     if(m->brakemode) {
  3940   0015BC  500D               	movf	setMotorPWM@m^0,w,c
  3941   0015BE  6ED9               	movwf	fsr2l,c
  3942   0015C0  6ADA               	clrf	fsr2h,c
  3943   0015C2  0E02               	movlw	2
  3944   0015C4  26D9               	addwf	fsr2l,f,c
  3945   0015C6  50DF               	movf	indf2,w,c
  3946   0015C8  B4D8               	btfsc	status,2,c
  3947   0015CA  EFE9  F00A         	goto	u2111
  3948   0015CE  EFEB  F00A         	goto	u2110
  3949   0015D2                     u2111:
  3950   0015D2  EF16  F00B         	goto	l2945
  3951   0015D6                     u2110:
  3952   0015D6                     
  3953                           ;dc_motor.c: 85:         posDuty=m->PWMperiod - ((unsigned char)(m->power)*(m->PWMperiod
      +                          ))/100;
  3954   0015D6  500D               	movf	setMotorPWM@m^0,w,c
  3955   0015D8  6ED9               	movwf	fsr2l,c
  3956   0015DA  6ADA               	clrf	fsr2h,c
  3957   0015DC  0E03               	movlw	3
  3958   0015DE  26D9               	addwf	fsr2l,f,c
  3959   0015E0  50DF               	movf	indf2,w,c
  3960   0015E2  6E0E               	movwf	??_setMotorPWM^0,c
  3961   0015E4  500D               	movf	setMotorPWM@m^0,w,c
  3962   0015E6  6ED9               	movwf	fsr2l,c
  3963   0015E8  6ADA               	clrf	fsr2h,c
  3964   0015EA  50DF               	movf	indf2,w,c
  3965   0015EC  6E0F               	movwf	(??_setMotorPWM+1)^0,c
  3966   0015EE  500F               	movf	(??_setMotorPWM+1)^0,w,c
  3967   0015F0  020E               	mulwf	??_setMotorPWM^0,c
  3968   0015F2  CFF3 F005          	movff	prodl,___awdiv@dividend
  3969   0015F6  CFF4 F006          	movff	prodh,___awdiv@dividend+1
  3970   0015FA  0E00               	movlw	0
  3971   0015FC  6E08               	movwf	(___awdiv@divisor+1)^0,c
  3972   0015FE  0E64               	movlw	100
  3973   001600  6E07               	movwf	___awdiv@divisor^0,c
  3974   001602  EC11  F00F         	call	___awdiv	;wreg free
  3975   001606  500D               	movf	setMotorPWM@m^0,w,c
  3976   001608  6ED9               	movwf	fsr2l,c
  3977   00160A  6ADA               	clrf	fsr2h,c
  3978   00160C  0E03               	movlw	3
  3979   00160E  26D9               	addwf	fsr2l,f,c
  3980   001610  50DF               	movf	indf2,w,c
  3981   001612  6E10               	movwf	(??_setMotorPWM+2)^0,c
  3982   001614  5005               	movf	?___awdiv^0,w,c
  3983   001616  5C10               	subwf	(??_setMotorPWM+2)^0,w,c
  3984   001618  6E11               	movwf	setMotorPWM@posDuty^0,c
  3985   00161A                     
  3986                           ;dc_motor.c: 86:         negDuty=m->PWMperiod;
  3987   00161A  500D               	movf	setMotorPWM@m^0,w,c
  3988   00161C  6ED9               	movwf	fsr2l,c
  3989   00161E  6ADA               	clrf	fsr2h,c
  3990   001620  0E03               	movlw	3
  3991   001622  26D9               	addwf	fsr2l,f,c
  3992   001624  50DF               	movf	indf2,w,c
  3993   001626  6E12               	movwf	setMotorPWM@negDuty^0,c
  3994                           
  3995                           ;dc_motor.c: 87:     }
  3996   001628  EF32  F00B         	goto	l2949
  3997   00162C                     l2945:
  3998                           
  3999                           ;dc_motor.c: 89:         posDuty=0;
  4000   00162C  0E00               	movlw	0
  4001   00162E  6E11               	movwf	setMotorPWM@posDuty^0,c
  4002   001630                     
  4003                           ;dc_motor.c: 90:   negDuty=((unsigned char)(m->power)*(m->PWMperiod))/100;
  4004   001630  500D               	movf	setMotorPWM@m^0,w,c
  4005   001632  6ED9               	movwf	fsr2l,c
  4006   001634  6ADA               	clrf	fsr2h,c
  4007   001636  0E03               	movlw	3
  4008   001638  26D9               	addwf	fsr2l,f,c
  4009   00163A  50DF               	movf	indf2,w,c
  4010   00163C  6E0E               	movwf	??_setMotorPWM^0,c
  4011   00163E  500D               	movf	setMotorPWM@m^0,w,c
  4012   001640  6ED9               	movwf	fsr2l,c
  4013   001642  6ADA               	clrf	fsr2h,c
  4014   001644  50DF               	movf	indf2,w,c
  4015   001646  6E0F               	movwf	(??_setMotorPWM+1)^0,c
  4016   001648  500F               	movf	(??_setMotorPWM+1)^0,w,c
  4017   00164A  020E               	mulwf	??_setMotorPWM^0,c
  4018   00164C  CFF3 F005          	movff	prodl,___awdiv@dividend
  4019   001650  CFF4 F006          	movff	prodh,___awdiv@dividend+1
  4020   001654  0E00               	movlw	0
  4021   001656  6E08               	movwf	(___awdiv@divisor+1)^0,c
  4022   001658  0E64               	movlw	100
  4023   00165A  6E07               	movwf	___awdiv@divisor^0,c
  4024   00165C  EC11  F00F         	call	___awdiv	;wreg free
  4025   001660  5005               	movf	?___awdiv^0,w,c
  4026   001662  6E12               	movwf	setMotorPWM@negDuty^0,c
  4027   001664                     l2949:
  4028                           
  4029                           ;dc_motor.c: 93:     if (m->direction) {
  4030   001664  500D               	movf	setMotorPWM@m^0,w,c
  4031   001666  6ED9               	movwf	fsr2l,c
  4032   001668  6ADA               	clrf	fsr2h,c
  4033   00166A  0E01               	movlw	1
  4034   00166C  26D9               	addwf	fsr2l,f,c
  4035   00166E  50DF               	movf	indf2,w,c
  4036   001670  B4D8               	btfsc	status,2,c
  4037   001672  EF3D  F00B         	goto	u2121
  4038   001676  EF3F  F00B         	goto	u2120
  4039   00167A                     u2121:
  4040   00167A  EF5F  F00B         	goto	l2953
  4041   00167E                     u2120:
  4042   00167E                     
  4043                           ;dc_motor.c: 94:         *(m->posDutyHighByte)=posDuty;
  4044   00167E  500D               	movf	setMotorPWM@m^0,w,c
  4045   001680  6ED9               	movwf	fsr2l,c
  4046   001682  6ADA               	clrf	fsr2h,c
  4047   001684  0E04               	movlw	4
  4048   001686  26D9               	addwf	fsr2l,f,c
  4049   001688  CFDE F00E          	movff	postinc2,??_setMotorPWM
  4050   00168C  CFDD F00F          	movff	postdec2,??_setMotorPWM+1
  4051   001690  C00E  FFD9         	movff	??_setMotorPWM,fsr2l
  4052   001694  C00F  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4053   001698  C011  FFDF         	movff	setMotorPWM@posDuty,indf2
  4054                           
  4055                           ;dc_motor.c: 95:         *(m->negDutyHighByte)=negDuty;
  4056   00169C  500D               	movf	setMotorPWM@m^0,w,c
  4057   00169E  6ED9               	movwf	fsr2l,c
  4058   0016A0  6ADA               	clrf	fsr2h,c
  4059   0016A2  0E06               	movlw	6
  4060   0016A4  26D9               	addwf	fsr2l,f,c
  4061   0016A6  CFDE F00E          	movff	postinc2,??_setMotorPWM
  4062   0016AA  CFDD F00F          	movff	postdec2,??_setMotorPWM+1
  4063   0016AE  C00E  FFD9         	movff	??_setMotorPWM,fsr2l
  4064   0016B2  C00F  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4065   0016B6  C012  FFDF         	movff	setMotorPWM@negDuty,indf2
  4066                           
  4067                           ;dc_motor.c: 96:     } else {
  4068   0016BA  EF7D  F00B         	goto	l278
  4069   0016BE                     l2953:
  4070                           
  4071                           ;dc_motor.c: 97:         *(m->posDutyHighByte)=negDuty;
  4072   0016BE  500D               	movf	setMotorPWM@m^0,w,c
  4073   0016C0  6ED9               	movwf	fsr2l,c
  4074   0016C2  6ADA               	clrf	fsr2h,c
  4075   0016C4  0E04               	movlw	4
  4076   0016C6  26D9               	addwf	fsr2l,f,c
  4077   0016C8  CFDE F00E          	movff	postinc2,??_setMotorPWM
  4078   0016CC  CFDD F00F          	movff	postdec2,??_setMotorPWM+1
  4079   0016D0  C00E  FFD9         	movff	??_setMotorPWM,fsr2l
  4080   0016D4  C00F  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4081   0016D8  C012  FFDF         	movff	setMotorPWM@negDuty,indf2
  4082                           
  4083                           ;dc_motor.c: 98:         *(m->negDutyHighByte)=posDuty;
  4084   0016DC  500D               	movf	setMotorPWM@m^0,w,c
  4085   0016DE  6ED9               	movwf	fsr2l,c
  4086   0016E0  6ADA               	clrf	fsr2h,c
  4087   0016E2  0E06               	movlw	6
  4088   0016E4  26D9               	addwf	fsr2l,f,c
  4089   0016E6  CFDE F00E          	movff	postinc2,??_setMotorPWM
  4090   0016EA  CFDD F00F          	movff	postdec2,??_setMotorPWM+1
  4091   0016EE  C00E  FFD9         	movff	??_setMotorPWM,fsr2l
  4092   0016F2  C00F  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4093   0016F6  C011  FFDF         	movff	setMotorPWM@posDuty,indf2
  4094   0016FA                     l278:
  4095   0016FA  0012               	return		;funcret
  4096   0016FC                     __end_of_setMotorPWM:
  4097                           	callstack 0
  4098                           
  4099 ;; *************** function ___awdiv *****************
  4100 ;; Defined at:
  4101 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  4102 ;; Parameters:    Size  Location     Type
  4103 ;;  dividend        2    4[COMRAM] int 
  4104 ;;  divisor         2    6[COMRAM] int 
  4105 ;; Auto vars:     Size  Location     Type
  4106 ;;  quotient        2   10[COMRAM] int 
  4107 ;;  sign            1    9[COMRAM] unsigned char 
  4108 ;;  counter         1    8[COMRAM] unsigned char 
  4109 ;; Return value:  Size  Location     Type
  4110 ;;                  2    4[COMRAM] int 
  4111 ;; Registers used:
  4112 ;;		wreg, status,2, status,0
  4113 ;; Tracked objects:
  4114 ;;		On entry : 0/0
  4115 ;;		On exit  : 0/0
  4116 ;;		Unchanged: 0/0
  4117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4118 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4119 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4120 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4121 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4122 ;;Total ram usage:        8 bytes
  4123 ;; Hardware stack levels used: 1
  4124 ;; Hardware stack levels required when called: 2
  4125 ;; This function calls:
  4126 ;;		Nothing
  4127 ;; This function is called by:
  4128 ;;		_setMotorPWM
  4129 ;; This function uses a non-reentrant model
  4130 ;;
  4131                           
  4132                           	psect	text23
  4133   001E22                     __ptext23:
  4134                           	callstack 0
  4135   001E22                     ___awdiv:
  4136                           	callstack 23
  4137   001E22  0E00               	movlw	0
  4138   001E24  6E0A               	movwf	___awdiv@sign^0,c
  4139   001E26  BE08               	btfsc	(___awdiv@divisor+1)^0,7,c
  4140   001E28  EF1A  F00F         	goto	u2050
  4141   001E2C  EF18  F00F         	goto	u2051
  4142   001E30                     u2051:
  4143   001E30  EF20  F00F         	goto	l2903
  4144   001E34                     u2050:
  4145   001E34  6C07               	negf	___awdiv@divisor^0,c
  4146   001E36  1E08               	comf	(___awdiv@divisor+1)^0,f,c
  4147   001E38  B0D8               	btfsc	status,0,c
  4148   001E3A  2A08               	incf	(___awdiv@divisor+1)^0,f,c
  4149   001E3C  0E01               	movlw	1
  4150   001E3E  6E0A               	movwf	___awdiv@sign^0,c
  4151   001E40                     l2903:
  4152   001E40  BE06               	btfsc	(___awdiv@dividend+1)^0,7,c
  4153   001E42  EF27  F00F         	goto	u2060
  4154   001E46  EF25  F00F         	goto	u2061
  4155   001E4A                     u2061:
  4156   001E4A  EF2D  F00F         	goto	l2909
  4157   001E4E                     u2060:
  4158   001E4E  6C05               	negf	___awdiv@dividend^0,c
  4159   001E50  1E06               	comf	(___awdiv@dividend+1)^0,f,c
  4160   001E52  B0D8               	btfsc	status,0,c
  4161   001E54  2A06               	incf	(___awdiv@dividend+1)^0,f,c
  4162   001E56  0E01               	movlw	1
  4163   001E58  1A0A               	xorwf	___awdiv@sign^0,f,c
  4164   001E5A                     l2909:
  4165   001E5A  0E00               	movlw	0
  4166   001E5C  6E0C               	movwf	(___awdiv@quotient+1)^0,c
  4167   001E5E  0E00               	movlw	0
  4168   001E60  6E0B               	movwf	___awdiv@quotient^0,c
  4169   001E62  5007               	movf	___awdiv@divisor^0,w,c
  4170   001E64  1008               	iorwf	(___awdiv@divisor+1)^0,w,c
  4171   001E66  B4D8               	btfsc	status,2,c
  4172   001E68  EF38  F00F         	goto	u2071
  4173   001E6C  EF3A  F00F         	goto	u2070
  4174   001E70                     u2071:
  4175   001E70  EF62  F00F         	goto	l2931
  4176   001E74                     u2070:
  4177   001E74  0E01               	movlw	1
  4178   001E76  6E09               	movwf	___awdiv@counter^0,c
  4179   001E78  EF42  F00F         	goto	l2917
  4180   001E7C                     l2915:
  4181   001E7C  90D8               	bcf	status,0,c
  4182   001E7E  3607               	rlcf	___awdiv@divisor^0,f,c
  4183   001E80  3608               	rlcf	(___awdiv@divisor+1)^0,f,c
  4184   001E82  2A09               	incf	___awdiv@counter^0,f,c
  4185   001E84                     l2917:
  4186   001E84  AE08               	btfss	(___awdiv@divisor+1)^0,7,c
  4187   001E86  EF47  F00F         	goto	u2081
  4188   001E8A  EF49  F00F         	goto	u2080
  4189   001E8E                     u2081:
  4190   001E8E  EF3E  F00F         	goto	l2915
  4191   001E92                     u2080:
  4192   001E92                     l2919:
  4193   001E92  90D8               	bcf	status,0,c
  4194   001E94  360B               	rlcf	___awdiv@quotient^0,f,c
  4195   001E96  360C               	rlcf	(___awdiv@quotient+1)^0,f,c
  4196   001E98  5007               	movf	___awdiv@divisor^0,w,c
  4197   001E9A  5C05               	subwf	___awdiv@dividend^0,w,c
  4198   001E9C  5008               	movf	(___awdiv@divisor+1)^0,w,c
  4199   001E9E  5806               	subwfb	(___awdiv@dividend+1)^0,w,c
  4200   001EA0  A0D8               	btfss	status,0,c
  4201   001EA2  EF55  F00F         	goto	u2091
  4202   001EA6  EF57  F00F         	goto	u2090
  4203   001EAA                     u2091:
  4204   001EAA  EF5C  F00F         	goto	l2927
  4205   001EAE                     u2090:
  4206   001EAE  5007               	movf	___awdiv@divisor^0,w,c
  4207   001EB0  5E05               	subwf	___awdiv@dividend^0,f,c
  4208   001EB2  5008               	movf	(___awdiv@divisor+1)^0,w,c
  4209   001EB4  5A06               	subwfb	(___awdiv@dividend+1)^0,f,c
  4210   001EB6  800B               	bsf	___awdiv@quotient^0,0,c
  4211   001EB8                     l2927:
  4212   001EB8  90D8               	bcf	status,0,c
  4213   001EBA  3208               	rrcf	(___awdiv@divisor+1)^0,f,c
  4214   001EBC  3207               	rrcf	___awdiv@divisor^0,f,c
  4215   001EBE  2E09               	decfsz	___awdiv@counter^0,f,c
  4216   001EC0  EF49  F00F         	goto	l2919
  4217   001EC4                     l2931:
  4218   001EC4  500A               	movf	___awdiv@sign^0,w,c
  4219   001EC6  B4D8               	btfsc	status,2,c
  4220   001EC8  EF68  F00F         	goto	u2101
  4221   001ECC  EF6A  F00F         	goto	u2100
  4222   001ED0                     u2101:
  4223   001ED0  EF6E  F00F         	goto	l2935
  4224   001ED4                     u2100:
  4225   001ED4  6C0B               	negf	___awdiv@quotient^0,c
  4226   001ED6  1E0C               	comf	(___awdiv@quotient+1)^0,f,c
  4227   001ED8  B0D8               	btfsc	status,0,c
  4228   001EDA  2A0C               	incf	(___awdiv@quotient+1)^0,f,c
  4229   001EDC                     l2935:
  4230   001EDC  C00B  F005         	movff	___awdiv@quotient,?___awdiv
  4231   001EE0  C00C  F006         	movff	___awdiv@quotient+1,?___awdiv+1
  4232   001EE4  0012               	return		;funcret
  4233   001EE6                     __end_of___awdiv:
  4234                           	callstack 0
  4235                           
  4236 ;; *************** function _checkWhite *****************
  4237 ;; Defined at:
  4238 ;;		line 197 in file "color.c"
  4239 ;; Parameters:    Size  Location     Type
  4240 ;;		None
  4241 ;; Auto vars:     Size  Location     Type
  4242 ;;  tmp            27   69[BANK0 ] struct color
  4243 ;; Return value:  Size  Location     Type
  4244 ;;                  1    wreg      void 
  4245 ;; Registers used:
  4246 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4247 ;; Tracked objects:
  4248 ;;		On entry : 0/0
  4249 ;;		On exit  : 0/0
  4250 ;;		Unchanged: 0/0
  4251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4253 ;;      Locals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4255 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4256 ;;Total ram usage:       27 bytes
  4257 ;; Hardware stack levels used: 1
  4258 ;; Hardware stack levels required when called: 6
  4259 ;; This function calls:
  4260 ;;		_checkColor
  4261 ;;		_triLED_tog
  4262 ;; This function is called by:
  4263 ;;		_away
  4264 ;; This function uses a non-reentrant model
  4265 ;;
  4266                           
  4267                           	psect	text24
  4268   001B5E                     __ptext24:
  4269                           	callstack 0
  4270   001B5E                     _checkWhite:
  4271                           	callstack 23
  4272   001B5E                     
  4273                           ;color.c: 198:  triLED_tog(1);
  4274   001B5E  0E01               	movlw	1
  4275   001B60  ECCF  F012         	call	_triLED_tog
  4276   001B64                     
  4277                           ;color.c: 199:  color tmp = checkColor();
  4278   001B64  EC1F  F007         	call	_checkColor	;wreg free
  4279   001B68  EE20  F0A5         	lfsr	2,checkWhite@tmp
  4280   001B6C  0E1A               	movlw	26
  4281   001B6E                     u2531:
  4282   001B6E  CFEB FFDB          	movff	plusw0,plusw2
  4283   001B72  06E8               	decf	wreg,f,c
  4284   001B74  E2FC               	bc	u2531
  4285   001B76                     
  4286                           ;color.c: 200:  if(tmp.clear == calibColors[7].clear && tmp.red == calibColors[7].red &&
      +                           tmp.green == calibColors[7].green && tmp.blue == calibColors[7].blue ){
  4287   001B76  0103               	movlb	3	; () banked
  4288   001B78  51CA               	movf	(_calibColors+202)& (0+255),w,b
  4289   001B7A  0100               	movlb	0	; () banked
  4290   001B7C  19B2               	xorwf	(checkWhite@tmp+13)& (0+255),w,b
  4291   001B7E  E113               	bnz	u2541
  4292   001B80  0103               	movlb	3	; () banked
  4293   001B82  51CB               	movf	(_calibColors+203)& (0+255),w,b
  4294   001B84  0100               	movlb	0	; () banked
  4295   001B86  19B3               	xorwf	(checkWhite@tmp+14)& (0+255),w,b
  4296   001B88  E10E               	bnz	u2541
  4297   001B8A  0103               	movlb	3	; () banked
  4298   001B8C  51CC               	movf	(_calibColors+204)& (0+255),w,b
  4299   001B8E  0100               	movlb	0	; () banked
  4300   001B90  19B4               	xorwf	(checkWhite@tmp+15)& (0+255),w,b
  4301   001B92  E109               	bnz	u2541
  4302   001B94  0103               	movlb	3	; () banked
  4303   001B96  51CD               	movf	(_calibColors+205)& (0+255),w,b
  4304   001B98  0100               	movlb	0	; () banked
  4305   001B9A  19B5               	xorwf	(checkWhite@tmp+16)& (0+255),w,b
  4306   001B9C  A4D8               	btfss	status,2,c
  4307   001B9E  EFD3  F00D         	goto	u2541
  4308   001BA2  EFD5  F00D         	goto	u2540
  4309   001BA6                     u2541:
  4310   001BA6  EF2A  F00E         	goto	l3377
  4311   001BAA                     u2540:
  4312   001BAA                     
  4313                           ; BSR set to: 0
  4314   001BAA  0103               	movlb	3	; () banked
  4315   001BAC  51BE               	movf	(_calibColors+190)& (0+255),w,b
  4316   001BAE  0100               	movlb	0	; () banked
  4317   001BB0  19A6               	xorwf	(checkWhite@tmp+1)& (0+255),w,b
  4318   001BB2  E113               	bnz	u2551
  4319   001BB4  0103               	movlb	3	; () banked
  4320   001BB6  51BF               	movf	(_calibColors+191)& (0+255),w,b
  4321   001BB8  0100               	movlb	0	; () banked
  4322   001BBA  19A7               	xorwf	(checkWhite@tmp+2)& (0+255),w,b
  4323   001BBC  E10E               	bnz	u2551
  4324   001BBE  0103               	movlb	3	; () banked
  4325   001BC0  51C0               	movf	(_calibColors+192)& (0+255),w,b
  4326   001BC2  0100               	movlb	0	; () banked
  4327   001BC4  19A8               	xorwf	(checkWhite@tmp+3)& (0+255),w,b
  4328   001BC6  E109               	bnz	u2551
  4329   001BC8  0103               	movlb	3	; () banked
  4330   001BCA  51C1               	movf	(_calibColors+193)& (0+255),w,b
  4331   001BCC  0100               	movlb	0	; () banked
  4332   001BCE  19A9               	xorwf	(checkWhite@tmp+4)& (0+255),w,b
  4333   001BD0  A4D8               	btfss	status,2,c
  4334   001BD2  EFED  F00D         	goto	u2551
  4335   001BD6  EFEF  F00D         	goto	u2550
  4336   001BDA                     u2551:
  4337   001BDA  EF2A  F00E         	goto	l3377
  4338   001BDE                     u2550:
  4339   001BDE                     
  4340                           ; BSR set to: 0
  4341   001BDE  0103               	movlb	3	; () banked
  4342   001BE0  51C2               	movf	(_calibColors+194)& (0+255),w,b
  4343   001BE2  0100               	movlb	0	; () banked
  4344   001BE4  19AA               	xorwf	(checkWhite@tmp+5)& (0+255),w,b
  4345   001BE6  E113               	bnz	u2561
  4346   001BE8  0103               	movlb	3	; () banked
  4347   001BEA  51C3               	movf	(_calibColors+195)& (0+255),w,b
  4348   001BEC  0100               	movlb	0	; () banked
  4349   001BEE  19AB               	xorwf	(checkWhite@tmp+6)& (0+255),w,b
  4350   001BF0  E10E               	bnz	u2561
  4351   001BF2  0103               	movlb	3	; () banked
  4352   001BF4  51C4               	movf	(_calibColors+196)& (0+255),w,b
  4353   001BF6  0100               	movlb	0	; () banked
  4354   001BF8  19AC               	xorwf	(checkWhite@tmp+7)& (0+255),w,b
  4355   001BFA  E109               	bnz	u2561
  4356   001BFC  0103               	movlb	3	; () banked
  4357   001BFE  51C5               	movf	(_calibColors+197)& (0+255),w,b
  4358   001C00  0100               	movlb	0	; () banked
  4359   001C02  19AD               	xorwf	(checkWhite@tmp+8)& (0+255),w,b
  4360   001C04  A4D8               	btfss	status,2,c
  4361   001C06  EF07  F00E         	goto	u2561
  4362   001C0A  EF09  F00E         	goto	u2560
  4363   001C0E                     u2561:
  4364   001C0E  EF2A  F00E         	goto	l3377
  4365   001C12                     u2560:
  4366   001C12                     
  4367                           ; BSR set to: 0
  4368   001C12  0103               	movlb	3	; () banked
  4369   001C14  51C6               	movf	(_calibColors+198)& (0+255),w,b
  4370   001C16  0100               	movlb	0	; () banked
  4371   001C18  19AE               	xorwf	(checkWhite@tmp+9)& (0+255),w,b
  4372   001C1A  E113               	bnz	u2571
  4373   001C1C  0103               	movlb	3	; () banked
  4374   001C1E  51C7               	movf	(_calibColors+199)& (0+255),w,b
  4375   001C20  0100               	movlb	0	; () banked
  4376   001C22  19AF               	xorwf	(checkWhite@tmp+10)& (0+255),w,b
  4377   001C24  E10E               	bnz	u2571
  4378   001C26  0103               	movlb	3	; () banked
  4379   001C28  51C8               	movf	(_calibColors+200)& (0+255),w,b
  4380   001C2A  0100               	movlb	0	; () banked
  4381   001C2C  19B0               	xorwf	(checkWhite@tmp+11)& (0+255),w,b
  4382   001C2E  E109               	bnz	u2571
  4383   001C30  0103               	movlb	3	; () banked
  4384   001C32  51C9               	movf	(_calibColors+201)& (0+255),w,b
  4385   001C34  0100               	movlb	0	; () banked
  4386   001C36  19B1               	xorwf	(checkWhite@tmp+12)& (0+255),w,b
  4387   001C38  A4D8               	btfss	status,2,c
  4388   001C3A  EF21  F00E         	goto	u2571
  4389   001C3E  EF23  F00E         	goto	u2570
  4390   001C42                     u2571:
  4391   001C42  EF2A  F00E         	goto	l3377
  4392   001C46                     u2570:
  4393   001C46                     
  4394                           ; BSR set to: 0
  4395                           ;color.c: 201:   finished = 1;
  4396   001C46  0E00               	movlw	0
  4397   001C48  0101               	movlb	1	; () banked
  4398   001C4A  6FDE               	movwf	(_finished+1)& (0+255),b
  4399   001C4C  0E01               	movlw	1
  4400   001C4E  6FDD               	movwf	_finished& (0+255),b
  4401                           
  4402                           ;color.c: 202:  }
  4403   001C50  EF2F  F00E         	goto	l137
  4404   001C54                     l3377:
  4405                           
  4406                           ; BSR set to: 0
  4407                           ;color.c: 204:   finished = 0;
  4408   001C54  0E00               	movlw	0
  4409   001C56  0101               	movlb	1	; () banked
  4410   001C58  6FDE               	movwf	(_finished+1)& (0+255),b
  4411   001C5A  0E00               	movlw	0
  4412   001C5C  6FDD               	movwf	_finished& (0+255),b
  4413   001C5E                     l137:
  4414                           
  4415                           ; BSR set to: 1
  4416   001C5E  0012               	return		;funcret
  4417   001C60                     __end_of_checkWhite:
  4418                           	callstack 0
  4419                           
  4420 ;; *************** function _checkColor *****************
  4421 ;; Defined at:
  4422 ;;		line 127 in file "color.c"
  4423 ;; Parameters:    Size  Location     Type
  4424 ;;		None
  4425 ;; Auto vars:     Size  Location     Type
  4426 ;;  colorDiff      16   53[BANK0 ] struct RGBC
  4427 ;;  i               2   35[BANK0 ] int 
  4428 ;;  currColor      27    0[BANK0 ] struct color
  4429 ;;  Vals           16   37[BANK0 ] struct RGBC
  4430 ;;  absDiff         4   31[BANK0 ] long 
  4431 ;;  prevAbsDiff     4   27[BANK0 ] long 
  4432 ;; Return value:  Size  Location     Type
  4433 ;;                  27   32[COMRAM] struct color
  4434 ;; Registers used:
  4435 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4436 ;; Tracked objects:
  4437 ;;		On entry : 0/0
  4438 ;;		On exit  : 0/0
  4439 ;;		Unchanged: 0/0
  4440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4441 ;;      Params:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4442 ;;      Locals:         0      69       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4443 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4444 ;;      Totals:        35      69       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4445 ;;Total ram usage:      104 bytes
  4446 ;; Hardware stack levels used: 1
  4447 ;; Hardware stack levels required when called: 5
  4448 ;; This function calls:
  4449 ;;		___aldiv
  4450 ;;		___wmul
  4451 ;;		_abs
  4452 ;;		_color_read_all
  4453 ;;		_triLED_tog
  4454 ;; This function is called by:
  4455 ;;		_checkWhite
  4456 ;;		_color2instruction
  4457 ;;		_checkWall
  4458 ;; This function uses a non-reentrant model
  4459 ;;
  4460                           
  4461                           	psect	text25
  4462   000E3E                     __ptext25:
  4463                           	callstack 0
  4464   000E3E                     _checkColor:
  4465                           	callstack 23
  4466   000E3E                     
  4467                           ;color.c: 129:     triLED_tog(1);
  4468   000E3E  0E01               	movlw	1
  4469   000E40  ECCF  F012         	call	_triLED_tog
  4470   000E44                     
  4471                           ;color.c: 131:  RGBC Vals;;color.c: 132:  color currColor;;color.c: 134:  color_read_all
      +                          (&Vals);
  4472   000E44  0E85               	movlw	low checkColor@Vals
  4473   000E46  6E09               	movwf	color_read_all@readVals^0,c
  4474   000E48  EC94  F008         	call	_color_read_all	;wreg free
  4475   000E4C                     
  4476                           ;color.c: 137:  long absDiff;;color.c: 138:  long prevAbsDiff = 8000000;
  4477   000E4C  0E00               	movlw	0
  4478   000E4E  0100               	movlb	0	; () banked
  4479   000E50  6F7B               	movwf	checkColor@prevAbsDiff& (0+255),b
  4480   000E52  0E12               	movlw	18
  4481   000E54  6F7C               	movwf	(checkColor@prevAbsDiff+1)& (0+255),b
  4482   000E56  0E7A               	movlw	122
  4483   000E58  6F7D               	movwf	(checkColor@prevAbsDiff+2)& (0+255),b
  4484   000E5A  0E00               	movlw	0
  4485   000E5C  6F7E               	movwf	(checkColor@prevAbsDiff+3)& (0+255),b
  4486   000E5E                     
  4487                           ; BSR set to: 0
  4488                           ;color.c: 140:  for(int i =0;i<9;i++){
  4489   000E5E  0E00               	movlw	0
  4490   000E60  6F84               	movwf	(checkColor@i+1)& (0+255),b
  4491   000E62  0E00               	movlw	0
  4492   000E64  6F83               	movwf	checkColor@i& (0+255),b
  4493   000E66                     l3267:
  4494                           
  4495                           ; BSR set to: 0
  4496                           ;color.c: 142:   RGBC colorDiff;;color.c: 144:   colorDiff.red = ((Vals.red) - calibColo
      +                          rs[i].red)/1000;
  4497   000E66  C083  F005         	movff	checkColor@i,___wmul@multiplier
  4498   000E6A  C084  F006         	movff	checkColor@i+1,___wmul@multiplier+1
  4499   000E6E  0E00               	movlw	0
  4500   000E70  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  4501   000E72  0E1B               	movlw	27
  4502   000E74  6E07               	movwf	___wmul@multiplicand^0,c
  4503   000E76  ECF7  F012         	call	___wmul	;wreg free
  4504   000E7A  0E01               	movlw	low (_calibColors+1)
  4505   000E7C  2405               	addwf	?___wmul^0,w,c
  4506   000E7E  6ED9               	movwf	fsr2l,c
  4507   000E80  0E03               	movlw	high (_calibColors+1)
  4508   000E82  2006               	addwfc	(?___wmul+1)^0,w,c
  4509   000E84  6EDA               	movwf	fsr2h,c
  4510   000E86  CFDE F03C          	movff	postinc2,??_checkColor
  4511   000E8A  CFDE F03D          	movff	postinc2,??_checkColor+1
  4512   000E8E  CFDE F03E          	movff	postinc2,??_checkColor+2
  4513   000E92  CFDE F03F          	movff	postinc2,??_checkColor+3
  4514   000E96  503C               	movf	??_checkColor^0,w,c
  4515   000E98  0100               	movlb	0	; () banked
  4516   000E9A  5D85               	subwf	checkColor@Vals& (0+255),w,b
  4517   000E9C  6E0B               	movwf	___aldiv@dividend^0,c
  4518   000E9E  503D               	movf	(??_checkColor+1)^0,w,c
  4519   000EA0  5986               	subwfb	(checkColor@Vals+1)& (0+255),w,b
  4520   000EA2  6E0C               	movwf	(___aldiv@dividend+1)^0,c
  4521   000EA4  503E               	movf	(??_checkColor+2)^0,w,c
  4522   000EA6  5987               	subwfb	(checkColor@Vals+2)& (0+255),w,b
  4523   000EA8  6E0D               	movwf	(___aldiv@dividend+2)^0,c
  4524   000EAA  503F               	movf	(??_checkColor+3)^0,w,c
  4525   000EAC  5988               	subwfb	(checkColor@Vals+3)& (0+255),w,b
  4526   000EAE  6E0E               	movwf	(___aldiv@dividend+3)^0,c
  4527   000EB0  0EE8               	movlw	232
  4528   000EB2  6E0F               	movwf	___aldiv@divisor^0,c
  4529   000EB4  0E03               	movlw	3
  4530   000EB6  6E10               	movwf	(___aldiv@divisor+1)^0,c
  4531   000EB8  0E00               	movlw	0
  4532   000EBA  6E11               	movwf	(___aldiv@divisor+2)^0,c
  4533   000EBC  0E00               	movlw	0
  4534   000EBE  6E12               	movwf	(___aldiv@divisor+3)^0,c
  4535   000EC0  EC29  F00D         	call	___aldiv	;wreg free
  4536   000EC4  C00B  F095         	movff	?___aldiv,checkColor@colorDiff
  4537   000EC8  C00C  F096         	movff	?___aldiv+1,checkColor@colorDiff+1
  4538   000ECC  C00D  F097         	movff	?___aldiv+2,checkColor@colorDiff+2
  4539   000ED0  C00E  F098         	movff	?___aldiv+3,checkColor@colorDiff+3
  4540                           
  4541                           ;color.c: 145:   colorDiff.green = ((Vals.green) - calibColors[i].green )/1000;
  4542   000ED4  C083  F005         	movff	checkColor@i,___wmul@multiplier
  4543   000ED8  C084  F006         	movff	checkColor@i+1,___wmul@multiplier+1
  4544   000EDC  0E00               	movlw	0
  4545   000EDE  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  4546   000EE0  0E1B               	movlw	27
  4547   000EE2  6E07               	movwf	___wmul@multiplicand^0,c
  4548   000EE4  ECF7  F012         	call	___wmul	;wreg free
  4549   000EE8  0E05               	movlw	low (_calibColors+5)
  4550   000EEA  2405               	addwf	?___wmul^0,w,c
  4551   000EEC  6ED9               	movwf	fsr2l,c
  4552   000EEE  0E03               	movlw	high (_calibColors+5)
  4553   000EF0  2006               	addwfc	(?___wmul+1)^0,w,c
  4554   000EF2  6EDA               	movwf	fsr2h,c
  4555   000EF4  CFDE F03C          	movff	postinc2,??_checkColor
  4556   000EF8  CFDE F03D          	movff	postinc2,??_checkColor+1
  4557   000EFC  CFDE F03E          	movff	postinc2,??_checkColor+2
  4558   000F00  CFDE F03F          	movff	postinc2,??_checkColor+3
  4559   000F04  503C               	movf	??_checkColor^0,w,c
  4560   000F06  0100               	movlb	0	; () banked
  4561   000F08  5D89               	subwf	(checkColor@Vals+4)& (0+255),w,b
  4562   000F0A  6E0B               	movwf	___aldiv@dividend^0,c
  4563   000F0C  503D               	movf	(??_checkColor+1)^0,w,c
  4564   000F0E  598A               	subwfb	(checkColor@Vals+5)& (0+255),w,b
  4565   000F10  6E0C               	movwf	(___aldiv@dividend+1)^0,c
  4566   000F12  503E               	movf	(??_checkColor+2)^0,w,c
  4567   000F14  598B               	subwfb	(checkColor@Vals+6)& (0+255),w,b
  4568   000F16  6E0D               	movwf	(___aldiv@dividend+2)^0,c
  4569   000F18  503F               	movf	(??_checkColor+3)^0,w,c
  4570   000F1A  598C               	subwfb	(checkColor@Vals+7)& (0+255),w,b
  4571   000F1C  6E0E               	movwf	(___aldiv@dividend+3)^0,c
  4572   000F1E  0EE8               	movlw	232
  4573   000F20  6E0F               	movwf	___aldiv@divisor^0,c
  4574   000F22  0E03               	movlw	3
  4575   000F24  6E10               	movwf	(___aldiv@divisor+1)^0,c
  4576   000F26  0E00               	movlw	0
  4577   000F28  6E11               	movwf	(___aldiv@divisor+2)^0,c
  4578   000F2A  0E00               	movlw	0
  4579   000F2C  6E12               	movwf	(___aldiv@divisor+3)^0,c
  4580   000F2E  EC29  F00D         	call	___aldiv	;wreg free
  4581   000F32  C00B  F099         	movff	?___aldiv,checkColor@colorDiff+4
  4582   000F36  C00C  F09A         	movff	?___aldiv+1,checkColor@colorDiff+5
  4583   000F3A  C00D  F09B         	movff	?___aldiv+2,checkColor@colorDiff+6
  4584   000F3E  C00E  F09C         	movff	?___aldiv+3,checkColor@colorDiff+7
  4585                           
  4586                           ;color.c: 146:   colorDiff.blue = ((Vals.blue) - calibColors[i].blue )/1000;
  4587   000F42  C083  F005         	movff	checkColor@i,___wmul@multiplier
  4588   000F46  C084  F006         	movff	checkColor@i+1,___wmul@multiplier+1
  4589   000F4A  0E00               	movlw	0
  4590   000F4C  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  4591   000F4E  0E1B               	movlw	27
  4592   000F50  6E07               	movwf	___wmul@multiplicand^0,c
  4593   000F52  ECF7  F012         	call	___wmul	;wreg free
  4594   000F56  0E09               	movlw	low (_calibColors+9)
  4595   000F58  2405               	addwf	?___wmul^0,w,c
  4596   000F5A  6ED9               	movwf	fsr2l,c
  4597   000F5C  0E03               	movlw	high (_calibColors+9)
  4598   000F5E  2006               	addwfc	(?___wmul+1)^0,w,c
  4599   000F60  6EDA               	movwf	fsr2h,c
  4600   000F62  CFDE F03C          	movff	postinc2,??_checkColor
  4601   000F66  CFDE F03D          	movff	postinc2,??_checkColor+1
  4602   000F6A  CFDE F03E          	movff	postinc2,??_checkColor+2
  4603   000F6E  CFDE F03F          	movff	postinc2,??_checkColor+3
  4604   000F72  503C               	movf	??_checkColor^0,w,c
  4605   000F74  0100               	movlb	0	; () banked
  4606   000F76  5D8D               	subwf	(checkColor@Vals+8)& (0+255),w,b
  4607   000F78  6E0B               	movwf	___aldiv@dividend^0,c
  4608   000F7A  503D               	movf	(??_checkColor+1)^0,w,c
  4609   000F7C  598E               	subwfb	(checkColor@Vals+9)& (0+255),w,b
  4610   000F7E  6E0C               	movwf	(___aldiv@dividend+1)^0,c
  4611   000F80  503E               	movf	(??_checkColor+2)^0,w,c
  4612   000F82  598F               	subwfb	(checkColor@Vals+10)& (0+255),w,b
  4613   000F84  6E0D               	movwf	(___aldiv@dividend+2)^0,c
  4614   000F86  503F               	movf	(??_checkColor+3)^0,w,c
  4615   000F88  5990               	subwfb	(checkColor@Vals+11)& (0+255),w,b
  4616   000F8A  6E0E               	movwf	(___aldiv@dividend+3)^0,c
  4617   000F8C  0EE8               	movlw	232
  4618   000F8E  6E0F               	movwf	___aldiv@divisor^0,c
  4619   000F90  0E03               	movlw	3
  4620   000F92  6E10               	movwf	(___aldiv@divisor+1)^0,c
  4621   000F94  0E00               	movlw	0
  4622   000F96  6E11               	movwf	(___aldiv@divisor+2)^0,c
  4623   000F98  0E00               	movlw	0
  4624   000F9A  6E12               	movwf	(___aldiv@divisor+3)^0,c
  4625   000F9C  EC29  F00D         	call	___aldiv	;wreg free
  4626   000FA0  C00B  F09D         	movff	?___aldiv,checkColor@colorDiff+8
  4627   000FA4  C00C  F09E         	movff	?___aldiv+1,checkColor@colorDiff+9
  4628   000FA8  C00D  F09F         	movff	?___aldiv+2,checkColor@colorDiff+10
  4629   000FAC  C00E  F0A0         	movff	?___aldiv+3,checkColor@colorDiff+11
  4630                           
  4631                           ;color.c: 147:   colorDiff.clear = ((Vals.clear) - calibColors[i].clear )/1000 ;
  4632   000FB0  C083  F005         	movff	checkColor@i,___wmul@multiplier
  4633   000FB4  C084  F006         	movff	checkColor@i+1,___wmul@multiplier+1
  4634   000FB8  0E00               	movlw	0
  4635   000FBA  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  4636   000FBC  0E1B               	movlw	27
  4637   000FBE  6E07               	movwf	___wmul@multiplicand^0,c
  4638   000FC0  ECF7  F012         	call	___wmul	;wreg free
  4639   000FC4  0E0D               	movlw	low (_calibColors+13)
  4640   000FC6  2405               	addwf	?___wmul^0,w,c
  4641   000FC8  6ED9               	movwf	fsr2l,c
  4642   000FCA  0E03               	movlw	high (_calibColors+13)
  4643   000FCC  2006               	addwfc	(?___wmul+1)^0,w,c
  4644   000FCE  6EDA               	movwf	fsr2h,c
  4645   000FD0  CFDE F03C          	movff	postinc2,??_checkColor
  4646   000FD4  CFDE F03D          	movff	postinc2,??_checkColor+1
  4647   000FD8  CFDE F03E          	movff	postinc2,??_checkColor+2
  4648   000FDC  CFDE F03F          	movff	postinc2,??_checkColor+3
  4649   000FE0  503C               	movf	??_checkColor^0,w,c
  4650   000FE2  0100               	movlb	0	; () banked
  4651   000FE4  5D91               	subwf	(checkColor@Vals+12)& (0+255),w,b
  4652   000FE6  6E0B               	movwf	___aldiv@dividend^0,c
  4653   000FE8  503D               	movf	(??_checkColor+1)^0,w,c
  4654   000FEA  5992               	subwfb	(checkColor@Vals+13)& (0+255),w,b
  4655   000FEC  6E0C               	movwf	(___aldiv@dividend+1)^0,c
  4656   000FEE  503E               	movf	(??_checkColor+2)^0,w,c
  4657   000FF0  5993               	subwfb	(checkColor@Vals+14)& (0+255),w,b
  4658   000FF2  6E0D               	movwf	(___aldiv@dividend+2)^0,c
  4659   000FF4  503F               	movf	(??_checkColor+3)^0,w,c
  4660   000FF6  5994               	subwfb	(checkColor@Vals+15)& (0+255),w,b
  4661   000FF8  6E0E               	movwf	(___aldiv@dividend+3)^0,c
  4662   000FFA  0EE8               	movlw	232
  4663   000FFC  6E0F               	movwf	___aldiv@divisor^0,c
  4664   000FFE  0E03               	movlw	3
  4665   001000  6E10               	movwf	(___aldiv@divisor+1)^0,c
  4666   001002  0E00               	movlw	0
  4667   001004  6E11               	movwf	(___aldiv@divisor+2)^0,c
  4668   001006  0E00               	movlw	0
  4669   001008  6E12               	movwf	(___aldiv@divisor+3)^0,c
  4670   00100A  EC29  F00D         	call	___aldiv	;wreg free
  4671   00100E  C00B  F0A1         	movff	?___aldiv,checkColor@colorDiff+12
  4672   001012  C00C  F0A2         	movff	?___aldiv+1,checkColor@colorDiff+13
  4673   001016  C00D  F0A3         	movff	?___aldiv+2,checkColor@colorDiff+14
  4674   00101A  C00E  F0A4         	movff	?___aldiv+3,checkColor@colorDiff+15
  4675   00101E                     
  4676                           ;color.c: 150:   absDiff = abs(colorDiff.red) + abs(colorDiff.green) + abs(colorDiff.blu
      +                          e) + abs(colorDiff.clear);
  4677   00101E  C095  F005         	movff	checkColor@colorDiff,abs@a
  4678   001022  C096  F006         	movff	checkColor@colorDiff+1,abs@a+1
  4679   001026  EC73  F012         	call	_abs	;wreg free
  4680   00102A  C005  F03C         	movff	?_abs,??_checkColor
  4681   00102E  C006  F03D         	movff	?_abs+1,??_checkColor+1
  4682   001032  C099  F005         	movff	checkColor@colorDiff+4,abs@a
  4683   001036  C09A  F006         	movff	checkColor@colorDiff+5,abs@a+1
  4684   00103A  EC73  F012         	call	_abs	;wreg free
  4685   00103E  5005               	movf	?_abs^0,w,c
  4686   001040  243C               	addwf	??_checkColor^0,w,c
  4687   001042  6E3E               	movwf	(??_checkColor+2)^0,c
  4688   001044  5006               	movf	(?_abs+1)^0,w,c
  4689   001046  203D               	addwfc	(??_checkColor+1)^0,w,c
  4690   001048  6E3F               	movwf	(??_checkColor+3)^0,c
  4691   00104A  C09D  F005         	movff	checkColor@colorDiff+8,abs@a
  4692   00104E  C09E  F006         	movff	checkColor@colorDiff+9,abs@a+1
  4693   001052  EC73  F012         	call	_abs	;wreg free
  4694   001056  5005               	movf	?_abs^0,w,c
  4695   001058  243E               	addwf	(??_checkColor+2)^0,w,c
  4696   00105A  6E40               	movwf	(??_checkColor+4)^0,c
  4697   00105C  5006               	movf	(?_abs+1)^0,w,c
  4698   00105E  203F               	addwfc	(??_checkColor+3)^0,w,c
  4699   001060  6E41               	movwf	(??_checkColor+5)^0,c
  4700   001062  C0A1  F005         	movff	checkColor@colorDiff+12,abs@a
  4701   001066  C0A2  F006         	movff	checkColor@colorDiff+13,abs@a+1
  4702   00106A  EC73  F012         	call	_abs	;wreg free
  4703   00106E  5005               	movf	?_abs^0,w,c
  4704   001070  2440               	addwf	(??_checkColor+4)^0,w,c
  4705   001072  6E42               	movwf	(??_checkColor+6)^0,c
  4706   001074  5006               	movf	(?_abs+1)^0,w,c
  4707   001076  2041               	addwfc	(??_checkColor+5)^0,w,c
  4708   001078  6E43               	movwf	(??_checkColor+7)^0,c
  4709   00107A  C042  F07F         	movff	??_checkColor+6,checkColor@absDiff
  4710   00107E  C043  F080         	movff	??_checkColor+7,checkColor@absDiff+1
  4711   001082  0100               	movlb	0	; () banked
  4712   001084  0E00               	movlw	0
  4713   001086  BF80               	btfsc	(checkColor@absDiff+1)& (0+255),7,b
  4714   001088  0EFF               	movlw	-1
  4715   00108A  6F81               	movwf	(checkColor@absDiff+2)& (0+255),b
  4716   00108C  6F82               	movwf	(checkColor@absDiff+3)& (0+255),b
  4717   00108E                     
  4718                           ; BSR set to: 0
  4719                           ;color.c: 153:   if(absDiff < prevAbsDiff){
  4720   00108E  517B               	movf	checkColor@prevAbsDiff& (0+255),w,b
  4721   001090  5D7F               	subwf	checkColor@absDiff& (0+255),w,b
  4722   001092  517C               	movf	(checkColor@prevAbsDiff+1)& (0+255),w,b
  4723   001094  5980               	subwfb	(checkColor@absDiff+1)& (0+255),w,b
  4724   001096  517D               	movf	(checkColor@prevAbsDiff+2)& (0+255),w,b
  4725   001098  5981               	subwfb	(checkColor@absDiff+2)& (0+255),w,b
  4726   00109A  5182               	movf	(checkColor@absDiff+3)& (0+255),w,b
  4727   00109C  0A80               	xorlw	128
  4728   00109E  6E3C               	movwf	??_checkColor^0,c
  4729   0010A0  517E               	movf	(checkColor@prevAbsDiff+3)& (0+255),w,b
  4730   0010A2  0A80               	xorlw	128
  4731   0010A4  583C               	subwfb	??_checkColor^0,w,c
  4732   0010A6  B0D8               	btfsc	status,0,c
  4733   0010A8  EF58  F008         	goto	u2401
  4734   0010AC  EF5A  F008         	goto	u2400
  4735   0010B0                     u2401:
  4736   0010B0  EF79  F008         	goto	l3277
  4737   0010B4                     u2400:
  4738   0010B4                     
  4739                           ; BSR set to: 0
  4740                           ;color.c: 156:    prevAbsDiff = absDiff;
  4741   0010B4  C07F  F07B         	movff	checkColor@absDiff,checkColor@prevAbsDiff
  4742   0010B8  C080  F07C         	movff	checkColor@absDiff+1,checkColor@prevAbsDiff+1
  4743   0010BC  C081  F07D         	movff	checkColor@absDiff+2,checkColor@prevAbsDiff+2
  4744   0010C0  C082  F07E         	movff	checkColor@absDiff+3,checkColor@prevAbsDiff+3
  4745   0010C4                     
  4746                           ; BSR set to: 0
  4747                           ;color.c: 157:    currColor = calibColors[i];
  4748   0010C4  C083  F005         	movff	checkColor@i,___wmul@multiplier
  4749   0010C8  C084  F006         	movff	checkColor@i+1,___wmul@multiplier+1
  4750   0010CC  0E00               	movlw	0
  4751   0010CE  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  4752   0010D0  0E1B               	movlw	27
  4753   0010D2  6E07               	movwf	___wmul@multiplicand^0,c
  4754   0010D4  ECF7  F012         	call	___wmul	;wreg free
  4755   0010D8  0E00               	movlw	low _calibColors
  4756   0010DA  2405               	addwf	?___wmul^0,w,c
  4757   0010DC  6ED9               	movwf	fsr2l,c
  4758   0010DE  0E03               	movlw	high _calibColors
  4759   0010E0  2006               	addwfc	(?___wmul+1)^0,w,c
  4760   0010E2  6EDA               	movwf	fsr2h,c
  4761   0010E4  EE10  F060         	lfsr	1,checkColor@currColor
  4762   0010E8  0E1A               	movlw	26
  4763   0010EA                     u2411:
  4764   0010EA  CFDB FFE3          	movff	plusw2,plusw1
  4765   0010EE  06E8               	decf	wreg,f,c
  4766   0010F0  E2FC               	bc	u2411
  4767   0010F2                     l3277:
  4768                           
  4769                           ;color.c: 159:  }
  4770   0010F2  0100               	movlb	0	; () banked
  4771   0010F4  4B83               	infsnz	checkColor@i& (0+255),f,b
  4772   0010F6  2B84               	incf	(checkColor@i+1)& (0+255),f,b
  4773   0010F8                     
  4774                           ; BSR set to: 0
  4775   0010F8  BF84               	btfsc	(checkColor@i+1)& (0+255),7,b
  4776   0010FA  EF88  F008         	goto	u2421
  4777   0010FE  5184               	movf	(checkColor@i+1)& (0+255),w,b
  4778   001100  E109               	bnz	u2420
  4779   001102  0E09               	movlw	9
  4780   001104  5D83               	subwf	checkColor@i& (0+255),w,b
  4781   001106  A0D8               	btfss	status,0,c
  4782   001108  EF88  F008         	goto	u2421
  4783   00110C  EF8A  F008         	goto	u2420
  4784   001110                     u2421:
  4785   001110  EF33  F007         	goto	l3267
  4786   001114                     u2420:
  4787   001114                     
  4788                           ; BSR set to: 0
  4789                           ;color.c: 161:  return currColor;
  4790   001114  EE20  F060         	lfsr	2,checkColor@currColor
  4791   001118  EE00  F021         	lfsr	0,?_checkColor
  4792   00111C  0E1A               	movlw	26
  4793   00111E                     u2431:
  4794   00111E  CFDB FFEB          	movff	plusw2,plusw0
  4795   001122  06E8               	decf	wreg,f,c
  4796   001124  E2FC               	bc	u2431
  4797   001126                     
  4798                           ; BSR set to: 0
  4799   001126  0012               	return		;funcret
  4800   001128                     __end_of_checkColor:
  4801                           	callstack 0
  4802                           
  4803 ;; *************** function _triLED_tog *****************
  4804 ;; Defined at:
  4805 ;;		line 28 in file "color.c"
  4806 ;; Parameters:    Size  Location     Type
  4807 ;;  state           1    wreg     unsigned char 
  4808 ;; Auto vars:     Size  Location     Type
  4809 ;;  state           1    4[COMRAM] unsigned char 
  4810 ;; Return value:  Size  Location     Type
  4811 ;;                  1    wreg      void 
  4812 ;; Registers used:
  4813 ;;		wreg
  4814 ;; Tracked objects:
  4815 ;;		On entry : 0/0
  4816 ;;		On exit  : 0/0
  4817 ;;		Unchanged: 0/0
  4818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4820 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4822 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4823 ;;Total ram usage:        1 bytes
  4824 ;; Hardware stack levels used: 1
  4825 ;; Hardware stack levels required when called: 2
  4826 ;; This function calls:
  4827 ;;		Nothing
  4828 ;; This function is called by:
  4829 ;;		_checkColor
  4830 ;;		_checkIncidence
  4831 ;;		_checkWhite
  4832 ;;		_color2instruction
  4833 ;;		_calibCards
  4834 ;; This function uses a non-reentrant model
  4835 ;;
  4836                           
  4837                           	psect	text26
  4838   00259E                     __ptext26:
  4839                           	callstack 0
  4840   00259E                     _triLED_tog:
  4841                           	callstack 26
  4842                           
  4843                           ; BSR set to: 0
  4844                           ;incstack = 0
  4845                           ;triLED_tog@state stored from wreg
  4846   00259E  6E05               	movwf	triLED_tog@state^0,c
  4847   0025A0                     
  4848                           ;color.c: 30:     TRISGbits.TRISG0 = 0;
  4849   0025A0  9087               	bcf	135,0,c	;volatile
  4850                           
  4851                           ;color.c: 31:     TRISEbits.TRISE7 = 0;
  4852   0025A2  9E85               	bcf	133,7,c	;volatile
  4853                           
  4854                           ;color.c: 32:     TRISAbits.TRISA3 = 0;
  4855   0025A4  9681               	bcf	129,3,c	;volatile
  4856   0025A6                     
  4857                           ;color.c: 34:     LATGbits.LATG0 = state;
  4858   0025A6  B005               	btfsc	triLED_tog@state^0,0,c
  4859   0025A8  D002               	bra	u2275
  4860   0025AA  907F               	bcf	127,0,c	;volatile
  4861   0025AC  D001               	bra	u2276
  4862   0025AE                     u2275:
  4863   0025AE  807F               	bsf	127,0,c	;volatile
  4864   0025B0                     u2276:
  4865                           
  4866                           ;color.c: 35:     LATEbits.LATE7 = state;
  4867   0025B0  B005               	btfsc	triLED_tog@state^0,0,c
  4868   0025B2  D002               	bra	u2285
  4869   0025B4  9E7D               	bcf	125,7,c	;volatile
  4870   0025B6  D001               	bra	u2286
  4871   0025B8                     u2285:
  4872   0025B8  8E7D               	bsf	125,7,c	;volatile
  4873   0025BA                     u2286:
  4874                           
  4875                           ;color.c: 36:     LATAbits.LATA3 = state;
  4876   0025BA  B005               	btfsc	triLED_tog@state^0,0,c
  4877   0025BC  D002               	bra	u2295
  4878   0025BE  9679               	bcf	121,3,c	;volatile
  4879   0025C0  D001               	bra	u2296
  4880   0025C2                     u2295:
  4881   0025C2  8679               	bsf	121,3,c	;volatile
  4882   0025C4                     u2296:
  4883   0025C4  0012               	return		;funcret
  4884   0025C6                     __end_of_triLED_tog:
  4885                           	callstack 0
  4886                           
  4887 ;; *************** function _color_read_all *****************
  4888 ;; Defined at:
  4889 ;;		line 47 in file "color.c"
  4890 ;; Parameters:    Size  Location     Type
  4891 ;;  readVals        1    8[COMRAM] PTR struct RGBC
  4892 ;;		 -> checkIncidence@tmp(16), checkColor@Vals(16), calibCards@readVals(16), 
  4893 ;; Auto vars:     Size  Location     Type
  4894 ;;  tmp            16   16[COMRAM] struct RGBC
  4895 ;; Return value:  Size  Location     Type
  4896 ;;                  1    wreg      void 
  4897 ;; Registers used:
  4898 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4899 ;; Tracked objects:
  4900 ;;		On entry : 0/0
  4901 ;;		On exit  : 0/0
  4902 ;;		Unchanged: 0/0
  4903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4904 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4905 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4906 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4907 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4908 ;;Total ram usage:       24 bytes
  4909 ;; Hardware stack levels used: 1
  4910 ;; Hardware stack levels required when called: 4
  4911 ;; This function calls:
  4912 ;;		_I2C_2_Master_Read
  4913 ;;		_I2C_2_Master_RepStart
  4914 ;;		_I2C_2_Master_Start
  4915 ;;		_I2C_2_Master_Stop
  4916 ;;		_I2C_2_Master_Write
  4917 ;; This function is called by:
  4918 ;;		_checkColor
  4919 ;;		_checkIncidence
  4920 ;;		_calibCards
  4921 ;; This function uses a non-reentrant model
  4922 ;;
  4923                           
  4924                           	psect	text27
  4925   001128                     __ptext27:
  4926                           	callstack 0
  4927   001128                     _color_read_all:
  4928                           	callstack 23
  4929   001128                     
  4930                           ;color.c: 50:  RGBC tmp;;color.c: 52:  I2C_2_Master_Start();
  4931   001128  EC48  F013         	call	_I2C_2_Master_Start	;wreg free
  4932                           
  4933                           ;color.c: 53:  I2C_2_Master_Write(0x52 | 0x00);
  4934   00112C  0E52               	movlw	82
  4935   00112E  EC37  F013         	call	_I2C_2_Master_Write
  4936                           
  4937                           ;color.c: 54:  I2C_2_Master_Write(0xA0 | 0x14);
  4938   001132  0EB4               	movlw	180
  4939   001134  EC37  F013         	call	_I2C_2_Master_Write
  4940                           
  4941                           ;color.c: 55:  I2C_2_Master_RepStart();
  4942   001138  EC4D  F013         	call	_I2C_2_Master_RepStart	;wreg free
  4943                           
  4944                           ;color.c: 56:  I2C_2_Master_Write(0x52 | 0x01);
  4945   00113C  0E53               	movlw	83
  4946   00113E  EC37  F013         	call	_I2C_2_Master_Write
  4947                           
  4948                           ;color.c: 58:  tmp.red=I2C_2_Master_Read(1);
  4949   001142  0E01               	movlw	1
  4950   001144  ECE9  F011         	call	_I2C_2_Master_Read
  4951   001148  6E0A               	movwf	??_color_read_all^0,c
  4952   00114A  500A               	movf	??_color_read_all^0,w,c
  4953   00114C  6E11               	movwf	color_read_all@tmp^0,c
  4954   00114E  6A12               	clrf	(color_read_all@tmp+1)^0,c
  4955   001150  6A13               	clrf	(color_read_all@tmp+2)^0,c
  4956   001152  6A14               	clrf	(color_read_all@tmp+3)^0,c
  4957                           
  4958                           ;color.c: 59:  tmp.red=tmp.red | (I2C_2_Master_Read(1)<<8);
  4959   001154  0E01               	movlw	1
  4960   001156  ECE9  F011         	call	_I2C_2_Master_Read
  4961   00115A  6E0A               	movwf	??_color_read_all^0,c
  4962   00115C  500A               	movf	??_color_read_all^0,w,c
  4963   00115E  6E0C               	movwf	(??_color_read_all+2)^0,c
  4964   001160  6A0B               	clrf	(??_color_read_all+1)^0,c
  4965   001162  C00B  F00D         	movff	??_color_read_all+1,??_color_read_all+3
  4966   001166  C00C  F00E         	movff	??_color_read_all+2,??_color_read_all+4
  4967   00116A  0E00               	movlw	0
  4968   00116C  BE0E               	btfsc	(??_color_read_all+4)^0,7,c
  4969   00116E  0EFF               	movlw	255
  4970   001170  6E0F               	movwf	(??_color_read_all+5)^0,c
  4971   001172  6E10               	movwf	(??_color_read_all+6)^0,c
  4972   001174  5011               	movf	color_read_all@tmp^0,w,c
  4973   001176  100D               	iorwf	(??_color_read_all+3)^0,w,c
  4974   001178  6E11               	movwf	color_read_all@tmp^0,c
  4975   00117A  5012               	movf	(color_read_all@tmp+1)^0,w,c
  4976   00117C  100E               	iorwf	(??_color_read_all+4)^0,w,c
  4977   00117E  6E12               	movwf	(color_read_all@tmp+1)^0,c
  4978   001180  5013               	movf	(color_read_all@tmp+2)^0,w,c
  4979   001182  100F               	iorwf	(??_color_read_all+5)^0,w,c
  4980   001184  6E13               	movwf	(color_read_all@tmp+2)^0,c
  4981   001186  5014               	movf	(color_read_all@tmp+3)^0,w,c
  4982   001188  1010               	iorwf	(??_color_read_all+6)^0,w,c
  4983   00118A  6E14               	movwf	(color_read_all@tmp+3)^0,c
  4984                           
  4985                           ;color.c: 60:  tmp.green=I2C_2_Master_Read(1);
  4986   00118C  0E01               	movlw	1
  4987   00118E  ECE9  F011         	call	_I2C_2_Master_Read
  4988   001192  6E0A               	movwf	??_color_read_all^0,c
  4989   001194  500A               	movf	??_color_read_all^0,w,c
  4990   001196  6E15               	movwf	(color_read_all@tmp+4)^0,c
  4991   001198  6A16               	clrf	(color_read_all@tmp+5)^0,c
  4992   00119A  6A17               	clrf	(color_read_all@tmp+6)^0,c
  4993   00119C  6A18               	clrf	(color_read_all@tmp+7)^0,c
  4994                           
  4995                           ;color.c: 61:  tmp.green=tmp.green | (I2C_2_Master_Read(1)<<8);
  4996   00119E  0E01               	movlw	1
  4997   0011A0  ECE9  F011         	call	_I2C_2_Master_Read
  4998   0011A4  6E0A               	movwf	??_color_read_all^0,c
  4999   0011A6  500A               	movf	??_color_read_all^0,w,c
  5000   0011A8  6E0C               	movwf	(??_color_read_all+2)^0,c
  5001   0011AA  6A0B               	clrf	(??_color_read_all+1)^0,c
  5002   0011AC  C00B  F00D         	movff	??_color_read_all+1,??_color_read_all+3
  5003   0011B0  C00C  F00E         	movff	??_color_read_all+2,??_color_read_all+4
  5004   0011B4  0E00               	movlw	0
  5005   0011B6  BE0E               	btfsc	(??_color_read_all+4)^0,7,c
  5006   0011B8  0EFF               	movlw	255
  5007   0011BA  6E0F               	movwf	(??_color_read_all+5)^0,c
  5008   0011BC  6E10               	movwf	(??_color_read_all+6)^0,c
  5009   0011BE  5015               	movf	(color_read_all@tmp+4)^0,w,c
  5010   0011C0  100D               	iorwf	(??_color_read_all+3)^0,w,c
  5011   0011C2  6E15               	movwf	(color_read_all@tmp+4)^0,c
  5012   0011C4  5016               	movf	(color_read_all@tmp+5)^0,w,c
  5013   0011C6  100E               	iorwf	(??_color_read_all+4)^0,w,c
  5014   0011C8  6E16               	movwf	(color_read_all@tmp+5)^0,c
  5015   0011CA  5017               	movf	(color_read_all@tmp+6)^0,w,c
  5016   0011CC  100F               	iorwf	(??_color_read_all+5)^0,w,c
  5017   0011CE  6E17               	movwf	(color_read_all@tmp+6)^0,c
  5018   0011D0  5018               	movf	(color_read_all@tmp+7)^0,w,c
  5019   0011D2  1010               	iorwf	(??_color_read_all+6)^0,w,c
  5020   0011D4  6E18               	movwf	(color_read_all@tmp+7)^0,c
  5021                           
  5022                           ;color.c: 62:  tmp.blue=I2C_2_Master_Read(1);
  5023   0011D6  0E01               	movlw	1
  5024   0011D8  ECE9  F011         	call	_I2C_2_Master_Read
  5025   0011DC  6E0A               	movwf	??_color_read_all^0,c
  5026   0011DE  500A               	movf	??_color_read_all^0,w,c
  5027   0011E0  6E19               	movwf	(color_read_all@tmp+8)^0,c
  5028   0011E2  6A1A               	clrf	(color_read_all@tmp+9)^0,c
  5029   0011E4  6A1B               	clrf	(color_read_all@tmp+10)^0,c
  5030   0011E6  6A1C               	clrf	(color_read_all@tmp+11)^0,c
  5031                           
  5032                           ;color.c: 63:  tmp.blue=tmp.blue | (I2C_2_Master_Read(1)<<8);
  5033   0011E8  0E01               	movlw	1
  5034   0011EA  ECE9  F011         	call	_I2C_2_Master_Read
  5035   0011EE  6E0A               	movwf	??_color_read_all^0,c
  5036   0011F0  500A               	movf	??_color_read_all^0,w,c
  5037   0011F2  6E0C               	movwf	(??_color_read_all+2)^0,c
  5038   0011F4  6A0B               	clrf	(??_color_read_all+1)^0,c
  5039   0011F6  C00B  F00D         	movff	??_color_read_all+1,??_color_read_all+3
  5040   0011FA  C00C  F00E         	movff	??_color_read_all+2,??_color_read_all+4
  5041   0011FE  0E00               	movlw	0
  5042   001200  BE0E               	btfsc	(??_color_read_all+4)^0,7,c
  5043   001202  0EFF               	movlw	255
  5044   001204  6E0F               	movwf	(??_color_read_all+5)^0,c
  5045   001206  6E10               	movwf	(??_color_read_all+6)^0,c
  5046   001208  5019               	movf	(color_read_all@tmp+8)^0,w,c
  5047   00120A  100D               	iorwf	(??_color_read_all+3)^0,w,c
  5048   00120C  6E19               	movwf	(color_read_all@tmp+8)^0,c
  5049   00120E  501A               	movf	(color_read_all@tmp+9)^0,w,c
  5050   001210  100E               	iorwf	(??_color_read_all+4)^0,w,c
  5051   001212  6E1A               	movwf	(color_read_all@tmp+9)^0,c
  5052   001214  501B               	movf	(color_read_all@tmp+10)^0,w,c
  5053   001216  100F               	iorwf	(??_color_read_all+5)^0,w,c
  5054   001218  6E1B               	movwf	(color_read_all@tmp+10)^0,c
  5055   00121A  501C               	movf	(color_read_all@tmp+11)^0,w,c
  5056   00121C  1010               	iorwf	(??_color_read_all+6)^0,w,c
  5057   00121E  6E1C               	movwf	(color_read_all@tmp+11)^0,c
  5058                           
  5059                           ;color.c: 64:  tmp.clear=I2C_2_Master_Read(1);
  5060   001220  0E01               	movlw	1
  5061   001222  ECE9  F011         	call	_I2C_2_Master_Read
  5062   001226  6E0A               	movwf	??_color_read_all^0,c
  5063   001228  500A               	movf	??_color_read_all^0,w,c
  5064   00122A  6E1D               	movwf	(color_read_all@tmp+12)^0,c
  5065   00122C  6A1E               	clrf	(color_read_all@tmp+13)^0,c
  5066   00122E  6A1F               	clrf	(color_read_all@tmp+14)^0,c
  5067   001230  6A20               	clrf	(color_read_all@tmp+15)^0,c
  5068                           
  5069                           ;color.c: 65:  tmp.clear=tmp.clear | (I2C_2_Master_Read(0)<<8);
  5070   001232  0E00               	movlw	0
  5071   001234  ECE9  F011         	call	_I2C_2_Master_Read
  5072   001238  6E0A               	movwf	??_color_read_all^0,c
  5073   00123A  500A               	movf	??_color_read_all^0,w,c
  5074   00123C  6E0C               	movwf	(??_color_read_all+2)^0,c
  5075   00123E  6A0B               	clrf	(??_color_read_all+1)^0,c
  5076   001240  C00B  F00D         	movff	??_color_read_all+1,??_color_read_all+3
  5077   001244  C00C  F00E         	movff	??_color_read_all+2,??_color_read_all+4
  5078   001248  0E00               	movlw	0
  5079   00124A  BE0E               	btfsc	(??_color_read_all+4)^0,7,c
  5080   00124C  0EFF               	movlw	255
  5081   00124E  6E0F               	movwf	(??_color_read_all+5)^0,c
  5082   001250  6E10               	movwf	(??_color_read_all+6)^0,c
  5083   001252  501D               	movf	(color_read_all@tmp+12)^0,w,c
  5084   001254  100D               	iorwf	(??_color_read_all+3)^0,w,c
  5085   001256  6E1D               	movwf	(color_read_all@tmp+12)^0,c
  5086   001258  501E               	movf	(color_read_all@tmp+13)^0,w,c
  5087   00125A  100E               	iorwf	(??_color_read_all+4)^0,w,c
  5088   00125C  6E1E               	movwf	(color_read_all@tmp+13)^0,c
  5089   00125E  501F               	movf	(color_read_all@tmp+14)^0,w,c
  5090   001260  100F               	iorwf	(??_color_read_all+5)^0,w,c
  5091   001262  6E1F               	movwf	(color_read_all@tmp+14)^0,c
  5092   001264  5020               	movf	(color_read_all@tmp+15)^0,w,c
  5093   001266  1010               	iorwf	(??_color_read_all+6)^0,w,c
  5094   001268  6E20               	movwf	(color_read_all@tmp+15)^0,c
  5095                           
  5096                           ;color.c: 66:  I2C_2_Master_Stop();
  5097   00126A  EC43  F013         	call	_I2C_2_Master_Stop	;wreg free
  5098   00126E                     
  5099                           ;color.c: 69:  readVals -> red = tmp.red;
  5100   00126E  5009               	movf	color_read_all@readVals^0,w,c
  5101   001270  6ED9               	movwf	fsr2l,c
  5102   001272  6ADA               	clrf	fsr2h,c
  5103   001274  C011  FFDE         	movff	color_read_all@tmp,postinc2
  5104   001278  C012  FFDE         	movff	color_read_all@tmp+1,postinc2
  5105   00127C  C013  FFDE         	movff	color_read_all@tmp+2,postinc2
  5106   001280  C014  FFDE         	movff	color_read_all@tmp+3,postinc2
  5107   001284                     
  5108                           ;color.c: 70:  readVals -> green = tmp.green;
  5109   001284  EE20  F015         	lfsr	2,color_read_all@tmp+4
  5110   001288  5009               	movf	color_read_all@readVals^0,w,c
  5111   00128A  6EE1               	movwf	fsr1l,c
  5112   00128C  6AE2               	clrf	fsr1h,c
  5113   00128E  0E04               	movlw	4
  5114   001290  26E1               	addwf	fsr1l,f,c
  5115   001292  CFDE FFE6          	movff	postinc2,postinc1
  5116   001296  CFDE FFE6          	movff	postinc2,postinc1
  5117   00129A  CFDE FFE6          	movff	postinc2,postinc1
  5118   00129E  CFDE FFE6          	movff	postinc2,postinc1
  5119   0012A2                     
  5120                           ;color.c: 71:  readVals -> blue = tmp.blue;
  5121   0012A2  EE20  F019         	lfsr	2,color_read_all@tmp+8
  5122   0012A6  5009               	movf	color_read_all@readVals^0,w,c
  5123   0012A8  6EE1               	movwf	fsr1l,c
  5124   0012AA  6AE2               	clrf	fsr1h,c
  5125   0012AC  0E08               	movlw	8
  5126   0012AE  26E1               	addwf	fsr1l,f,c
  5127   0012B0  CFDE FFE6          	movff	postinc2,postinc1
  5128   0012B4  CFDE FFE6          	movff	postinc2,postinc1
  5129   0012B8  CFDE FFE6          	movff	postinc2,postinc1
  5130   0012BC  CFDE FFE6          	movff	postinc2,postinc1
  5131   0012C0                     
  5132                           ;color.c: 72:  readVals -> clear = tmp.clear;
  5133   0012C0  EE20  F01D         	lfsr	2,color_read_all@tmp+12
  5134   0012C4  5009               	movf	color_read_all@readVals^0,w,c
  5135   0012C6  6EE1               	movwf	fsr1l,c
  5136   0012C8  6AE2               	clrf	fsr1h,c
  5137   0012CA  0E0C               	movlw	12
  5138   0012CC  26E1               	addwf	fsr1l,f,c
  5139   0012CE  CFDE FFE6          	movff	postinc2,postinc1
  5140   0012D2  CFDE FFE6          	movff	postinc2,postinc1
  5141   0012D6  CFDE FFE6          	movff	postinc2,postinc1
  5142   0012DA  CFDE FFE6          	movff	postinc2,postinc1
  5143   0012DE  0012               	return		;funcret
  5144   0012E0                     __end_of_color_read_all:
  5145                           	callstack 0
  5146                           
  5147 ;; *************** function _I2C_2_Master_Write *****************
  5148 ;; Defined at:
  5149 ;;		line 45 in file "i2c.c"
  5150 ;; Parameters:    Size  Location     Type
  5151 ;;  data_byte       1    wreg     unsigned char 
  5152 ;; Auto vars:     Size  Location     Type
  5153 ;;  data_byte       1    5[COMRAM] unsigned char 
  5154 ;; Return value:  Size  Location     Type
  5155 ;;                  1    wreg      void 
  5156 ;; Registers used:
  5157 ;;		wreg, status,2, status,0, cstack
  5158 ;; Tracked objects:
  5159 ;;		On entry : 0/0
  5160 ;;		On exit  : 0/0
  5161 ;;		Unchanged: 0/0
  5162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5163 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5164 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5166 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5167 ;;Total ram usage:        1 bytes
  5168 ;; Hardware stack levels used: 1
  5169 ;; Hardware stack levels required when called: 3
  5170 ;; This function calls:
  5171 ;;		_I2C_2_Master_Idle
  5172 ;; This function is called by:
  5173 ;;		_color_writetoaddr
  5174 ;;		_color_read_all
  5175 ;; This function uses a non-reentrant model
  5176 ;;
  5177                           
  5178                           	psect	text28
  5179   00266E                     __ptext28:
  5180                           	callstack 0
  5181   00266E                     _I2C_2_Master_Write:
  5182                           	callstack 25
  5183                           
  5184                           ;incstack = 0
  5185                           ;I2C_2_Master_Write@data_byte stored from wreg
  5186   00266E  6E06               	movwf	I2C_2_Master_Write@data_byte^0,c
  5187   002670                     
  5188                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  5189   002670  ECE3  F012         	call	_I2C_2_Master_Idle	;wreg free
  5190   002674                     
  5191                           ;i2c.c: 48:   SSP2BUF = data_byte;
  5192   002674  C006  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  5193   002678  0012               	return		;funcret
  5194   00267A                     __end_of_I2C_2_Master_Write:
  5195                           	callstack 0
  5196                           
  5197 ;; *************** function _I2C_2_Master_Stop *****************
  5198 ;; Defined at:
  5199 ;;		line 39 in file "i2c.c"
  5200 ;; Parameters:    Size  Location     Type
  5201 ;;		None
  5202 ;; Auto vars:     Size  Location     Type
  5203 ;;		None
  5204 ;; Return value:  Size  Location     Type
  5205 ;;                  1    wreg      void 
  5206 ;; Registers used:
  5207 ;;		wreg, status,2, status,0, cstack
  5208 ;; Tracked objects:
  5209 ;;		On entry : 0/0
  5210 ;;		On exit  : 0/0
  5211 ;;		Unchanged: 0/0
  5212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5214 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5216 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5217 ;;Total ram usage:        0 bytes
  5218 ;; Hardware stack levels used: 1
  5219 ;; Hardware stack levels required when called: 3
  5220 ;; This function calls:
  5221 ;;		_I2C_2_Master_Idle
  5222 ;; This function is called by:
  5223 ;;		_color_writetoaddr
  5224 ;;		_color_read_all
  5225 ;; This function uses a non-reentrant model
  5226 ;;
  5227                           
  5228                           	psect	text29
  5229   002686                     __ptext29:
  5230                           	callstack 0
  5231   002686                     _I2C_2_Master_Stop:
  5232                           	callstack 25
  5233   002686                     
  5234                           ;i2c.c: 41:   I2C_2_Master_Idle();
  5235   002686  ECE3  F012         	call	_I2C_2_Master_Idle	;wreg free
  5236   00268A                     
  5237                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  5238   00268A  010E               	movlb	14	; () banked
  5239   00268C  85DA               	bsf	218,2,b	;volatile
  5240   00268E                     
  5241                           ; BSR set to: 14
  5242   00268E  0012               	return		;funcret
  5243   002690                     __end_of_I2C_2_Master_Stop:
  5244                           	callstack 0
  5245                           
  5246 ;; *************** function _I2C_2_Master_Start *****************
  5247 ;; Defined at:
  5248 ;;		line 27 in file "i2c.c"
  5249 ;; Parameters:    Size  Location     Type
  5250 ;;		None
  5251 ;; Auto vars:     Size  Location     Type
  5252 ;;		None
  5253 ;; Return value:  Size  Location     Type
  5254 ;;                  1    wreg      void 
  5255 ;; Registers used:
  5256 ;;		wreg, status,2, status,0, cstack
  5257 ;; Tracked objects:
  5258 ;;		On entry : 0/0
  5259 ;;		On exit  : 0/0
  5260 ;;		Unchanged: 0/0
  5261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5263 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5265 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5266 ;;Total ram usage:        0 bytes
  5267 ;; Hardware stack levels used: 1
  5268 ;; Hardware stack levels required when called: 3
  5269 ;; This function calls:
  5270 ;;		_I2C_2_Master_Idle
  5271 ;; This function is called by:
  5272 ;;		_color_writetoaddr
  5273 ;;		_color_read_all
  5274 ;; This function uses a non-reentrant model
  5275 ;;
  5276                           
  5277                           	psect	text30
  5278   002690                     __ptext30:
  5279                           	callstack 0
  5280   002690                     _I2C_2_Master_Start:
  5281                           	callstack 25
  5282   002690                     
  5283                           ;i2c.c: 29:   I2C_2_Master_Idle();
  5284   002690  ECE3  F012         	call	_I2C_2_Master_Idle	;wreg free
  5285   002694                     
  5286                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  5287   002694  010E               	movlb	14	; () banked
  5288   002696  81DA               	bsf	218,0,b	;volatile
  5289   002698                     
  5290                           ; BSR set to: 14
  5291   002698  0012               	return		;funcret
  5292   00269A                     __end_of_I2C_2_Master_Start:
  5293                           	callstack 0
  5294                           
  5295 ;; *************** function _I2C_2_Master_RepStart *****************
  5296 ;; Defined at:
  5297 ;;		line 33 in file "i2c.c"
  5298 ;; Parameters:    Size  Location     Type
  5299 ;;		None
  5300 ;; Auto vars:     Size  Location     Type
  5301 ;;		None
  5302 ;; Return value:  Size  Location     Type
  5303 ;;                  1    wreg      void 
  5304 ;; Registers used:
  5305 ;;		wreg, status,2, status,0, cstack
  5306 ;; Tracked objects:
  5307 ;;		On entry : 0/0
  5308 ;;		On exit  : 0/0
  5309 ;;		Unchanged: 0/0
  5310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5312 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5314 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5315 ;;Total ram usage:        0 bytes
  5316 ;; Hardware stack levels used: 1
  5317 ;; Hardware stack levels required when called: 3
  5318 ;; This function calls:
  5319 ;;		_I2C_2_Master_Idle
  5320 ;; This function is called by:
  5321 ;;		_color_read_all
  5322 ;; This function uses a non-reentrant model
  5323 ;;
  5324                           
  5325                           	psect	text31
  5326   00269A                     __ptext31:
  5327                           	callstack 0
  5328   00269A                     _I2C_2_Master_RepStart:
  5329                           	callstack 23
  5330   00269A                     
  5331                           ;i2c.c: 35:   I2C_2_Master_Idle();
  5332   00269A  ECE3  F012         	call	_I2C_2_Master_Idle	;wreg free
  5333   00269E                     
  5334                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  5335   00269E  010E               	movlb	14	; () banked
  5336   0026A0  83DA               	bsf	218,1,b	;volatile
  5337   0026A2                     
  5338                           ; BSR set to: 14
  5339   0026A2  0012               	return		;funcret
  5340   0026A4                     __end_of_I2C_2_Master_RepStart:
  5341                           	callstack 0
  5342                           
  5343 ;; *************** function _I2C_2_Master_Read *****************
  5344 ;; Defined at:
  5345 ;;		line 51 in file "i2c.c"
  5346 ;; Parameters:    Size  Location     Type
  5347 ;;  ack             1    wreg     unsigned char 
  5348 ;; Auto vars:     Size  Location     Type
  5349 ;;  ack             1    6[COMRAM] unsigned char 
  5350 ;;  tmp             1    7[COMRAM] unsigned char 
  5351 ;; Return value:  Size  Location     Type
  5352 ;;                  1    wreg      unsigned char 
  5353 ;; Registers used:
  5354 ;;		wreg, status,2, status,0, cstack
  5355 ;; Tracked objects:
  5356 ;;		On entry : 0/0
  5357 ;;		On exit  : 0/0
  5358 ;;		Unchanged: 0/0
  5359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5361 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5362 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5363 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5364 ;;Total ram usage:        3 bytes
  5365 ;; Hardware stack levels used: 1
  5366 ;; Hardware stack levels required when called: 3
  5367 ;; This function calls:
  5368 ;;		_I2C_2_Master_Idle
  5369 ;; This function is called by:
  5370 ;;		_color_read_all
  5371 ;; This function uses a non-reentrant model
  5372 ;;
  5373                           
  5374                           	psect	text32
  5375   0023D2                     __ptext32:
  5376                           	callstack 0
  5377   0023D2                     _I2C_2_Master_Read:
  5378                           	callstack 23
  5379                           
  5380                           ; BSR set to: 14
  5381                           ;incstack = 0
  5382                           ;I2C_2_Master_Read@ack stored from wreg
  5383   0023D2  6E07               	movwf	I2C_2_Master_Read@ack^0,c
  5384   0023D4                     
  5385                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  5386   0023D4  ECE3  F012         	call	_I2C_2_Master_Idle	;wreg free
  5387   0023D8                     
  5388                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  5389   0023D8  010E               	movlb	14	; () banked
  5390   0023DA  87DA               	bsf	218,3,b	;volatile
  5391                           
  5392                           ;i2c.c: 56:   I2C_2_Master_Idle();
  5393   0023DC  ECE3  F012         	call	_I2C_2_Master_Idle	;wreg free
  5394   0023E0                     
  5395                           ;i2c.c: 57:   tmp = SSP2BUF;
  5396   0023E0  CED5 F008          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  5397                           
  5398                           ;i2c.c: 58:   I2C_2_Master_Idle();
  5399   0023E4  ECE3  F012         	call	_I2C_2_Master_Idle	;wreg free
  5400   0023E8                     
  5401                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  5402   0023E8  5007               	movf	I2C_2_Master_Read@ack^0,w,c
  5403   0023EA  B4D8               	btfsc	status,2,c
  5404   0023EC  EFFA  F011         	goto	u2171
  5405   0023F0  EFFE  F011         	goto	u2170
  5406   0023F4                     u2171:
  5407   0023F4  6A06               	clrf	??_I2C_2_Master_Read^0,c
  5408   0023F6  2A06               	incf	??_I2C_2_Master_Read^0,f,c
  5409   0023F8  EFFF  F011         	goto	u2188
  5410   0023FC                     u2170:
  5411   0023FC  6A06               	clrf	??_I2C_2_Master_Read^0,c
  5412   0023FE                     u2188:
  5413   0023FE  3A06               	swapf	??_I2C_2_Master_Read^0,f,c
  5414   002400  4606               	rlncf	??_I2C_2_Master_Read^0,f,c
  5415   002402  010E               	movlb	14	; () banked
  5416   002404  51DA               	movf	218,w,b	;volatile
  5417   002406  1806               	xorwf	??_I2C_2_Master_Read^0,w,c
  5418   002408  0BDF               	andlw	-33
  5419   00240A  1806               	xorwf	??_I2C_2_Master_Read^0,w,c
  5420   00240C  6FDA               	movwf	218,b	;volatile
  5421   00240E                     
  5422                           ; BSR set to: 14
  5423                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  5424   00240E  89DA               	bsf	218,4,b	;volatile
  5425   002410                     
  5426                           ; BSR set to: 14
  5427                           ;i2c.c: 61:   return tmp;
  5428   002410  5008               	movf	I2C_2_Master_Read@tmp^0,w,c
  5429   002412                     
  5430                           ; BSR set to: 14
  5431   002412  0012               	return		;funcret
  5432   002414                     __end_of_I2C_2_Master_Read:
  5433                           	callstack 0
  5434                           
  5435 ;; *************** function _I2C_2_Master_Idle *****************
  5436 ;; Defined at:
  5437 ;;		line 22 in file "i2c.c"
  5438 ;; Parameters:    Size  Location     Type
  5439 ;;		None
  5440 ;; Auto vars:     Size  Location     Type
  5441 ;;		None
  5442 ;; Return value:  Size  Location     Type
  5443 ;;                  1    wreg      void 
  5444 ;; Registers used:
  5445 ;;		wreg, status,2, status,0
  5446 ;; Tracked objects:
  5447 ;;		On entry : 0/0
  5448 ;;		On exit  : 0/0
  5449 ;;		Unchanged: 0/0
  5450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5452 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5453 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5454 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5455 ;;Total ram usage:        1 bytes
  5456 ;; Hardware stack levels used: 1
  5457 ;; Hardware stack levels required when called: 2
  5458 ;; This function calls:
  5459 ;;		Nothing
  5460 ;; This function is called by:
  5461 ;;		_I2C_2_Master_Start
  5462 ;;		_I2C_2_Master_RepStart
  5463 ;;		_I2C_2_Master_Stop
  5464 ;;		_I2C_2_Master_Write
  5465 ;;		_I2C_2_Master_Read
  5466 ;; This function uses a non-reentrant model
  5467 ;;
  5468                           
  5469                           	psect	text33
  5470   0025C6                     __ptext33:
  5471                           	callstack 0
  5472   0025C6                     _I2C_2_Master_Idle:
  5473                           	callstack 25
  5474   0025C6                     l523:
  5475   0025C6  010E               	movlb	14	; () banked
  5476   0025C8  B5D8               	btfsc	216,2,b	;volatile
  5477   0025CA  EFE9  F012         	goto	u2151
  5478   0025CE  EFEB  F012         	goto	u2150
  5479   0025D2                     u2151:
  5480   0025D2  EFE3  F012         	goto	l523
  5481   0025D6                     u2150:
  5482   0025D6                     
  5483                           ; BSR set to: 14
  5484   0025D6  CEDA F005          	movff	3802,??_I2C_2_Master_Idle	;volatile
  5485   0025DA  0E1F               	movlw	31
  5486   0025DC  1605               	andwf	??_I2C_2_Master_Idle^0,f,c
  5487   0025DE  A4D8               	btfss	status,2,c
  5488   0025E0  EFF4  F012         	goto	u2161
  5489   0025E4  EFF6  F012         	goto	u2160
  5490   0025E8                     u2161:
  5491   0025E8  EFE3  F012         	goto	l523
  5492   0025EC                     u2160:
  5493   0025EC                     
  5494                           ; BSR set to: 14
  5495   0025EC  0012               	return		;funcret
  5496   0025EE                     __end_of_I2C_2_Master_Idle:
  5497                           	callstack 0
  5498                           
  5499 ;; *************** function _abs *****************
  5500 ;; Defined at:
  5501 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
  5502 ;; Parameters:    Size  Location     Type
  5503 ;;  a               2    4[COMRAM] int 
  5504 ;; Auto vars:     Size  Location     Type
  5505 ;;		None
  5506 ;; Return value:  Size  Location     Type
  5507 ;;                  2    4[COMRAM] int 
  5508 ;; Registers used:
  5509 ;;		wreg, status,2, status,0
  5510 ;; Tracked objects:
  5511 ;;		On entry : 0/0
  5512 ;;		On exit  : 0/0
  5513 ;;		Unchanged: 0/0
  5514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5515 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5517 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5518 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5519 ;;Total ram usage:        4 bytes
  5520 ;; Hardware stack levels used: 1
  5521 ;; Hardware stack levels required when called: 2
  5522 ;; This function calls:
  5523 ;;		Nothing
  5524 ;; This function is called by:
  5525 ;;		_checkColor
  5526 ;; This function uses a non-reentrant model
  5527 ;;
  5528                           
  5529                           	psect	text34
  5530   0024E6                     __ptext34:
  5531                           	callstack 0
  5532   0024E6                     _abs:
  5533                           	callstack 25
  5534   0024E6  BE06               	btfsc	(abs@a+1)^0,7,c
  5535   0024E8  EF78  F012         	goto	u2301
  5536   0024EC  EF7A  F012         	goto	u2300
  5537   0024F0                     u2301:
  5538   0024F0  EF80  F012         	goto	l1287
  5539   0024F4                     u2300:
  5540   0024F4  C005  F005         	movff	abs@a,?_abs
  5541   0024F8  C006  F006         	movff	abs@a+1,?_abs+1
  5542   0024FC  EF8C  F012         	goto	l1290
  5543   002500                     l1287:
  5544   002500  C005  F007         	movff	abs@a,??_abs
  5545   002504  C006  F008         	movff	abs@a+1,??_abs+1
  5546   002508  1E07               	comf	??_abs^0,f,c
  5547   00250A  1E08               	comf	(??_abs+1)^0,f,c
  5548   00250C  4A07               	infsnz	??_abs^0,f,c
  5549   00250E  2A08               	incf	(??_abs+1)^0,f,c
  5550   002510  C007  F005         	movff	??_abs,?_abs
  5551   002514  C008  F006         	movff	??_abs+1,?_abs+1
  5552   002518                     l1290:
  5553   002518  0012               	return		;funcret
  5554   00251A                     __end_of_abs:
  5555                           	callstack 0
  5556                           
  5557 ;; *************** function ___wmul *****************
  5558 ;; Defined at:
  5559 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  5560 ;; Parameters:    Size  Location     Type
  5561 ;;  multiplier      2    4[COMRAM] unsigned int 
  5562 ;;  multiplicand    2    6[COMRAM] unsigned int 
  5563 ;; Auto vars:     Size  Location     Type
  5564 ;;  product         2    8[COMRAM] unsigned int 
  5565 ;; Return value:  Size  Location     Type
  5566 ;;                  2    4[COMRAM] unsigned int 
  5567 ;; Registers used:
  5568 ;;		wreg, status,2, status,0, prodl, prodh
  5569 ;; Tracked objects:
  5570 ;;		On entry : 0/0
  5571 ;;		On exit  : 0/0
  5572 ;;		Unchanged: 0/0
  5573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5574 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5575 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5577 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5578 ;;Total ram usage:        6 bytes
  5579 ;; Hardware stack levels used: 1
  5580 ;; Hardware stack levels required when called: 2
  5581 ;; This function calls:
  5582 ;;		Nothing
  5583 ;; This function is called by:
  5584 ;;		_checkColor
  5585 ;;		_calibCards
  5586 ;; This function uses a non-reentrant model
  5587 ;;
  5588                           
  5589                           	psect	text35
  5590   0025EE                     __ptext35:
  5591                           	callstack 0
  5592   0025EE                     ___wmul:
  5593                           	callstack 25
  5594   0025EE  5005               	movf	___wmul@multiplier^0,w,c
  5595   0025F0  0207               	mulwf	___wmul@multiplicand^0,c
  5596   0025F2  CFF3 F009          	movff	prodl,___wmul@product
  5597   0025F6  CFF4 F00A          	movff	prodh,___wmul@product+1
  5598   0025FA  5005               	movf	___wmul@multiplier^0,w,c
  5599   0025FC  0208               	mulwf	(___wmul@multiplicand+1)^0,c
  5600   0025FE  50F3               	movf	243,w,c
  5601   002600  260A               	addwf	(___wmul@product+1)^0,f,c
  5602   002602  5006               	movf	(___wmul@multiplier+1)^0,w,c
  5603   002604  0207               	mulwf	___wmul@multiplicand^0,c
  5604   002606  50F3               	movf	243,w,c
  5605   002608  260A               	addwf	(___wmul@product+1)^0,f,c
  5606   00260A  C009  F005         	movff	___wmul@product,?___wmul
  5607   00260E  C00A  F006         	movff	___wmul@product+1,?___wmul+1
  5608   002612  0012               	return		;funcret
  5609   002614                     __end_of___wmul:
  5610                           	callstack 0
  5611                           
  5612 ;; *************** function ___aldiv *****************
  5613 ;; Defined at:
  5614 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\aldiv.c"
  5615 ;; Parameters:    Size  Location     Type
  5616 ;;  dividend        4   10[COMRAM] long 
  5617 ;;  divisor         4   14[COMRAM] long 
  5618 ;; Auto vars:     Size  Location     Type
  5619 ;;  quotient        4   20[COMRAM] long 
  5620 ;;  sign            1   19[COMRAM] unsigned char 
  5621 ;;  counter         1   18[COMRAM] unsigned char 
  5622 ;; Return value:  Size  Location     Type
  5623 ;;                  4   10[COMRAM] long 
  5624 ;; Registers used:
  5625 ;;		wreg, status,2, status,0
  5626 ;; Tracked objects:
  5627 ;;		On entry : 0/0
  5628 ;;		On exit  : 0/0
  5629 ;;		Unchanged: 0/0
  5630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5631 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5632 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5634 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5635 ;;Total ram usage:       14 bytes
  5636 ;; Hardware stack levels used: 1
  5637 ;; Hardware stack levels required when called: 2
  5638 ;; This function calls:
  5639 ;;		Nothing
  5640 ;; This function is called by:
  5641 ;;		_checkColor
  5642 ;; This function uses a non-reentrant model
  5643 ;;
  5644                           
  5645                           	psect	text36
  5646   001A52                     __ptext36:
  5647                           	callstack 0
  5648   001A52                     ___aldiv:
  5649                           	callstack 25
  5650   001A52  0E00               	movlw	0
  5651   001A54  6E14               	movwf	___aldiv@sign^0,c
  5652   001A56  BE12               	btfsc	(___aldiv@divisor+3)^0,7,c
  5653   001A58  EF32  F00D         	goto	u2340
  5654   001A5C  EF30  F00D         	goto	u2341
  5655   001A60                     u2341:
  5656   001A60  EF3C  F00D         	goto	l3219
  5657   001A64                     u2340:
  5658   001A64  1E12               	comf	(___aldiv@divisor+3)^0,f,c
  5659   001A66  1E11               	comf	(___aldiv@divisor+2)^0,f,c
  5660   001A68  1E10               	comf	(___aldiv@divisor+1)^0,f,c
  5661   001A6A  6C0F               	negf	___aldiv@divisor^0,c
  5662   001A6C  0E00               	movlw	0
  5663   001A6E  2210               	addwfc	(___aldiv@divisor+1)^0,f,c
  5664   001A70  2211               	addwfc	(___aldiv@divisor+2)^0,f,c
  5665   001A72  2212               	addwfc	(___aldiv@divisor+3)^0,f,c
  5666   001A74  0E01               	movlw	1
  5667   001A76  6E14               	movwf	___aldiv@sign^0,c
  5668   001A78                     l3219:
  5669   001A78  BE0E               	btfsc	(___aldiv@dividend+3)^0,7,c
  5670   001A7A  EF43  F00D         	goto	u2350
  5671   001A7E  EF41  F00D         	goto	u2351
  5672   001A82                     u2351:
  5673   001A82  EF4D  F00D         	goto	l3225
  5674   001A86                     u2350:
  5675   001A86  1E0E               	comf	(___aldiv@dividend+3)^0,f,c
  5676   001A88  1E0D               	comf	(___aldiv@dividend+2)^0,f,c
  5677   001A8A  1E0C               	comf	(___aldiv@dividend+1)^0,f,c
  5678   001A8C  6C0B               	negf	___aldiv@dividend^0,c
  5679   001A8E  0E00               	movlw	0
  5680   001A90  220C               	addwfc	(___aldiv@dividend+1)^0,f,c
  5681   001A92  220D               	addwfc	(___aldiv@dividend+2)^0,f,c
  5682   001A94  220E               	addwfc	(___aldiv@dividend+3)^0,f,c
  5683   001A96  0E01               	movlw	1
  5684   001A98  1A14               	xorwf	___aldiv@sign^0,f,c
  5685   001A9A                     l3225:
  5686   001A9A  0E00               	movlw	0
  5687   001A9C  6E15               	movwf	___aldiv@quotient^0,c
  5688   001A9E  0E00               	movlw	0
  5689   001AA0  6E16               	movwf	(___aldiv@quotient+1)^0,c
  5690   001AA2  0E00               	movlw	0
  5691   001AA4  6E17               	movwf	(___aldiv@quotient+2)^0,c
  5692   001AA6  0E00               	movlw	0
  5693   001AA8  6E18               	movwf	(___aldiv@quotient+3)^0,c
  5694   001AAA  500F               	movf	___aldiv@divisor^0,w,c
  5695   001AAC  1010               	iorwf	(___aldiv@divisor+1)^0,w,c
  5696   001AAE  1011               	iorwf	(___aldiv@divisor+2)^0,w,c
  5697   001AB0  1012               	iorwf	(___aldiv@divisor+3)^0,w,c
  5698   001AB2  B4D8               	btfsc	status,2,c
  5699   001AB4  EF5E  F00D         	goto	u2361
  5700   001AB8  EF60  F00D         	goto	u2360
  5701   001ABC                     u2361:
  5702   001ABC  EF96  F00D         	goto	l3247
  5703   001AC0                     u2360:
  5704   001AC0  0E01               	movlw	1
  5705   001AC2  6E13               	movwf	___aldiv@counter^0,c
  5706   001AC4  EF6A  F00D         	goto	l3233
  5707   001AC8                     l3231:
  5708   001AC8  90D8               	bcf	status,0,c
  5709   001ACA  360F               	rlcf	___aldiv@divisor^0,f,c
  5710   001ACC  3610               	rlcf	(___aldiv@divisor+1)^0,f,c
  5711   001ACE  3611               	rlcf	(___aldiv@divisor+2)^0,f,c
  5712   001AD0  3612               	rlcf	(___aldiv@divisor+3)^0,f,c
  5713   001AD2  2A13               	incf	___aldiv@counter^0,f,c
  5714   001AD4                     l3233:
  5715   001AD4  AE12               	btfss	(___aldiv@divisor+3)^0,7,c
  5716   001AD6  EF6F  F00D         	goto	u2371
  5717   001ADA  EF71  F00D         	goto	u2370
  5718   001ADE                     u2371:
  5719   001ADE  EF64  F00D         	goto	l3231
  5720   001AE2                     u2370:
  5721   001AE2                     l3235:
  5722   001AE2  90D8               	bcf	status,0,c
  5723   001AE4  3615               	rlcf	___aldiv@quotient^0,f,c
  5724   001AE6  3616               	rlcf	(___aldiv@quotient+1)^0,f,c
  5725   001AE8  3617               	rlcf	(___aldiv@quotient+2)^0,f,c
  5726   001AEA  3618               	rlcf	(___aldiv@quotient+3)^0,f,c
  5727   001AEC  500F               	movf	___aldiv@divisor^0,w,c
  5728   001AEE  5C0B               	subwf	___aldiv@dividend^0,w,c
  5729   001AF0  5010               	movf	(___aldiv@divisor+1)^0,w,c
  5730   001AF2  580C               	subwfb	(___aldiv@dividend+1)^0,w,c
  5731   001AF4  5011               	movf	(___aldiv@divisor+2)^0,w,c
  5732   001AF6  580D               	subwfb	(___aldiv@dividend+2)^0,w,c
  5733   001AF8  5012               	movf	(___aldiv@divisor+3)^0,w,c
  5734   001AFA  580E               	subwfb	(___aldiv@dividend+3)^0,w,c
  5735   001AFC  A0D8               	btfss	status,0,c
  5736   001AFE  EF83  F00D         	goto	u2381
  5737   001B02  EF85  F00D         	goto	u2380
  5738   001B06                     u2381:
  5739   001B06  EF8E  F00D         	goto	l3243
  5740   001B0A                     u2380:
  5741   001B0A  500F               	movf	___aldiv@divisor^0,w,c
  5742   001B0C  5E0B               	subwf	___aldiv@dividend^0,f,c
  5743   001B0E  5010               	movf	(___aldiv@divisor+1)^0,w,c
  5744   001B10  5A0C               	subwfb	(___aldiv@dividend+1)^0,f,c
  5745   001B12  5011               	movf	(___aldiv@divisor+2)^0,w,c
  5746   001B14  5A0D               	subwfb	(___aldiv@dividend+2)^0,f,c
  5747   001B16  5012               	movf	(___aldiv@divisor+3)^0,w,c
  5748   001B18  5A0E               	subwfb	(___aldiv@dividend+3)^0,f,c
  5749   001B1A  8015               	bsf	___aldiv@quotient^0,0,c
  5750   001B1C                     l3243:
  5751   001B1C  90D8               	bcf	status,0,c
  5752   001B1E  3212               	rrcf	(___aldiv@divisor+3)^0,f,c
  5753   001B20  3211               	rrcf	(___aldiv@divisor+2)^0,f,c
  5754   001B22  3210               	rrcf	(___aldiv@divisor+1)^0,f,c
  5755   001B24  320F               	rrcf	___aldiv@divisor^0,f,c
  5756   001B26  2E13               	decfsz	___aldiv@counter^0,f,c
  5757   001B28  EF71  F00D         	goto	l3235
  5758   001B2C                     l3247:
  5759   001B2C  5014               	movf	___aldiv@sign^0,w,c
  5760   001B2E  B4D8               	btfsc	status,2,c
  5761   001B30  EF9C  F00D         	goto	u2391
  5762   001B34  EF9E  F00D         	goto	u2390
  5763   001B38                     u2391:
  5764   001B38  EFA6  F00D         	goto	l3251
  5765   001B3C                     u2390:
  5766   001B3C  1E18               	comf	(___aldiv@quotient+3)^0,f,c
  5767   001B3E  1E17               	comf	(___aldiv@quotient+2)^0,f,c
  5768   001B40  1E16               	comf	(___aldiv@quotient+1)^0,f,c
  5769   001B42  6C15               	negf	___aldiv@quotient^0,c
  5770   001B44  0E00               	movlw	0
  5771   001B46  2216               	addwfc	(___aldiv@quotient+1)^0,f,c
  5772   001B48  2217               	addwfc	(___aldiv@quotient+2)^0,f,c
  5773   001B4A  2218               	addwfc	(___aldiv@quotient+3)^0,f,c
  5774   001B4C                     l3251:
  5775   001B4C  C015  F00B         	movff	___aldiv@quotient,?___aldiv
  5776   001B50  C016  F00C         	movff	___aldiv@quotient+1,?___aldiv+1
  5777   001B54  C017  F00D         	movff	___aldiv@quotient+2,?___aldiv+2
  5778   001B58  C018  F00E         	movff	___aldiv@quotient+3,?___aldiv+3
  5779   001B5C  0012               	return		;funcret
  5780   001B5E                     __end_of___aldiv:
  5781                           	callstack 0
  5782                           
  5783 ;; *************** function _Interrupts_init *****************
  5784 ;; Defined at:
  5785 ;;		line 10 in file "interrupts.c"
  5786 ;; Parameters:    Size  Location     Type
  5787 ;;		None
  5788 ;; Auto vars:     Size  Location     Type
  5789 ;;		None
  5790 ;; Return value:  Size  Location     Type
  5791 ;;                  1    wreg      void 
  5792 ;; Registers used:
  5793 ;;		None
  5794 ;; Tracked objects:
  5795 ;;		On entry : 0/0
  5796 ;;		On exit  : 0/0
  5797 ;;		Unchanged: 0/0
  5798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5800 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5802 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5803 ;;Total ram usage:        0 bytes
  5804 ;; Hardware stack levels used: 1
  5805 ;; Hardware stack levels required when called: 2
  5806 ;; This function calls:
  5807 ;;		Nothing
  5808 ;; This function is called by:
  5809 ;;		_main
  5810 ;; This function uses a non-reentrant model
  5811 ;;
  5812                           
  5813                           	psect	text37
  5814   00267A                     __ptext37:
  5815                           	callstack 0
  5816   00267A                     _Interrupts_init:
  5817                           	callstack 28
  5818   00267A                     
  5819                           ;interrupts.c: 16:     INTCONbits.IPEN = 0;
  5820   00267A  9AF2               	bcf	242,5,c	;volatile
  5821                           
  5822                           ;interrupts.c: 17:     INTCONbits.PEIE = 1;
  5823   00267C  8CF2               	bsf	242,6,c	;volatile
  5824                           
  5825                           ;interrupts.c: 18:     PIE4bits.RC4IE=1;
  5826   00267E  010E               	movlb	14	; () banked
  5827   002680  872D               	bsf	45,3,b	;volatile
  5828                           
  5829                           ;interrupts.c: 20:     INTCONbits.GIE=1;
  5830   002682  8EF2               	bsf	242,7,c	;volatile
  5831   002684                     
  5832                           ; BSR set to: 14
  5833   002684  0012               	return		;funcret
  5834   002686                     __end_of_Interrupts_init:
  5835                           	callstack 0
  5836                           
  5837 ;; *************** function _HighISR *****************
  5838 ;; Defined at:
  5839 ;;		line 28 in file "interrupts.c"
  5840 ;; Parameters:    Size  Location     Type
  5841 ;;		None
  5842 ;; Auto vars:     Size  Location     Type
  5843 ;;		None
  5844 ;; Return value:  Size  Location     Type
  5845 ;;                  1    wreg      void 
  5846 ;; Registers used:
  5847 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5848 ;; Tracked objects:
  5849 ;;		On entry : 0/0
  5850 ;;		On exit  : 0/0
  5851 ;;		Unchanged: 0/0
  5852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5854 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5855 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5856 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5857 ;;Total ram usage:        2 bytes
  5858 ;; Hardware stack levels used: 1
  5859 ;; Hardware stack levels required when called: 1
  5860 ;; This function calls:
  5861 ;;		_getCharFromTxBuf
  5862 ;;		_isDataInTxBuf
  5863 ;; This function is called by:
  5864 ;;		Interrupt level 2
  5865 ;; This function uses a non-reentrant model
  5866 ;;
  5867                           
  5868                           	psect	intcode
  5869   000008                     __pintcode:
  5870                           	callstack 0
  5871   000008                     _HighISR:
  5872                           	callstack 21
  5873                           
  5874                           ; BSR set to: 14
  5875                           ;incstack = 0
  5876   000008  825B               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  5877   00000A  CFD9 F003          	movff	fsr2l,??_HighISR
  5878   00000E  CFDA F004          	movff	fsr2h,??_HighISR+1
  5879   000012                     
  5880                           ;interrupts.c: 30:     if(PIR4bits.TX4IF) {
  5881   000012  010E               	movlb	14	; () banked
  5882   000014  A537               	btfss	55,2,b	;volatile
  5883   000016  EF0F  F000         	goto	i2u203_41
  5884   00001A  EF11  F000         	goto	i2u203_40
  5885   00001E                     i2u203_41:
  5886   00001E  EF15  F000         	goto	i2l2891
  5887   000022                     i2u203_40:
  5888   000022                     
  5889                           ; BSR set to: 14
  5890                           ;interrupts.c: 31:         TX4REG = getCharFromTxBuf();
  5891   000022  ECA4  F012         	call	_getCharFromTxBuf	;wreg free
  5892   000026  010E               	movlb	14	; () banked
  5893   000028  6FE4               	movwf	228,b	;volatile
  5894   00002A                     i2l2891:
  5895                           
  5896                           ; BSR set to: 14
  5897                           ;interrupts.c: 33:     if (!isDataInTxBuf()) {
  5898   00002A  EC2B  F013         	call	_isDataInTxBuf	;wreg free
  5899   00002E  0900               	iorlw	0
  5900   000030  A4D8               	btfss	status,2,c
  5901   000032  EF1D  F000         	goto	i2u204_41
  5902   000036  EF1F  F000         	goto	i2u204_40
  5903   00003A                     i2u204_41:
  5904   00003A  EF21  F000         	goto	i2l595
  5905   00003E                     i2u204_40:
  5906   00003E                     
  5907                           ;interrupts.c: 34:         PIE4bits.TX4IE=0;
  5908   00003E  010E               	movlb	14	; () banked
  5909   000040  952D               	bcf	45,2,b	;volatile
  5910   000042                     i2l595:
  5911   000042  C004  FFDA         	movff	??_HighISR+1,fsr2h
  5912   000046  C003  FFD9         	movff	??_HighISR,fsr2l
  5913   00004A  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  5914   00004C  0011               	retfie		f
  5915   00004E                     __end_of_HighISR:
  5916                           	callstack 0
  5917                           
  5918 ;; *************** function _isDataInTxBuf *****************
  5919 ;; Defined at:
  5920 ;;		line 90 in file "serial.c"
  5921 ;; Parameters:    Size  Location     Type
  5922 ;;		None
  5923 ;; Auto vars:     Size  Location     Type
  5924 ;;		None
  5925 ;; Return value:  Size  Location     Type
  5926 ;;                  1    wreg      unsigned char 
  5927 ;; Registers used:
  5928 ;;		wreg, status,2, status,0
  5929 ;; Tracked objects:
  5930 ;;		On entry : 0/0
  5931 ;;		On exit  : 0/0
  5932 ;;		Unchanged: 0/0
  5933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5935 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5936 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5937 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5938 ;;Total ram usage:        0 bytes
  5939 ;; Hardware stack levels used: 1
  5940 ;; This function calls:
  5941 ;;		Nothing
  5942 ;; This function is called by:
  5943 ;;		_HighISR
  5944 ;;		_sendTxBuf
  5945 ;; This function uses a non-reentrant model
  5946 ;;
  5947                           
  5948                           	psect	text39
  5949   002656                     __ptext39:
  5950                           	callstack 0
  5951   002656                     _isDataInTxBuf:
  5952                           	callstack 21
  5953   002656                     
  5954                           ;serial.c: 91:     return (TxBufWriteCnt!=TxBufReadCnt);
  5955   002656  5057               	movf	_TxBufReadCnt^0,w,c	;volatile
  5956   002658  1858               	xorwf	_TxBufWriteCnt^0,w,c	;volatile
  5957   00265A  A4D8               	btfss	status,2,c
  5958   00265C  EF32  F013         	goto	i2u79_41
  5959   002660  EF35  F013         	goto	i2u79_40
  5960   002664                     i2u79_41:
  5961   002664  0E01               	movlw	1
  5962   002666  EF36  F013         	goto	i2u80_40
  5963   00266A                     i2u79_40:
  5964   00266A  0E00               	movlw	0
  5965   00266C                     i2u80_40:
  5966   00266C  0012               	return		;funcret
  5967   00266E                     __end_of_isDataInTxBuf:
  5968                           	callstack 0
  5969                           
  5970 ;; *************** function _getCharFromTxBuf *****************
  5971 ;; Defined at:
  5972 ;;		line 76 in file "serial.c"
  5973 ;; Parameters:    Size  Location     Type
  5974 ;;		None
  5975 ;; Auto vars:     Size  Location     Type
  5976 ;;		None
  5977 ;; Return value:  Size  Location     Type
  5978 ;;                  1    wreg      unsigned char 
  5979 ;; Registers used:
  5980 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5981 ;; Tracked objects:
  5982 ;;		On entry : 0/0
  5983 ;;		On exit  : 0/0
  5984 ;;		Unchanged: 0/0
  5985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5988 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5989 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5990 ;;Total ram usage:        2 bytes
  5991 ;; Hardware stack levels used: 1
  5992 ;; This function calls:
  5993 ;;		Nothing
  5994 ;; This function is called by:
  5995 ;;		_HighISR
  5996 ;; This function uses a non-reentrant model
  5997 ;;
  5998                           
  5999                           	psect	text40
  6000   002548                     __ptext40:
  6001                           	callstack 0
  6002   002548                     _getCharFromTxBuf:
  6003                           	callstack 21
  6004   002548                     
  6005                           ;serial.c: 77:     if (TxBufReadCnt>=60) {TxBufReadCnt=0;}
  6006   002548  0E3B               	movlw	59
  6007   00254A  6457               	cpfsgt	_TxBufReadCnt^0,c	;volatile
  6008   00254C  EFAA  F012         	goto	i2u181_41
  6009   002550  EFAC  F012         	goto	i2u181_40
  6010   002554                     i2u181_41:
  6011   002554  EFAE  F012         	goto	i2l2723
  6012   002558                     i2u181_40:
  6013   002558  0E00               	movlw	0
  6014   00255A  6E57               	movwf	_TxBufReadCnt^0,c	;volatile
  6015   00255C                     i2l2723:
  6016                           
  6017                           ;serial.c: 78:     return EUSART4TXbuf[TxBufReadCnt++];
  6018   00255C  2A57               	incf	_TxBufReadCnt^0,f,c	;volatile
  6019   00255E  0457               	decf	_TxBufReadCnt^0,w,c	;volatile
  6020   002560  6E01               	movwf	??_getCharFromTxBuf^0,c
  6021   002562  6A02               	clrf	(??_getCharFromTxBuf+1)^0,c
  6022   002564  0E00               	movlw	low _EUSART4TXbuf
  6023   002566  2401               	addwf	??_getCharFromTxBuf^0,w,c
  6024   002568  6ED9               	movwf	fsr2l,c
  6025   00256A  0E02               	movlw	high _EUSART4TXbuf
  6026   00256C  2002               	addwfc	(??_getCharFromTxBuf+1)^0,w,c
  6027   00256E  6EDA               	movwf	fsr2h,c
  6028   002570  50DF               	movf	indf2,w,c
  6029   002572  0012               	return		;funcret
  6030   002574                     __end_of_getCharFromTxBuf:
  6031                           	callstack 0
  6032                           
  6033                           	psect	rparam
  6034   000000                     
  6035                           	psect	temp
  6036   00005B                     btemp:
  6037                           	callstack 0
  6038   00005B                     	ds	1
  6039   000000                     int$flags	set	btemp
  6040   000000                     wtemp8	set	btemp+1
  6041   000000                     ttemp5	set	btemp+1
  6042   000000                     ttemp6	set	btemp+4
  6043   000000                     ttemp7	set	btemp+8
  6044                           
  6045                           	psect	config
  6046                           
  6047                           ;Config register CONFIG1L @ 0x300000
  6048                           ;	External Oscillator mode Selection bits
  6049                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  6050                           ;	Power-up default value for COSC bits
  6051                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  6052   300000                     	org	3145728
  6053   300000  AA                 	db	170
  6054                           
  6055                           ;Config register CONFIG1H @ 0x300001
  6056                           ;	unspecified, using default values
  6057                           ;	Clock Out Enable bit
  6058                           ;	CLKOUTEN = 0x1, unprogrammed default
  6059                           ;	Clock Switch Enable bit
  6060                           ;	CSWEN = 0x1, unprogrammed default
  6061                           ;	Fail-Safe Clock Monitor Enable bit
  6062                           ;	FCMEN = 0x1, unprogrammed default
  6063   300001                     	org	3145729
  6064   300001  FF                 	db	255
  6065                           
  6066                           ;Config register CONFIG3L @ 0x300004
  6067                           ;	WDT Period Select bits
  6068                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  6069                           ;	WDT operating mode
  6070                           ;	WDTE = OFF, WDT Disabled
  6071   300004                     	org	3145732
  6072   300004  9F                 	db	159
  6073                           
  6074                           ;Config register CONFIG3H @ 0x300005
  6075                           ;	unspecified, using default values
  6076                           ;	WDT Window Select bits
  6077                           ;	WDTCWS = 0x7, unprogrammed default
  6078                           ;	WDT input clock selector
  6079                           ;	WDTCCS = 0x7, unprogrammed default
  6080   300005                     	org	3145733
  6081   300005  FF                 	db	255
  6082                           tosu	equ	0xFFF
  6083                           tosh	equ	0xFFE
  6084                           tosl	equ	0xFFD
  6085                           stkptr	equ	0xFFC
  6086                           pclatu	equ	0xFFB
  6087                           pclath	equ	0xFFA
  6088                           pcl	equ	0xFF9
  6089                           tblptru	equ	0xFF8
  6090                           tblptrh	equ	0xFF7
  6091                           tblptrl	equ	0xFF6
  6092                           tablat	equ	0xFF5
  6093                           prodh	equ	0xFF4
  6094                           prodl	equ	0xFF3
  6095                           indf0	equ	0xFEF
  6096                           postinc0	equ	0xFEE
  6097                           postdec0	equ	0xFED
  6098                           preinc0	equ	0xFEC
  6099                           plusw0	equ	0xFEB
  6100                           fsr0h	equ	0xFEA
  6101                           fsr0l	equ	0xFE9
  6102                           wreg	equ	0xFE8
  6103                           indf1	equ	0xFE7
  6104                           postinc1	equ	0xFE6
  6105                           postdec1	equ	0xFE5
  6106                           preinc1	equ	0xFE4
  6107                           plusw1	equ	0xFE3
  6108                           fsr1h	equ	0xFE2
  6109                           fsr1l	equ	0xFE1
  6110                           bsr	equ	0xFE0
  6111                           indf2	equ	0xFDF
  6112                           postinc2	equ	0xFDE
  6113                           postdec2	equ	0xFDD
  6114                           preinc2	equ	0xFDC
  6115                           plusw2	equ	0xFDB
  6116                           fsr2h	equ	0xFDA
  6117                           fsr2l	equ	0xFD9
  6118                           status	equ	0xFD8

Data Sizes:
    Strings     59
    Constant    0
    Data        249
    BSS         539
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     84      90
    BANK0           160    152     152
    BANK1           256     27     252
    BANK2           256      0     114
    BANK3           256      0     243
    BANK4           256      0     200
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    away@hist	PTR struct colorHistory size(2) Largest target is 200
		 -> hist(BANK4[200]), 

    bump@mL	PTR struct DC_motor size(1) Largest target is 10
		 -> color2instruction@mL(BANK0[8]), 

    bump@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRllllllhhhllllllll[1]), 

    bump@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRllllllhhhllllllll[1]), 

    bump@mR	PTR struct DC_motor size(1) Largest target is 10
		 -> color2instruction@mR(BANK0[8]), 

    bump@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRllllllhhhllllllll[1]), 

    bump@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRllllllhhhllllllll[1]), 

    color2instruction@hist	PTR struct colorHistory size(2) Largest target is 200
		 -> hist(BANK4[200]), 

    color_read_all@readVals	PTR struct RGBC size(1) Largest target is 16
		 -> calibCards@readVals(COMRAM[16]), checkColor@Vals(BANK0[16]), checkIncidence@tmp(COMRAM[16]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    goStraight@mL	PTR struct DC_motor size(1) Largest target is 10
		 -> color2instruction@mL(BANK0[8]), useSequence@mL(COMRAM[8]), 

    goStraight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRllllllhhhllllllll[1]), 

    goStraight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRllllllhhhllllllll[1]), 

    goStraight@mR	PTR struct DC_motor size(1) Largest target is 10
		 -> color2instruction@mR(BANK0[8]), useSequence@mR(COMRAM[8]), 

    goStraight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRllllllhhhllllllll[1]), 

    goStraight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRllllllhhhllllllll[1]), 

    home@hist	PTR struct colorHistory size(1) Largest target is 2
		 -> color2instruction@hist(BANK0[2]), 

    mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRllllllhhhllllllll[1]), 

    mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRllllllhhhllllllll[1]), 

    ?_mLinit$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRllllllhhhllllllll[1]), 

    ?_mLinit$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRllllllhhhllllllll[1]), 

    mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRllllllhhhllllllll[1]), 

    mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRllllllhhhllllllll[1]), 

    ?_mRinit$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRllllllhhhllllllll[1]), 

    ?_mRinit$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRllllllhhhllllllll[1]), 

    processSequence@history	PTR struct colorHistory size(1) Largest target is 2
		 -> color2instruction@hist(BANK0[2]), 

    S276DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRllllllhhhllllllll[1]), 

    S276DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRllllllhhhllllllll[1]), 

    S2854$buffer	PTR unsigned char  size(2) Largest target is 0

    S2854$source	PTR const unsigned char  size(2) Largest target is 0

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 10
		 -> color2instruction@mL(BANK0[8]), color2instruction@mR(BANK0[8]), dance@mL(COMRAM[8]), dance@mR(COMRAM[8]), 
		 -> turn@mL(COMRAM[8]), turn@mR(COMRAM[8]), useSequence@mL(COMRAM[8]), useSequence@mR(COMRAM[8]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRllllllhhhllllllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRllllllhhhllllllll[1]), 

    stop@mL	PTR struct DC_motor size(1) Largest target is 10
		 -> useSequence@mL(COMRAM[8]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRllllllhhhllllllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRllllllhhhllllllll[1]), 

    stop@mR	PTR struct DC_motor size(1) Largest target is 10
		 -> useSequence@mR(COMRAM[8]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRllllllhhhllllllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRllllllhhhllllllll[1]), 

    storeSequence@history	PTR struct colorHistory size(1) Largest target is 2
		 -> color2instruction@hist(BANK0[2]), 

    turnLeft@mL	PTR struct DC_motor size(1) Largest target is 10
		 -> dance@mL(COMRAM[8]), turn@mL(COMRAM[8]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRllllllhhhllllllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRllllllhhhllllllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(1) Largest target is 10
		 -> dance@mR(COMRAM[8]), turn@mR(COMRAM[8]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRllllllhhhllllllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRllllllhhhllllllll[1]), 

    turnRight@mL	PTR struct DC_motor size(1) Largest target is 10
		 -> dance@mL(COMRAM[8]), turn@mL(COMRAM[8]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRllllllhhhllllllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRllllllhhhllllllll[1]), 

    turnRight@mR	PTR struct DC_motor size(1) Largest target is 10
		 -> dance@mR(COMRAM[8]), turn@mR(COMRAM[8]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRllllllhhhllllllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRllllllhhhllllllll[1]), 

    useSequence@history	PTR struct colorHistory size(1) Largest target is 2
		 -> color2instruction@hist(BANK0[2]), 

    vfprintf$0	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf$1	PTR const unsigned char  size(1) Largest target is 4
		 -> STR_3(CODE[4]), STR_5(CODE[4]), STR_7(CODE[4]), STR_9(CODE[4]), 

    vfprintf$2	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _color2instruction->_home
    _home->_useSequence
    _useSequence->_turn
    _turn->_turnLeft
    _turn->_turnRight
    _turnRight->_setMotorPWM
    _turnLeft->_setMotorPWM
    _stop->_setMotorPWM
    _goStraight->_setMotorPWM
    _checkIncidence->_color_read_all
    _bump->_setMotorPWM
    _setMotorPWM->___awdiv
    _checkWhite->_checkColor
    _checkColor->_color_read_all
    _color_read_all->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    ___aldiv->___wmul

Critical Paths under _HighISR in COMRAM

    _HighISR->_getCharFromTxBuf

Critical Paths under _main in BANK0

    _main->_away
    _away->_color2instruction
    _color2instruction->_checkColor
    _checkWhite->_checkColor

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_away

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                59    59      0   54143
                                            136 BANK0     16    16      0
                  _I2C_2_Master_Init
                    _Interrupts_init
                               _away
                   _color_click_init
                    _initCalibColors
                    _initDCmotorsPWM
                         _initUSART4
                             _mLinit
                             _mRinit
 ---------------------------------------------------------------------------------
 (1) _mRinit                                              16     8      8     219
                                              4 COMRAM    16     8      8
 ---------------------------------------------------------------------------------
 (1) _mLinit                                              16     8      8     219
                                              4 COMRAM    16     8      8
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      1     1      0      31
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initCalibColors                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     363
                                              8 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     363
                                              6 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _away                                                47    29     18   53243
                                            116 BANK0     20     2     18
                                              0 BANK1     27    27      0
                         _checkWhite
                  _color2instruction
 ---------------------------------------------------------------------------------
 (2) _color2instruction                                   47     2     45   47636
                                             69 BANK0     47     2     45
                               _bump
                         _checkColor
                     _checkIncidence
                         _goStraight
                               _home
                    _processSequence
                      _storeSequence
                         _triLED_tog
                               _turn
 ---------------------------------------------------------------------------------
 (3) _storeSequence                                       11     0     11     850
                                              4 COMRAM    11     0     11
 ---------------------------------------------------------------------------------
 (3) _processSequence                                      7     6      1     437
                                              4 COMRAM     7     6      1
 ---------------------------------------------------------------------------------
 (3) _home                                                17     0     17   19911
                                             67 COMRAM    17     0     17
                        _useSequence
 ---------------------------------------------------------------------------------
 (4) _useSequence                                         21     4     17   19548
                                             46 COMRAM    21     4     17
                         _goStraight
                               _stop
                               _turn
 ---------------------------------------------------------------------------------
 (3) _turn                                                20     0     20   10039
                                             26 COMRAM    20     0     20
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (4) _turnRight                                            8     4      4    3917
                                             18 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (4) _turnLeft                                             8     4      4    4187
                                             18 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (5) _stop                                                 2     0      2    3241
                                             18 COMRAM     2     0      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (5) _goStraight                                          12     6      6    5130
                                             18 COMRAM    10     4      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _checkIncidence                                      16    16      0    1166
                                             32 COMRAM    16    16      0
                     _color_read_all
                         _triLED_tog
 ---------------------------------------------------------------------------------
 (3) _bump                                                 6     2      4    3703
                                             18 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (5) _setMotorPWM                                          6     5      1    2813
                                             12 COMRAM     6     5      1
                            ___awdiv
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     685
                                              4 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _checkWhite                                          27    27      0    5213
                                             69 BANK0     27    27      0
                         _checkColor
                         _triLED_tog
 ---------------------------------------------------------------------------------
 (3) _checkColor                                         104    77     27    4981
                                             32 COMRAM    35     8     27
                                              0 BANK0     69    69      0
                            ___aldiv
                             ___wmul
                                _abs
                     _color_read_all
                         _triLED_tog
 ---------------------------------------------------------------------------------
 (3) _triLED_tog                                           1     1      0      93
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _color_read_all                                      24    23      1     984
                                              8 COMRAM    24    23      1
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      31
                                              5 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_Read                                    3     3      0      65
                                              5 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _abs                                                  4     2      2     453
                                              4 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1492
                                              4 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___aldiv                                             14     6      8    1165
                                             10 COMRAM    14     6      8
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _HighISR                                              2     2      0       0
                                              2 COMRAM     2     2      0
                   _getCharFromTxBuf
                      _isDataInTxBuf
 ---------------------------------------------------------------------------------
 (10) _isDataInTxBuf                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _getCharFromTxBuf                                    2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_2_Master_Init
   _Interrupts_init
   _away
     _checkWhite
       _checkColor
         ___aldiv
           ___wmul (ARG)
         ___wmul
         _abs
         _color_read_all
           _I2C_2_Master_Read
             _I2C_2_Master_Idle
           _I2C_2_Master_RepStart
             _I2C_2_Master_Idle
           _I2C_2_Master_Start
             _I2C_2_Master_Idle
           _I2C_2_Master_Stop
             _I2C_2_Master_Idle
           _I2C_2_Master_Write
             _I2C_2_Master_Idle
         _triLED_tog
       _triLED_tog
     _color2instruction
       _bump
         _setMotorPWM
           ___awdiv
       _checkColor
       _checkIncidence
         _color_read_all
         _triLED_tog
       _goStraight
         _setMotorPWM
       _home
         _useSequence
           _goStraight
           _stop
             _setMotorPWM
           _turn
             _turnLeft
               _setMotorPWM
             _turnRight
               _setMotorPWM
       _processSequence
       _storeSequence
       _triLED_tog
       _turn
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _initCalibColors
   _initDCmotorsPWM
   _initUSART4
   _mLinit
   _mRinit

 _HighISR (ROOT)
   _getCharFromTxBuf
   _isDataInTxBuf

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      58        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      C8      13       78.1%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      F3      11       94.9%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      72       9       44.5%
BITBANK1           100      0       0       6        0.0%
BANK1              100     1B      FC       7       98.4%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     98      98       5       95.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     54      5A       1       95.7%
BITBIGSFRllllll     52      0       0      40        0.0%
BITBIGSFRllllll     37      0       0      42        0.0%
BITBIGSFRhhl        32      0       0      33        0.0%
BITBIGSFRllllll     2D      0       0      45        0.0%
BITBIGSFRllllll     2A      0       0      52        0.0%
BITBIGSFRllllll     26      0       0      56        0.0%
BITBIGSFRllllll     1E      0       0      46        0.0%
BITBIGSFRhlll       1D      0       0      37        0.0%
BITBIGSFRllllll     11      0       0      47        0.0%
BITBIGSFRllllll      F      0       0      54        0.0%
BITBIGSFRhlhh        E      0       0      34        0.0%
BITBIGSFRhhh         D      0       0      32        0.0%
BITBIGSFRllllll      9      0       0      53        0.0%
BITBIGSFRllllll      8      0       0      43        0.0%
BITBIGSFRllllll      6      0       0      55        0.0%
BITBIGSFRllllll      6      0       0      51        0.0%
BITBIGSFRllllll      5      0       0      50        0.0%
BITBIGSFRllllll      3      0       0      49        0.0%
BITBIGSFRllllll      2      0       0      41        0.0%
BITBIGSFRhllh        2      0       0      36        0.0%
BITBIGSFRllllll      1      0       0      44        0.0%
BITBIGSFRhlhl        1      0       0      35        0.0%
BITBIGSFRllllll      1      0       0      48        0.0%
BITBIGSFRlllllh      1      0       0      39        0.0%
BITBIGSFRllh         1      0       0      38        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     41B      57        0.0%
DATA                 0      0     41B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Tue Dec 12 11:07:37 2023

               _color_read_all 1128                             l92 25C4                             l95 2654  
                           l89 24E4                             l98 12DE                   ___awdiv@sign 000A  
                  goStraight@i 001B            ___wmul@multiplicand 0007            color2instruction@mL 00A5  
          color2instruction@mR 00AD              ??_Interrupts_init 0005                            l101 204C  
                          l130 23D0                            l116 1126                            l150 144C  
                          l137 1C5E                            l305 15BA                            l162 1E20  
                          l170 232C                            l315 22CA                            l155 21EE  
                          l308 1D48                            l173 2546                            l167 1838  
                          l271 20EA                            l520 259C                            l281 2386  
                          l523 25C6                            l291 1A50                            l612 2612  
                          l532 26A2                            l380 2634                            l541 2412  
                          l526 25EC                            l278 16FA                            l606 24B0  
                          l535 268E                            l529 2698                            l297 1944  
                          l609 247C                            l538 2678                            l691 1B5C  
                          l843 1EE4                            l588 2684                   goStraight@mL 0013  
                          _abs 24E6                   goStraight@mR 0014                            _red 01A2  
                          _pos 0055                            wreg 0FE8                           ?_abs 0005  
                         l3001 1A3A                           l3011 1876                           l3003 183A  
                         l3101 148E                           l3021 18A2                           l3013 1882  
                         l3005 1846                           l3111 14C8                           l3103 14A4  
                         l3031 18D4                           l3023 18B8                           l3015 1890  
                         l3007 1850                           l3121 1504                           l3113 14D6  
                         l3105 14B0                           l3041 190A                           l3033 18E0  
                         l3025 18BA                           l3017 1898                           l3009 185E  
                         l1290 2518                           l3211 1A52                           l3051 25C6  
                         l3131 153E                           l3123 150C                           l3115 14E0  
                         l3107 14B0                           l3043 1912                           l3035 18EA  
                         l3027 18BC                           l3019 18A0                           l3203 182C  
                         l3221 1A86                           l3213 1A56                           l3205 25EE  
                         l3053 25D6                           l3061 2674                           l3301 1C90  
                         l3141 1576                           l3133 154A                           l3125 1524  
                         l3117 14EE                           l3109 14BA                           l3045 1928  
                         l3037 18F6                           l3029 18C6                           l3231 1AC8  
                         l3223 1A96                           l3215 1A64                           l3207 260A  
                         l1287 2500                           l3071 23D4                           l3055 2690  
                         l3063 2686                           l3311 1CD4                           l3303 1C9E  
                         l3143 157E                           l3135 1554                           l3127 1526  
                         l3119 14FC                           l3151 232E                           l3047 192A  
                         l3039 1902                           l3241 1B1A                           l3233 1AD4  
                         l3225 1A9A                           l3217 1A74                           l3081 2410  
                         l3073 23D8                           l3057 2694                           l3065 268A  
                         l3321 1D04                           l3313 1CD6                           l3305 1CAC  
                         l3145 1596                           l3137 1562                           l3129 1530  
                         l3161 2376                           l3153 2338                           l3049 192E  
                         l3401 13B4                           l3251 1B4C                           l3243 1B1C  
                         l3235 1AE2                           l3227 1AAA                           l3219 1A78  
                         l3075 23E0                           l3067 269A                           l3059 2670  
                         l3171 126E                           l3331 1D46                           l3323 1D12  
                         l3315 1CE0                           l3307 1CB4                           l3147 1598  
                         l3139 156E                           l3163 237E                           l3155 2346  
                         l3091 22A4                           l3411 1420                           l3403 13E4  
                         l3245 1B26                           l3237 1AEC                           l3229 1AC0  
                         l3181 24F4                           l3077 23E8                           l3069 269E  
                         l3173 1284                           l3165 25A0                           l3261 0E5E  
                         l3325 1D1E                           l3317 1CEE                           l3309 1CBC  
                         l3149 159C                           l3157 235C                           l3093 22B6  
                         l3085 2268                           l3341 1DBC                           l3333 2176  
                         l3405 13F2                           l3421 24DA                           l3413 24B2  
                         l3501 248A                           l3239 1B0A                           l3247 1B2C  
                         l3079 240E                           l3175 12A2                           l3167 25A6  
                         l3271 108E                           l3255 0E3E                           l3327 1D26  
                         l3319 1CFA                           l3095 144E                           l3159 236A  
                         l3087 227A                           l3191 175E                           l3183 16FC  
                         l3343 1DFE                           l3335 21EA                           l3407 140E  
                         l3351 257E                           l3415 24B6                           l3423 1FAA  
                         l3431 206C                           l3503 2492                           l3511 2456  
                         l3249 1B3C                           l3177 12C0                           l3169 1128  
                         l3281 1114                           l3273 10B4                           l3257 0E44  
                         l3329 1D2E                           l3097 1460                           l3089 228C  
                         l3193 1776                           l3185 1704                           l3345 1E02  
                         l3337 1D4A                           l3409 1418                           l3425 22CC  
                         l3353 2584                           l3361 2638                           l3417 24C0  
                         l3441 2096                           l3433 207E                           l3505 249E  
                         l3513 245E                           l3179 24E6                           l3275 10C4  
                         l3267 0E66                           l3259 0E4C                           l3371 1BDE  
                         l3363 1B5E                           l3291 23B8                           l3099 147A  
                         l3195 17CE                           l3347 251A                           l3339 1D56  
                         l3427 2312                           l3355 2586                           l3419 24D0  
                         l3451 20AA                           l3443 2098                           l3435 2086  
                         l3515 246A                           l3277 10F2                           l3269 101E  
                         l3373 1C12                           l3365 1B64                           l2901 1E3C  
                         l3293 23C6                           l3285 2388                           l3197 17E6  
                         l3189 1722                           l3381 12E4                           l3357 2588  
                         l3349 2574                           l3461 20BC                           l3453 20AE  
                         l3445 209C                           l3437 208A                           l3429 2050  
                         l3509 244A                           l3279 10F8                           l3375 1C46  
                         l3367 1B76                           l2911 1E62                           l2903 1E40  
                         l3295 1C60                           l3287 238E                           l3199 1822  
                         l3391 133C                           l3383 12F8                           l3359 258A  
                         l3471 20D2                           l3463 20C4                           l3455 20B2  
                         l3447 20A0                           l3439 2092                           l3369 1BAA  
                         l3377 1C54                           l2921 1E98                           l2913 1E74  
                         l2905 1E4E                           l3297 1C6A                           l3289 2396  
                         l3393 1350                           l3385 12FC                           l3481 20E8  
                         l3473 20D4                           l3465 20C6                           l3457 20B6  
                         l3449 20A6                           l2923 1EAE                           l2915 1E7C  
                         l2931 1EC4                           l2907 1E56                           l3299 1C78  
                         l3395 136C                           l3387 1310                           l3379 12E0  
                         l3475 20DC                           l3467 20C8                           l3459 20BA  
                         l3491 262E                           l3483 2614                           l3571 21F8  
                         l2933 1ED4                           l2925 1EB6                           l2917 1E84  
                         l2909 1E5A                           l2941 15D6                           l3397 13A4  
                         l3389 1322                           l3477 20DE                           l3469 20D0  
                         l3493 2630                           l3485 2618                           l3581 2228  
                         l3573 21FC                           l2935 1EDC                           l2927 1EB8  
                         l2919 1E92                           l2951 167E                           l2943 161A  
                         l3399 13AA                           l3479 20E0                           l3495 2632  
                         l3487 2622                           l3583 222E                           l3575 2200  
                         l3567 21F0                           l3497 267A                           l2929 1EBE  
                         l2953 16BE                           l2945 162C                           l2961 1968  
                         l3489 2624                           l3577 2204                           l3569 21F4  
                         l2947 1630                           l2939 15BC                           l2971 19AC  
                         l2963 1980                           l2955 1946                           l3499 247E  
                         l3579 2216                           l2949 1664                           l2981 19D2  
                         l2973 19AE                           l2965 198E                           l2957 1952  
                         l2895 1E22                           l2991 1A0E                           l2983 19DE  
                         l2975 19C4                           l2967 199C                           l2959 195C  
                         l2897 1E26                           l2993 1A16                           l2985 19EA  
                         l2977 19C6                           l2969 19A4                           l2899 1E34  
                         l2995 1A1E                           l2987 19F4                           l2979 19C8  
                         l2997 1A34                           l2989 1A02                           l2999 1A36  
                         STR_1 0E01                           STR_2 0E14                           STR_3 0E34  
                         STR_4 0E2F                           STR_6 0E1B                           STR_8 0E29  
                         u2100 1ED4                           u2101 1ED0                           u2110 15D6  
                         u2111 15D2                           u2120 167E                           u2200 228C  
                         u2121 167A                           u2201 2288                           u2050 1E34  
                         u2130 1A50                           u2210 22B6                           u2051 1E30  
                         u2131 1A4C                           u2211 22B2                           u2300 24F4  
                         u2060 1E4E                           u2220 1460                           u2140 1944  
                         u2301 24F0                           u2061 1E4A                           u2221 145C  
                         u2141 1940                           u2150 25D6                           u2070 1E74  
                         u2230 147A                           u2310 171E                           u2151 25D2  
                         u2071 1E70                           u2231 1476                           u3007 191C  
                         u2311 171A                           u2160 25EC                           u2400 10B4  
                         u2080 1E92                           u2240 148E                   _BAUD4CONbits 0EE9  
                         u2161 25E8                           u2401 10B0                           u2081 1E8E  
                         u2241 148A                           u3017 19B8                           u2321 1780  
                         u2170 23FC                           u2090 1EAE                           u2250 14A4  
                         u2171 23F4                           u2411 10EA                           u2091 1EAA  
                         u2251 14A0                           u3027 1A28                           u2331 1792  
                         u2340 1A64                           u2420 1114                           u2260 15BA  
                         u2500 1E20                           u2341 1A60                           u2421 1110  
                         u2261 15B6                           u3037 1516                           u2501 1E1C  
                         u2350 1A86                           u2190 227A                           u2351 1A82  
                         u2431 111E                           u3047 1588                           u2191 2276  
                         u2511 2524                           u2360 1AC0                           u2440 23B8  
                         u2361 1ABC                           u3057 1CC6                           u2441 23B4  
                         u2521 2536                           u2601 131A                           u2370 1AE2  
                         u2450 1D7A                           _T2PR 0FBC                           u2371 1ADE  
                         u2275 25AE                           u2531 1B6E                           u3067 1D38  
                         u2451 1D74                           u2611 1376                           u2380 1B0A  
                         u2188 23FE                           u2276 25B0                           u2540 1BAA  
                         u2460 1D7C                           u2381 1B06                           u2285 25B8  
                         u2541 1BA6                           u2621 1388                           u2701 200E  
                         u2390 1B3C                           u2286 25BA                           u2550 1BDE  
                         u2470 1DBC                           u2391 1B38                           u2295 25C2  
                         u2551 1BDA                           u2471 1DB8                           u2631 142A  
                         u2711 2020                           u2296 25C4                           u2560 1C12  
                         u2480 1DE0                           u2561 1C0E                           u2481 1DDA  
                         u2641 143C                           u2721 2032                           u2570 1C46  
                         u2490 1DE2                           u2571 1C42                           u2731 2044  
                         u2651 1FB4                           u2580 12F8                           u2581 12F4  
                         u2741 22DA                           u2661 1FC6                           u2901 220E  
                         u2590 1310                           u2591 130C                           u2751 22EC  
                         u2671 1FD8                           u2911 2220                           u2761 22FE  
                         u2681 1FEA                           u2921 2238                           u2691 1FFC  
                         u2771 24A8                           u2931 224A                           u2781 2474  
                         u2947 24C6                           u2957 231E                           u2967 132E  
                         u2977 1768                           u2987 17D8                           u2997 18AC  
                         abs@a 0005                           _blue 016C                           _away 22CC  
                         _main 21F0                           _bump 1C60                           _home 251A  
                         _hist 0400                           _pink 0136                           fsr1h 0FE2  
                         fsr2h 0FDA                           indf2 0FDF                           fsr1l 0FE1  
                         fsr2l 0FD9                           btemp 005B                           _stop 232E  
                         _turn 2268             useSequence@history 003F                           prodh 0FF4  
                         prodl 0FF3                           start 004E                ?_checkIncidence 0001  
              __end_of_HighISR 004E         __end_of_color_read_all 12E0                   ___param_bank 0000  
                        ??_abs 0007              checkColor@absDiff 007F          color2instruction@hist 00D0  
              __end_of___aldiv 1B5E                          ?_away 00D4                          ?_main 0001  
                        ?_bump 0013                          ?_home 0044                __end_of___awdiv 1EE6  
                        STR_10 0E22                          STR_11 0E38                          STR_12 0E3A  
                        ?_stop 0013                          ?_turn 001B                ___awdiv@divisor 0007  
                        i2l420 266C                          i2l413 2572                          i2l595 0042  
              ___awdiv@counter 0009     __end_of_I2C_2_Master_Start 269A     __end_of_I2C_2_Master_Write 267A  
                        _count 01D9                          _green 0187                          tablat 0FF5  
                        plusw0 0FEB                          plusw1 0FE3                          plusw2 0FDB  
                        ttemp5 005C                          ttemp6 005F                          ttemp7 0063  
                        status 0FD8                          wtemp8 005C                   useSequence@i 0042  
        _I2C_2_Master_RepStart 269A                ?_color_read_all 0009                __initialization 20EC  
                 __end_of_away 232E                   __end_of_main 2268                   __end_of_bump 1D4A  
                 __end_of_home 2548                   __end_of_stop 2388                   __end_of_turn 22CC  
                       ??_away 00E6                         ??_main 0055                         ??_bump 0017  
                       ??_home 0055                         ??_stop 0015                         ??_turn 002F  
                __activetblptr 0002                   ?_setMotorPWM 000D                         _CCPR1H 0FAA  
                       _CCPR2H 0FA6                         _CCPR3H 0F25                         _CCPR4H 0F21  
             ___awdiv@dividend 0005                         _RC0PPS 0E62                         _RC4REG 0EE3  
                       _RE2PPS 0E74                         _RD5PPS 0E6F                         _RC7PPS 0E69  
                       _RD6PPS 0E70                         _RE4PPS 0E76                         i2l2721 2558  
                       i2l2723 255C                         i2l2719 2548                         i2l1929 2656  
                       i2l2891 002A                         _RG6PPS 0E88                         i2l2893 003E  
                       i2l2887 0012                         i2l2889 0022                      ??_HighISR 0003  
     __end_of_color_click_init 24E6                         _RX4PPS 0E15                         _TX4REG 0EE4  
                bump@direction 0015                   _CCPTMRS0bits 0FAD               _getCharFromTxBuf 2548  
                    ??___aldiv 0013                         ___wmul 25EE                         _mLinit 247E  
                       _blackC 023C                      ??___awdiv 0009                         _mRinit 244A  
                       _maxPow 01BF                         _minPow 01BD                         clear_0 2132  
                       clear_1 213E                         clear_2 214A                         clear_3 2156  
             ___awdiv@quotient 000B                         _orange 011B                         isa$std 0001  
                       away@mL 00D4                         away@mR 00DC                         _whiteC 0257  
                       main@mL 00E8                         main@mR 00F0                         _yellow 0151  
                       bump@mL 0013                         bump@mR 0014                         home@mL 0044  
                       home@mR 004C                   __mediumconst 0000                         tblptrh 0FF7  
                       tblptrl 0FF6                         tblptru 0FF8                  _newColorFound 01DB  
                       stop@mL 0013                         stop@mR 0014              ??_initDCmotorsPWM 0005  
                       turn@mL 001B                         turn@mR 0023               __end_of_turnLeft 1A52  
        __end_of_isDataInTxBuf 266E                  _storeSequence 2176                     __accesstop 0060  
      __end_of__initialization 2168                  useSequence@mL 002F                  useSequence@mR 0037  
       ?_I2C_2_Master_RepStart 0001                  ___rparam_used 0001                  checkWhite@tmp 00A5  
                 ?_useSequence 002F                _Interrupts_init 267A                 __pcstackCOMRAM 0001  
                 __pidataBANK1 1EE6                   __pidataBANK2 2414              checkIncidence@tmp 0021  
              triLED_tog@state 0005          storeSequence@polarity 0008                     _checkColor 0E3E  
                   _checkWhite 1B5E                     __pbssBANK1 01C3                     __pbssBANK2 0200  
                   __pbssBANK3 0300                     __pbssBANK4 0400               ??_checkIncidence 0021  
               ?_storeSequence 0005              _color_writetoaddr 2636                   _T2CLKCONbits 0FBF  
          goStraight@direction 0015             ?_color_writetoaddr 0007                        ?___wmul 0005  
                      ?_mLinit 0005                        ?_mRinit 0005            ??_color_writetoaddr 0008  
          checkColor@colorDiff 0095                     _goStraight 144E                        _SP4BRGH 0EE6  
                      _SP4BRGL 0EE5                        i2u80_40 266C                        i2u79_40 266A  
                      i2u79_41 2664                        _SSP2ADD 0ED6                        _SSP2BUF 0ED5  
          checkColor@currColor 0060        __end_of_Interrupts_init 2686         color_writetoaddr@value 0007  
               checkColor@Vals 0085                        _HighISR 0008               ??_color_read_all 000A  
    __end_of_color_writetoaddr 2656             _I2C_2_Master_Start 2690                     _initUSART4 2614  
           _I2C_2_Master_Write 266E     color2instruction@currColor 00B5                        __Hparam 0000  
                      __Lparam 0000                        ___aldiv 1A52                        ___awdiv 1E22  
          ?_I2C_2_Master_Start 0001            ?_I2C_2_Master_Write 0001                   __psmallconst 0E00  
                 turn@polarity 002D                        __pcinit 20EC                        __ramtop 0E00  
                    ?_turnLeft 0013              ??_initCalibColors 0005                        __ptext0 21F0  
                      __ptext1 244A                        __ptext2 247E                        __ptext3 2614  
                      __ptext4 204E                        __ptext5 1FAA                        __ptext6 24B2  
                      __ptext7 2636                        __ptext8 2574                        __ptext9 22CC  
            color_read_all@tmp 0011              ??_processSequence 0006                      _T2CONbits 0FBD  
                 turnLeft@iter 0015               ___aldiv@dividend 000B                      _T2HLTbits 0FBE  
                _RxBufWriteCnt 005A       __end_of_getCharFromTxBuf 2574                ??_storeSequence 0010  
                  ?_checkColor 0021           ??_I2C_2_Master_Start 0006           ??_I2C_2_Master_Write 0006  
         end_of_initialization 2168                    ?_checkWhite 0001                  __Lmediumconst 0000  
            ?_color_click_init 0001                     _triLED_tog 259E         color_read_all@readVals 0009  
           ??_color_click_init 0009               ___aldiv@quotient 0015                        postdec1 0FE5  
                      postdec2 0FDD                        postinc0 0FEE                        postinc1 0FE6  
                      postinc2 0FDE                _incidenceThresh 01C1                _initDCmotorsPWM 204E  
                   ??_turnLeft 0017             setMotorPWM@negDuty 0012              __end_of_turnRight 1946  
                  ?_goStraight 0013                      _TRISAbits 0F81             setMotorPWM@posDuty 0011  
                    _TRISCbits 0F83                      _TRISDbits 0F84                      _TRISEbits 0F85  
                    _TRISFbits 0F86                      _TRISGbits 0F87                      _TRISHbits 0F88  
     color_writetoaddr@address 0008        ??_I2C_2_Master_RepStart 0006               ?_Interrupts_init 0001  
                  _CCP1CONbits 0FAB                   _EUSART4RXbuf 01C3                   _EUSART4TXbuf 0200  
                  _CCP2CONbits 0FA7                    _CCP3CONbits 0F26                    ?_initUSART4 0001  
                  _CCP4CONbits 0F22         storeSequence@direction 000A                 __end_of___wmul 2614  
               __end_of_mLinit 24B2                 __end_of_mRinit 247E            start_initialization 20EC  
                  __end_of_abs 251A                  _TxBufWriteCnt 0058                    ?_triLED_tog 0001  
                  _calibColors 0300              _color2instruction 12E0             ?_color2instruction 00A5  
      __end_of_initDCmotorsPWM 20EC                       ??___wmul 0009                       ??_mLinit 000D  
                     ??_mRinit 000D                    __pdataBANK1 0100                    __pdataBANK2 023C  
          ??_color2instruction 00D2          checkColor@prevAbsDiff 007B         storeSequence@squaresb4 000C  
                  __pbssCOMRAM 0055                  __pcstackBANK0 0060                  __pcstackBANK1 01E1  
         storeSequence@history 0005         processSequence@history 0005      __end_of_color2instruction 144E  
                     ?_HighISR 0001           storeSequence@squares 000E             storeSequence@angle 0006  
              _initCalibColors 1FAA                _processSequence 1D4A                      __pintcode 0008  
                     ?___aldiv 000B                       ?___awdiv 0005                   _readingColor 01DF  
         I2C_2_Master_Read@ack 0007           I2C_2_Master_Read@tmp 0008                    __smallconst 0E00  
            _I2C_2_Master_Idle 25C6              _I2C_2_Master_Init 2574              _I2C_2_Master_Read 23D2  
            _I2C_2_Master_Stop 2686                   _RxBufReadCnt 0059                      _lightBlue 0100  
           ?_I2C_2_Master_Idle 0001             ?_I2C_2_Master_Init 0001             ?_I2C_2_Master_Read 0001  
                ??_setMotorPWM 000E             ?_I2C_2_Master_Stop 0001                   ??_checkColor 003C  
     initDCmotorsPWM@PWMperiod 0005              ?_getCharFromTxBuf 0001                   ??_checkWhite 0044  
           ??_getCharFromTxBuf 0001                ___aldiv@divisor 000F            ??_I2C_2_Master_Idle 0005  
              ___aldiv@counter 0013            ??_I2C_2_Master_Init 0005            ??_I2C_2_Master_Read 0006  
               ___wmul@product 0009                       _LATAbits 0F79            ??_I2C_2_Master_Stop 0006  
                     _LATCbits 0F7B                  _isDataInTxBuf 2656                       _LATDbits 0F7C  
                     _LATEbits 0F7D                       _LATFbits 0F7E                       _LATGbits 0F7F  
                     _LATHbits 0F80                       _PIE4bits 0E2D                       i2u203_40 0022  
                     i2u203_41 001E                       i2u204_40 003E                       i2u204_41 003A  
                  turnRight@mL 0013                    turnRight@mR 0014                       i2u181_40 2558  
                     i2u181_41 2554                       _PIR4bits 0E37               ?_initDCmotorsPWM 0001  
                     _SSP2CON2 0EDA                       _SSP2STAT 0ED8             __end_of_checkColor 1128  
    __end_of_I2C_2_Master_Idle 25EE             __end_of_checkWhite 1C60      __end_of_I2C_2_Master_Init 259E  
    __end_of_I2C_2_Master_Read 2414              ___wmul@multiplier 0005      __end_of_I2C_2_Master_Stop 2690  
                 setMotorPWM@m 000D    I2C_2_Master_Write@data_byte 0006                   ??_goStraight 0019  
                    _squaresb4 01D7                   _TxBufReadCnt 0057                      _turnRight 183A  
                    copy_data0 2100                      copy_data1 2120          __end_of_storeSequence 21F0  
      __end_of_initCalibColors 204E                 ?_isDataInTxBuf 0001  __end_of_I2C_2_Master_RepStart 26A4  
      __end_of_processSequence 1E22            __end_of_setMotorPWM 16FC                   ??_initUSART4 0005  
                ??_useSequence 0040                       __Hrparam 0000                    checkColor@i 0083  
                     __Lrparam 0000             __end_of_goStraight 15BC                     _ANSELDbits 0EA7  
           __end_of_initUSART4 2636                     ?_turnRight 0013                       __ptext10 12E0  
                     __ptext11 2176                       __ptext20 2388                       __ptext12 1D4A  
                     __ptext21 1C60                       __ptext13 251A                       __ptext30 2690  
                     __ptext22 15BC                       __ptext14 16FC                       __ptext31 269A  
                     __ptext23 1E22                       __ptext15 2268                       __ptext40 2548  
                     __ptext32 23D2                       __ptext24 1B5E                       __ptext16 183A  
                     __ptext33 25C6                       __ptext25 0E3E                       __ptext17 1946  
                     __ptext34 24E6                       __ptext26 259E                       __ptext18 232E  
                     __ptext35 25EE                       __ptext27 1128                       __ptext19 144E  
                     __ptext36 1A52                       __ptext28 266E                       __ptext37 267A  
                     __ptext29 2686                       __ptext39 2656               processSequence@i 000A  
                 _SSP2CON1bits 0ED9                   _SSP2CON2bits 0EDA                       _finished 01DD  
                     mLinit@mL 000D              goStraight@squares 0017                   ??_triLED_tog 0005  
                   turnLeft@mL 0013                     turnLeft@mR 0014                       mRinit@mR 000D  
                   turnRight@i 0019                       isa$xinst 0000                     _RC4STAbits 0EE7  
                     int$flags 005B                       away@hist 00E4            __end_of_useSequence 183A  
                     _turnLeft 1946                       home@hist 0054                     _INTCONbits 0FF2  
           __end_of_triLED_tog 25C6                    _setMotorPWM 15BC                ??_isDataInTxBuf 0001  
                     intlevel2 0000               ?_initCalibColors 0001               ?_processSequence 0005  
                turnRight@iter 0015                      turnLeft@i 0019                 _checkIncidence 2388  
             _color_click_init 24B2                     _SSP2DATPPS 0E1D                     _SSP2CLKPPS 0E1C  
                away@currColor 01E1                       turn@iter 002B                   ___aldiv@sign 0014  
                  ??_turnRight 0017                     _TX4STAbits 0EE8         __end_of_checkIncidence 23D2  
                  _useSequence 16FC  
